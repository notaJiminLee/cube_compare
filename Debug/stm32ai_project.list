
stm32ai_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  08007ae0  08007ae0  00017ae0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800825c  0800825c  00020688  2**0
                  CONTENTS
  4 .ARM          00000008  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008264  08008264  00020688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000688  20000000  0800826c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000688  080088f4  00020688  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  20000820  080088f4  00020820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020688  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c73  00000000  00000000  000206b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a57  00000000  00000000  0003832b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012ad9  00000000  00000000  0003ad82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  0004d860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ff8  00000000  00000000  0004e340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028075  00000000  00000000  00050338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fee  00000000  00000000  000783ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbd83  00000000  00000000  0009139b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cb  00000000  00000000  0018d11e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038bc  00000000  00000000  0018d1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00190aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00190b74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000688 	.word	0x20000688
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007aac 	.word	0x08007aac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000068c 	.word	0x2000068c
 800020c:	08007aac 	.word	0x08007aac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a8 	b.w	8000f50 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83a 	bl	8000c80 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_f2lz>:
 8000c18:	ee07 0a90 	vmov	s15, r0
 8000c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c24:	d401      	bmi.n	8000c2a <__aeabi_f2lz+0x12>
 8000c26:	f000 b80b 	b.w	8000c40 <__aeabi_f2ulz>
 8000c2a:	eef1 7a67 	vneg.f32	s15, s15
 8000c2e:	b508      	push	{r3, lr}
 8000c30:	ee17 0a90 	vmov	r0, s15
 8000c34:	f000 f804 	bl	8000c40 <__aeabi_f2ulz>
 8000c38:	4240      	negs	r0, r0
 8000c3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3e:	bd08      	pop	{r3, pc}

08000c40 <__aeabi_f2ulz>:
 8000c40:	b5d0      	push	{r4, r6, r7, lr}
 8000c42:	f7ff fca1 	bl	8000588 <__aeabi_f2d>
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__aeabi_f2ulz+0x38>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4606      	mov	r6, r0
 8000c4c:	460f      	mov	r7, r1
 8000c4e:	f7ff fcf3 	bl	8000638 <__aeabi_dmul>
 8000c52:	f000 f97f 	bl	8000f54 <__aeabi_d2uiz>
 8000c56:	4604      	mov	r4, r0
 8000c58:	f7ff fc74 	bl	8000544 <__aeabi_ui2d>
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <__aeabi_f2ulz+0x3c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f7ff fcea 	bl	8000638 <__aeabi_dmul>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4630      	mov	r0, r6
 8000c6a:	4639      	mov	r1, r7
 8000c6c:	f7ff fb2c 	bl	80002c8 <__aeabi_dsub>
 8000c70:	f000 f970 	bl	8000f54 <__aeabi_d2uiz>
 8000c74:	4621      	mov	r1, r4
 8000c76:	bdd0      	pop	{r4, r6, r7, pc}
 8000c78:	3df00000 	.word	0x3df00000
 8000c7c:	41f00000 	.word	0x41f00000

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	9d08      	ldr	r5, [sp, #32]
 8000c86:	4604      	mov	r4, r0
 8000c88:	468e      	mov	lr, r1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d14d      	bne.n	8000d2a <__udivmoddi4+0xaa>
 8000c8e:	428a      	cmp	r2, r1
 8000c90:	4694      	mov	ip, r2
 8000c92:	d969      	bls.n	8000d68 <__udivmoddi4+0xe8>
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	b152      	cbz	r2, 8000cb0 <__udivmoddi4+0x30>
 8000c9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ca2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ca6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000caa:	ea41 0e03 	orr.w	lr, r1, r3
 8000cae:	4094      	lsls	r4, r2
 8000cb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb4:	0c21      	lsrs	r1, r4, #16
 8000cb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000cba:	fa1f f78c 	uxth.w	r7, ip
 8000cbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000cc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cc6:	fb06 f107 	mul.w	r1, r6, r7
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x64>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cd6:	f080 811f 	bcs.w	8000f18 <__udivmoddi4+0x298>
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	f240 811c 	bls.w	8000f18 <__udivmoddi4+0x298>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf4:	fb00 f707 	mul.w	r7, r0, r7
 8000cf8:	42a7      	cmp	r7, r4
 8000cfa:	d90a      	bls.n	8000d12 <__udivmoddi4+0x92>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d04:	f080 810a 	bcs.w	8000f1c <__udivmoddi4+0x29c>
 8000d08:	42a7      	cmp	r7, r4
 8000d0a:	f240 8107 	bls.w	8000f1c <__udivmoddi4+0x29c>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d16:	1be4      	subs	r4, r4, r7
 8000d18:	2600      	movs	r6, #0
 8000d1a:	b11d      	cbz	r5, 8000d24 <__udivmoddi4+0xa4>
 8000d1c:	40d4      	lsrs	r4, r2
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e9c5 4300 	strd	r4, r3, [r5]
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d909      	bls.n	8000d42 <__udivmoddi4+0xc2>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	f000 80ef 	beq.w	8000f12 <__udivmoddi4+0x292>
 8000d34:	2600      	movs	r6, #0
 8000d36:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	fab3 f683 	clz	r6, r3
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	d14a      	bne.n	8000de0 <__udivmoddi4+0x160>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xd4>
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	f200 80f9 	bhi.w	8000f46 <__udivmoddi4+0x2c6>
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d0e0      	beq.n	8000d24 <__udivmoddi4+0xa4>
 8000d62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d66:	e7dd      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000d68:	b902      	cbnz	r2, 8000d6c <__udivmoddi4+0xec>
 8000d6a:	deff      	udf	#255	; 0xff
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	f040 8092 	bne.w	8000e9a <__udivmoddi4+0x21a>
 8000d76:	eba1 010c 	sub.w	r1, r1, ip
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	0c20      	lsrs	r0, r4, #16
 8000d86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d92:	fb0e f003 	mul.w	r0, lr, r3
 8000d96:	4288      	cmp	r0, r1
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x12c>
 8000d9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x12a>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2c0>
 8000daa:	4643      	mov	r3, r8
 8000dac:	1a09      	subs	r1, r1, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db4:	fb07 1110 	mls	r1, r7, r0, r1
 8000db8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x156>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x154>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2ca>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dde:	e79c      	b.n	8000d1a <__udivmoddi4+0x9a>
 8000de0:	f1c6 0720 	rsb	r7, r6, #32
 8000de4:	40b3      	lsls	r3, r6
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa20 f407 	lsr.w	r4, r0, r7
 8000df2:	fa01 f306 	lsl.w	r3, r1, r6
 8000df6:	431c      	orrs	r4, r3
 8000df8:	40f9      	lsrs	r1, r7
 8000dfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000e02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e06:	0c20      	lsrs	r0, r4, #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e14:	fb08 f00e 	mul.w	r0, r8, lr
 8000e18:	4288      	cmp	r0, r1
 8000e1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b8>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2bc>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2bc>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4461      	add	r1, ip
 8000e38:	1a09      	subs	r1, r1, r0
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e40:	fb09 1110 	mls	r1, r9, r0, r1
 8000e44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e4c:	458e      	cmp	lr, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1e2>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2b4>
 8000e5a:	458e      	cmp	lr, r1
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2b4>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e66:	fba0 9402 	umull	r9, r4, r0, r2
 8000e6a:	eba1 010e 	sub.w	r1, r1, lr
 8000e6e:	42a1      	cmp	r1, r4
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46a6      	mov	lr, r4
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x2a4>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x2a0>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x212>
 8000e7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e82:	fa01 f707 	lsl.w	r7, r1, r7
 8000e86:	fa22 f306 	lsr.w	r3, r2, r6
 8000e8a:	40f1      	lsrs	r1, r6
 8000e8c:	431f      	orrs	r7, r3
 8000e8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	f1c2 0320 	rsb	r3, r2, #32
 8000e9e:	40d8      	lsrs	r0, r3
 8000ea0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea8:	4091      	lsls	r1, r2
 8000eaa:	4301      	orrs	r1, r0
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb8:	fb07 3610 	mls	r6, r7, r0, r3
 8000ebc:	0c0b      	lsrs	r3, r1, #16
 8000ebe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ec2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ec6:	429e      	cmp	r6, r3
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x260>
 8000ece:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b8>
 8000ed8:	429e      	cmp	r6, r3
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b8>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	1b9b      	subs	r3, r3, r6
 8000ee2:	b289      	uxth	r1, r1
 8000ee4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee8:	fb07 3316 	mls	r3, r7, r6, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x28a>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2b0>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2b0>
 8000f06:	3e02      	subs	r6, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0x104>
 8000f12:	462e      	mov	r6, r5
 8000f14:	4628      	mov	r0, r5
 8000f16:	e705      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000f18:	4606      	mov	r6, r0
 8000f1a:	e6e3      	b.n	8000ce4 <__udivmoddi4+0x64>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6f8      	b.n	8000d12 <__udivmoddi4+0x92>
 8000f20:	454b      	cmp	r3, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f8>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f8>
 8000f30:	4646      	mov	r6, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x28a>
 8000f34:	4620      	mov	r0, r4
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1e2>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x260>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b8>
 8000f40:	3b02      	subs	r3, #2
 8000f42:	4461      	add	r1, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x12c>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e709      	b.n	8000d5e <__udivmoddi4+0xde>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x156>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <__aeabi_d2uiz>:
 8000f54:	004a      	lsls	r2, r1, #1
 8000f56:	d211      	bcs.n	8000f7c <__aeabi_d2uiz+0x28>
 8000f58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f5c:	d211      	bcs.n	8000f82 <__aeabi_d2uiz+0x2e>
 8000f5e:	d50d      	bpl.n	8000f7c <__aeabi_d2uiz+0x28>
 8000f60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f68:	d40e      	bmi.n	8000f88 <__aeabi_d2uiz+0x34>
 8000f6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f76:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f86:	d102      	bne.n	8000f8e <__aeabi_d2uiz+0x3a>
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	4770      	bx	lr
 8000f8e:	f04f 0000 	mov.w	r0, #0
 8000f92:	4770      	bx	lr
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	2300      	movs	r3, #0
{
 8000f9c:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	492c      	ldr	r1, [pc, #176]	; (8001050 <SystemClock_Config+0xb8>)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2001      	movs	r0, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa4:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa6:	9302      	str	r3, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8000faa:	930d      	str	r3, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	4a29      	ldr	r2, [pc, #164]	; (8001054 <SystemClock_Config+0xbc>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000fb6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	640b      	str	r3, [r1, #64]	; 0x40
 8000fc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	6813      	ldr	r3, [r2, #0]
 8000fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd6:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd8:	9408      	str	r4, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	23d8      	movs	r3, #216	; 0xd8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001040 <SystemClock_Config+0xa8>
 8000ff0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	2309      	movs	r3, #9
 8000ff8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8000ffc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f000 fd58 	bl	8001ab4 <HAL_RCC_OscConfig>
 8001004:	b108      	cbz	r0, 800100a <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001006:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800100a:	f000 fd19 	bl	8001a40 <HAL_PWREx_EnableOverDrive>
 800100e:	b108      	cbz	r0, 8001014 <SystemClock_Config+0x7c>
 8001010:	b672      	cpsid	i
  while (1)
 8001012:	e7fe      	b.n	8001012 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001018:	2200      	movs	r2, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800101a:	a802      	add	r0, sp, #8
 800101c:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8001048 <SystemClock_Config+0xb0>
 8001022:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800102e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001030:	f000 ff2e 	bl	8001e90 <HAL_RCC_ClockConfig>
 8001034:	b108      	cbz	r0, 800103a <SystemClock_Config+0xa2>
 8001036:	b672      	cpsid	i
  while (1)
 8001038:	e7fe      	b.n	8001038 <SystemClock_Config+0xa0>
}
 800103a:	b014      	add	sp, #80	; 0x50
 800103c:	bd10      	pop	{r4, pc}
 800103e:	bf00      	nop
 8001040:	00000002 	.word	0x00000002
 8001044:	00000000 	.word	0x00000000
 8001048:	0000000f 	.word	0x0000000f
 800104c:	00000002 	.word	0x00000002
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <main>:
{
 8001058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ai_network_params ai_params = {
 800105c:	4b89      	ldr	r3, [pc, #548]	; (8001284 <main+0x22c>)
{
 800105e:	b0bd      	sub	sp, #244	; 0xf4
  ai_network_params ai_params = {
 8001060:	f04f 1801 	mov.w	r8, #65537	; 0x10001
  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8001064:	4c88      	ldr	r4, [pc, #544]	; (8001288 <main+0x230>)
 8001066:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 800106a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
  ai_network_params ai_params = {
 800106e:	2701      	movs	r7, #1
  ai_handle network = AI_HANDLE_NULL;
 8001070:	2600      	movs	r6, #0
  ai_network_params ai_params = {
 8001072:	e9cd 3821 	strd	r3, r8, [sp, #132]	; 0x84
 8001076:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
  ai_handle network = AI_HANDLE_NULL;
 800107a:	9607      	str	r6, [sp, #28]
  ai_network_params ai_params = {
 800107c:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
 8001080:	9324      	str	r3, [sp, #144]	; 0x90
  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8001082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001084:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8001088:	f1a4 0510 	sub.w	r5, r4, #16
  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 800108c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001090:	e88e 0003 	stmia.w	lr, {r0, r1}
  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8001094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800109a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800109e:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 80010a2:	f002 f8d7 	bl	8003254 <ai_network_data_weights_get>
  ai_network_params ai_params = {
 80010a6:	4b79      	ldr	r3, [pc, #484]	; (800128c <main+0x234>)
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010a8:	aa06      	add	r2, sp, #24
  ai_network_params ai_params = {
 80010aa:	f8cd 80a0 	str.w	r8, [sp, #160]	; 0xa0
 80010ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80010b0:	2320      	movs	r3, #32
 80010b2:	9025      	str	r0, [sp, #148]	; 0x94
 80010b4:	932a      	str	r3, [sp, #168]	; 0xa8
 80010b6:	ab19      	add	r3, sp, #100	; 0x64
 80010b8:	9626      	str	r6, [sp, #152]	; 0x98
 80010ba:	932b      	str	r3, [sp, #172]	; 0xac
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010bc:	ab05      	add	r3, sp, #20
  ai_network_params ai_params = {
 80010be:	f8ad 70a4 	strh.w	r7, [sp, #164]	; 0xa4
 80010c2:	962c      	str	r6, [sp, #176]	; 0xb0
  ai_input[0].n_batches = 1;
 80010c4:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
  ai_output[0].n_batches = 1;
 80010c8:	f8ad 7050 	strh.w	r7, [sp, #80]	; 0x50
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010cc:	9217      	str	r2, [sp, #92]	; 0x5c
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010ce:	9311      	str	r3, [sp, #68]	; 0x44
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010d4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010d8:	486d      	ldr	r0, [pc, #436]	; (8001290 <main+0x238>)
 80010da:	f8c0 6250 	str.w	r6, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010e2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80010e6:	6943      	ldr	r3, [r0, #20]
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010f2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80010f6:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80010fe:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001102:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001106:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800110a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800110e:	ea4f 1c43 	mov.w	ip, r3, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001112:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001116:	4673      	mov	r3, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001118:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800111c:	3b01      	subs	r3, #1
 800111e:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001120:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8001124:	d1f8      	bne.n	8001118 <main+0xc0>
    } while(sets-- != 0U);
 8001126:	f1ac 0c20 	sub.w	ip, ip, #32
 800112a:	f11c 0f20 	cmn.w	ip, #32
 800112e:	d1f0      	bne.n	8001112 <main+0xba>
 8001130:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001134:	6943      	ldr	r3, [r0, #20]
 8001136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113a:	6143      	str	r3, [r0, #20]
 800113c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001144:	f000 fa52 	bl	80015ec <HAL_Init>
  SystemClock_Config();
 8001148:	f7ff ff26 	bl	8000f98 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b51      	ldr	r3, [pc, #324]	; (8001294 <main+0x23c>)
  hcrc.Instance = CRC;
 800114e:	4852      	ldr	r0, [pc, #328]	; (8001298 <main+0x240>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hcrc.Instance = CRC;
 8001152:	4952      	ldr	r1, [pc, #328]	; (800129c <main+0x244>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	f042 0201 	orr.w	r2, r2, #1
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
 800115a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800115c:	f002 0201 	and.w	r2, r2, #1
 8001160:	9208      	str	r2, [sp, #32]
 8001162:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001166:	f042 0202 	orr.w	r2, r2, #2
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
 800116c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800116e:	2300      	movs	r3, #0
  hcrc.Instance = CRC;
 8001170:	6001      	str	r1, [r0, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	f002 0202 	and.w	r2, r2, #2
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001176:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001178:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800117c:	2301      	movs	r3, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	9209      	str	r2, [sp, #36]	; 0x24
 8001180:	9a09      	ldr	r2, [sp, #36]	; 0x24
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001182:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001184:	f000 fab6 	bl	80016f4 <HAL_CRC_Init>
 8001188:	b108      	cbz	r0, 800118e <main+0x136>
  __ASM volatile ("cpsid i" : : : "memory");
 800118a:	b672      	cpsid	i
  while (1)
 800118c:	e7fe      	b.n	800118c <main+0x134>
  htim1.Instance = TIM1;
 800118e:	4c44      	ldr	r4, [pc, #272]	; (80012a0 <main+0x248>)
  htim1.Init.Prescaler = 21600;
 8001190:	f245 4360 	movw	r3, #21600	; 0x5460
 8001194:	4943      	ldr	r1, [pc, #268]	; (80012a4 <main+0x24c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	902d      	str	r0, [sp, #180]	; 0xb4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	9030      	str	r0, [sp, #192]	; 0xc0
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	60a0      	str	r0, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	61a0      	str	r0, [r4, #24]
  htim1.Init.Prescaler = 21600;
 80011a0:	e9c4 1300 	strd	r1, r3, [r4]
  htim1.Init.Period = 65535;
 80011a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a8:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  htim1.Init.RepetitionCounter = 0;
 80011b0:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b4:	4620      	mov	r0, r4
  htim1.Init.Period = 65535;
 80011b6:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b8:	f001 fa26 	bl	8002608 <HAL_TIM_Base_Init>
 80011bc:	b108      	cbz	r0, 80011c2 <main+0x16a>
 80011be:	b672      	cpsid	i
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <main+0x168>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c6:	a92d      	add	r1, sp, #180	; 0xb4
 80011c8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ca:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011cc:	f001 fb2a 	bl	8002824 <HAL_TIM_ConfigClockSource>
 80011d0:	b108      	cbz	r0, 80011d6 <main+0x17e>
 80011d2:	b672      	cpsid	i
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <main+0x17c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2200      	movs	r2, #0
 80011d8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011dc:	a90a      	add	r1, sp, #40	; 0x28
 80011de:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e4:	f001 fbce 	bl	8002984 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	b9a8      	cbnz	r0, 8001216 <main+0x1be>
  huart1.Instance = USART1;
 80011ea:	4d2f      	ldr	r5, [pc, #188]	; (80012a8 <main+0x250>)
  huart1.Init.BaudRate = 115200;
 80011ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011f0:	4a2e      	ldr	r2, [pc, #184]	; (80012ac <main+0x254>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	6128      	str	r0, [r5, #16]
  huart1.Init.BaudRate = 115200;
 80011f4:	e9c5 2300 	strd	r2, r3, [r5]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011fa:	e9c5 0002 	strd	r0, r0, [r5, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fe:	e9c5 0006 	strd	r0, r0, [r5, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001202:	e9c5 0008 	strd	r0, r0, [r5, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001206:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	f001 fdd7 	bl	8002dbc <HAL_UART_Init>
 800120e:	4606      	mov	r6, r0
 8001210:	b118      	cbz	r0, 800121a <main+0x1c2>
 8001212:	b672      	cpsid	i
  while (1)
 8001214:	e7fe      	b.n	8001214 <main+0x1bc>
 8001216:	b672      	cpsid	i
 8001218:	e7fe      	b.n	8001218 <main+0x1c0>
  HAL_TIM_Base_Start(&htim1);
 800121a:	4620      	mov	r0, r4
 800121c:	f001 faaa 	bl	8002774 <HAL_TIM_Base_Start>
  uint32_t init_time = __HAL_TIM_GET_COUNTER(&htim1);
 8001220:	6823      	ldr	r3, [r4, #0]
  ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001222:	4631      	mov	r1, r6
 8001224:	a807      	add	r0, sp, #28
  uint32_t init_time = __HAL_TIM_GET_COUNTER(&htim1);
 8001226:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001228:	f001 ff90 	bl	800314c <ai_network_create>
  if (ai_err.type != AI_ERROR_NONE)
 800122c:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8001230:	d011      	beq.n	8001256 <main+0x1fe>
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001232:	4e1f      	ldr	r6, [pc, #124]	; (80012b0 <main+0x258>)
 8001234:	ac2d      	add	r4, sp, #180	; 0xb4
 8001236:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800123c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123e:	e896 0003 	ldmia.w	r6, {r0, r1}
    HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001242:	2364      	movs	r3, #100	; 0x64
 8001244:	2225      	movs	r2, #37	; 0x25
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001246:	f844 0b04 	str.w	r0, [r4], #4
    HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800124a:	4628      	mov	r0, r5
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 800124c:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800124e:	a92d      	add	r1, sp, #180	; 0xb4
 8001250:	f001 febe 	bl	8002fd0 <HAL_UART_Transmit>
    while(1);
 8001254:	e7fe      	b.n	8001254 <main+0x1fc>
  if (!ai_network_init(network, &ai_params))
 8001256:	a921      	add	r1, sp, #132	; 0x84
 8001258:	9807      	ldr	r0, [sp, #28]
 800125a:	9203      	str	r2, [sp, #12]
 800125c:	f001 ff84 	bl	8003168 <ai_network_init>
 8001260:	9a03      	ldr	r2, [sp, #12]
 8001262:	bb48      	cbnz	r0, 80012b8 <main+0x260>
    ai_err = ai_network_get_error(network);
 8001264:	9807      	ldr	r0, [sp, #28]
 8001266:	f001 ff6f 	bl	8003148 <ai_network_get_error>
    buf_len = sprintf(buf, "ai_network_init error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 800126a:	4912      	ldr	r1, [pc, #72]	; (80012b4 <main+0x25c>)
 800126c:	0a03      	lsrs	r3, r0, #8
 800126e:	b2c2      	uxtb	r2, r0
 8001270:	a82d      	add	r0, sp, #180	; 0xb4
 8001272:	f004 fa69 	bl	8005748 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001276:	2364      	movs	r3, #100	; 0x64
 8001278:	b282      	uxth	r2, r0
 800127a:	a92d      	add	r1, sp, #180	; 0xb4
 800127c:	4628      	mov	r0, r5
 800127e:	f001 fea7 	bl	8002fd0 <HAL_UART_Transmit>
    while(1);
 8001282:	e7fe      	b.n	8001282 <main+0x22a>
 8001284:	40040440 	.word	0x40040440
 8001288:	08007ae0 	.word	0x08007ae0
 800128c:	00040440 	.word	0x00040440
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	40023800 	.word	0x40023800
 8001298:	200006a4 	.word	0x200006a4
 800129c:	40023000 	.word	0x40023000
 80012a0:	200006c8 	.word	0x200006c8
 80012a4:	40010000 	.word	0x40010000
 80012a8:	20000714 	.word	0x20000714
 80012ac:	40011000 	.word	0x40011000
 80012b0:	08007afc 	.word	0x08007afc
 80012b4:	08007b24 	.word	0x08007b24
    buf_len = sprintf(buf, "%d, for..\r\n", i);
 80012b8:	492f      	ldr	r1, [pc, #188]	; (8001378 <main+0x320>)
 80012ba:	a82d      	add	r0, sp, #180	; 0xb4
 80012bc:	f004 fa44 	bl	8005748 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80012c0:	4628      	mov	r0, r5
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	220a      	movs	r2, #10
 80012c6:	a92d      	add	r1, sp, #180	; 0xb4
 80012c8:	f001 fe82 	bl	8002fd0 <HAL_UART_Transmit>
    ((int8_t *)in_data)[i] = (int8_t)2;
 80012cc:	2202      	movs	r2, #2
  init_time = __HAL_TIM_GET_COUNTER(&htim1) - init_time;
 80012ce:	6823      	ldr	r3, [r4, #0]
  nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80012d0:	a90d      	add	r1, sp, #52	; 0x34
    ((int8_t *)in_data)[i] = (int8_t)2;
 80012d2:	f88d 2014 	strb.w	r2, [sp, #20]
  nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80012d6:	aa13      	add	r2, sp, #76	; 0x4c
 80012d8:	9807      	ldr	r0, [sp, #28]
  init_time = __HAL_TIM_GET_COUNTER(&htim1) - init_time;
 80012da:	6a5f      	ldr	r7, [r3, #36]	; 0x24
  uint32_t warmup_inference_time = __HAL_TIM_GET_COUNTER(&htim1);
 80012dc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80012de:	f001 ffb7 	bl	8003250 <ai_network_run>
  if (nbatch != 1) {
 80012e2:	2801      	cmp	r0, #1
  init_time = __HAL_TIM_GET_COUNTER(&htim1) - init_time;
 80012e4:	eba7 0706 	sub.w	r7, r7, r6
  if (nbatch != 1) {
 80012e8:	d00f      	beq.n	800130a <main+0x2b2>
    ai_err = ai_network_get_error(network);
 80012ea:	9807      	ldr	r0, [sp, #28]
 80012ec:	f001 ff2c 	bl	8003148 <ai_network_get_error>
 80012f0:	4602      	mov	r2, r0
    buf_len = sprintf(buf, "AI ai_network_run error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 80012f2:	4922      	ldr	r1, [pc, #136]	; (800137c <main+0x324>)
 80012f4:	a82d      	add	r0, sp, #180	; 0xb4
 80012f6:	0a13      	lsrs	r3, r2, #8
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	f004 fa25 	bl	8005748 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80012fe:	2364      	movs	r3, #100	; 0x64
 8001300:	b282      	uxth	r2, r0
 8001302:	a92d      	add	r1, sp, #180	; 0xb4
 8001304:	481e      	ldr	r0, [pc, #120]	; (8001380 <main+0x328>)
 8001306:	f001 fe63 	bl	8002fd0 <HAL_UART_Transmit>
  warmup_inference_time = __HAL_TIM_GET_COUNTER(&htim1) - warmup_inference_time;
 800130a:	6823      	ldr	r3, [r4, #0]
      buf_len = sprintf(buf, "AI ai_network_run error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 800130c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800137c <main+0x324>
  warmup_inference_time = __HAL_TIM_GET_COUNTER(&htim1) - warmup_inference_time;
 8001310:	6a5e      	ldr	r6, [r3, #36]	; 0x24
      HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001312:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8001380 <main+0x328>
  warmup_inference_time = __HAL_TIM_GET_COUNTER(&htim1) - warmup_inference_time;
 8001316:	1b76      	subs	r6, r6, r5
    start_time = htim1.Instance->CNT;
 8001318:	6823      	ldr	r3, [r4, #0]
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800131a:	aa13      	add	r2, sp, #76	; 0x4c
 800131c:	a90d      	add	r1, sp, #52	; 0x34
 800131e:	9807      	ldr	r0, [sp, #28]
    start_time = htim1.Instance->CNT;
 8001320:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001322:	f001 ff95 	bl	8003250 <ai_network_run>
    if (nbatch != 1) {
 8001326:	2801      	cmp	r0, #1
 8001328:	d00f      	beq.n	800134a <main+0x2f2>
      ai_err = ai_network_get_error(network);
 800132a:	9807      	ldr	r0, [sp, #28]
 800132c:	f001 ff0c 	bl	8003148 <ai_network_get_error>
 8001330:	4602      	mov	r2, r0
      buf_len = sprintf(buf, "AI ai_network_run error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 8001332:	4649      	mov	r1, r9
 8001334:	a82d      	add	r0, sp, #180	; 0xb4
 8001336:	0a13      	lsrs	r3, r2, #8
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	f004 fa05 	bl	8005748 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800133e:	a92d      	add	r1, sp, #180	; 0xb4
 8001340:	b282      	uxth	r2, r0
 8001342:	2364      	movs	r3, #100	; 0x64
 8001344:	4640      	mov	r0, r8
 8001346:	f001 fe43 	bl	8002fd0 <HAL_UART_Transmit>
    uint32_t end_time = htim1.Instance->CNT;
 800134a:	6823      	ldr	r3, [r4, #0]
    buf_len = sprintf(buf, "%lu, %lu, %lu\r\n", init_time, warmup_inference_time, inference_time);
 800134c:	a82d      	add	r0, sp, #180	; 0xb4
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <main+0x32c>)
    uint32_t end_time = htim1.Instance->CNT;
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      inference_time = end_time - start_time;
 8001352:	1b5a      	subs	r2, r3, r5
    if(end_time < start_time){
 8001354:	429d      	cmp	r5, r3
      inference_time = 65535 - start_time + end_time + 1;
 8001356:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800135a:	bf88      	it	hi
 800135c:	1b5a      	subhi	r2, r3, r5
    buf_len = sprintf(buf, "%lu, %lu, %lu\r\n", init_time, warmup_inference_time, inference_time);
 800135e:	4633      	mov	r3, r6
 8001360:	9200      	str	r2, [sp, #0]
 8001362:	463a      	mov	r2, r7
 8001364:	f004 f9f0 	bl	8005748 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001368:	2364      	movs	r3, #100	; 0x64
 800136a:	b282      	uxth	r2, r0
 800136c:	a92d      	add	r1, sp, #180	; 0xb4
 800136e:	4640      	mov	r0, r8
 8001370:	f001 fe2e 	bl	8002fd0 <HAL_UART_Transmit>
  {
 8001374:	e7d0      	b.n	8001318 <main+0x2c0>
 8001376:	bf00      	nop
 8001378:	08007b50 	.word	0x08007b50
 800137c:	08007b5c 	.word	0x08007b5c
 8001380:	20000714 	.word	0x20000714
 8001384:	08007b88 	.word	0x08007b88

08001388 <Error_Handler>:
 8001388:	b672      	cpsid	i
  while (1)
 800138a:	e7fe      	b.n	800138a <Error_Handler+0x2>

0800138c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_MspInit+0x2c>)
{
 800138e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001392:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
 8001398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800139e:	9200      	str	r2, [sp, #0]
 80013a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013a8:	645a      	str	r2, [r3, #68]	; 0x44
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	b002      	add	sp, #8
 80013b6:	4770      	bx	lr
 80013b8:	40023800 	.word	0x40023800

080013bc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_CRC_MspInit+0x28>)
 80013be:	6802      	ldr	r2, [r0, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d000      	beq.n	80013c6 <HAL_CRC_MspInit+0xa>
 80013c4:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013c6:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80013ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 80013ce:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 80013d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013e0:	b002      	add	sp, #8
 80013e2:	4770      	bx	lr
 80013e4:	40023000 	.word	0x40023000

080013e8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_TIM_Base_MspInit+0x28>)
 80013ea:	6802      	ldr	r2, [r0, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d000      	beq.n	80013f2 <HAL_TIM_Base_MspInit+0xa>
 80013f0:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
{
 80013f6:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800140a:	b002      	add	sp, #8
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40010000 	.word	0x40010000

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b5d0      	push	{r4, r6, r7, lr}
 8001416:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	2100      	movs	r1, #0
{
 800141a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141c:	2284      	movs	r2, #132	; 0x84
 800141e:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	9108      	str	r1, [sp, #32]
 8001422:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001426:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142a:	f003 fc2b 	bl	8004c84 <memset>
  if(huart->Instance==USART1)
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_UART_MspInit+0xac>)
 8001430:	6822      	ldr	r2, [r4, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d001      	beq.n	800143a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001436:	b02a      	add	sp, #168	; 0xa8
 8001438:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800143a:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800143e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	f000 fe4e 	bl	80020e0 <HAL_RCCEx_PeriphCLKConfig>
 8001444:	2800      	cmp	r0, #0
 8001446:	d137      	bne.n	80014b8 <HAL_UART_MspInit+0xa4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800144a:	2080      	movs	r0, #128	; 0x80
 800144c:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144e:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8001450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001452:	2600      	movs	r6, #0
 8001454:	2703      	movs	r7, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8001456:	f042 0210 	orr.w	r2, r2, #16
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
 800145c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800145e:	f002 0210 	and.w	r2, r2, #16
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001468:	f042 0202 	orr.w	r2, r2, #2
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
 800146e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001470:	f002 0202 	and.w	r2, r2, #2
 8001474:	9202      	str	r2, [sp, #8]
 8001476:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	631a      	str	r2, [r3, #48]	; 0x30
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001482:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001488:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	a904      	add	r1, sp, #16
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001494:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f000 f99e 	bl	80017d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	a904      	add	r1, sp, #16
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014a8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80014ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f000 f992 	bl	80017d8 <HAL_GPIO_Init>
}
 80014b4:	b02a      	add	sp, #168	; 0xa8
 80014b6:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 80014b8:	f7ff ff66 	bl	8001388 <Error_Handler>
 80014bc:	e7c4      	b.n	8001448 <HAL_UART_MspInit+0x34>
 80014be:	bf00      	nop
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020000 	.word	0x40020000

080014d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler>
 80014d2:	bf00      	nop

080014d4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <HardFault_Handler>
 80014d6:	bf00      	nop

080014d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler>
 80014da:	bf00      	nop

080014dc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <BusFault_Handler>
 80014de:	bf00      	nop

080014e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler>
 80014e2:	bf00      	nop

080014e4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <DebugMon_Handler>:
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop

080014ec <PendSV_Handler>:
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f0:	f000 b888 	b.w	8001604 <HAL_IncTick>

080014f4 <_sbrk>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4c0d      	ldr	r4, [pc, #52]	; (800152c <_sbrk+0x38>)
 80014f8:	4603      	mov	r3, r0
 80014fa:	490d      	ldr	r1, [pc, #52]	; (8001530 <_sbrk+0x3c>)
 80014fc:	4d0d      	ldr	r5, [pc, #52]	; (8001534 <_sbrk+0x40>)
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	1b49      	subs	r1, r1, r5
 8001502:	b12a      	cbz	r2, 8001510 <_sbrk+0x1c>
 8001504:	4413      	add	r3, r2
 8001506:	428b      	cmp	r3, r1
 8001508:	d808      	bhi.n	800151c <_sbrk+0x28>
 800150a:	4610      	mov	r0, r2
 800150c:	6023      	str	r3, [r4, #0]
 800150e:	bd38      	pop	{r3, r4, r5, pc}
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <_sbrk+0x44>)
 8001512:	4602      	mov	r2, r0
 8001514:	6020      	str	r0, [r4, #0]
 8001516:	4413      	add	r3, r2
 8001518:	428b      	cmp	r3, r1
 800151a:	d9f6      	bls.n	800150a <_sbrk+0x16>
 800151c:	f003 fb72 	bl	8004c04 <__errno>
 8001520:	230c      	movs	r3, #12
 8001522:	f04f 32ff 	mov.w	r2, #4294967295
 8001526:	6003      	str	r3, [r0, #0]
 8001528:	4610      	mov	r0, r2
 800152a:	bd38      	pop	{r3, r4, r5, pc}
 800152c:	2000079c 	.word	0x2000079c
 8001530:	20050000 	.word	0x20050000
 8001534:	00001000 	.word	0x00001000
 8001538:	20000820 	.word	0x20000820

0800153c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <SystemInit+0x10>)
 800153e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001542:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001546:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <Reset_Handler>:
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0x12>
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <LoopFillZerobss+0x16>)
 8001556:	490e      	ldr	r1, [pc, #56]	; (8001590 <LoopFillZerobss+0x1a>)
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <LoopFillZerobss+0x1e>)
 800155a:	2300      	movs	r3, #0
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:
 800155e:	58d4      	ldr	r4, [r2, r3]
 8001560:	50c4      	str	r4, [r0, r3]
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:
 8001564:	18c4      	adds	r4, r0, r3
 8001566:	428c      	cmp	r4, r1
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <LoopFillZerobss+0x22>)
 800156c:	4c0b      	ldr	r4, [pc, #44]	; (800159c <LoopFillZerobss+0x26>)
 800156e:	2300      	movs	r3, #0
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:
 8001576:	42a2      	cmp	r2, r4
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>
 800157a:	f7ff ffdf 	bl	800153c <SystemInit>
 800157e:	f003 fb47 	bl	8004c10 <__libc_init_array>
 8001582:	f7ff fd69 	bl	8001058 <main>
 8001586:	4770      	bx	lr
 8001588:	20050000 	.word	0x20050000
 800158c:	20000000 	.word	0x20000000
 8001590:	20000688 	.word	0x20000688
 8001594:	0800826c 	.word	0x0800826c
 8001598:	20000688 	.word	0x20000688
 800159c:	20000820 	.word	0x20000820

080015a0 <ADC_IRQHandler>:
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>
	...

080015a4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_InitTick+0x3c>)
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_InitTick+0x40>)
{
 80015ac:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ae:	7809      	ldrb	r1, [r1, #0]
{
 80015b0:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b8:	fbb2 f0f3 	udiv	r0, r2, r3
 80015bc:	f000 f884 	bl	80016c8 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c0:	b908      	cbnz	r0, 80015c6 <HAL_InitTick+0x22>
 80015c2:	2c0f      	cmp	r4, #15
 80015c4:	d901      	bls.n	80015ca <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80015c6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80015c8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ca:	2200      	movs	r2, #0
 80015cc:	4621      	mov	r1, r4
 80015ce:	f04f 30ff 	mov.w	r0, #4294967295
 80015d2:	f000 f83b 	bl	800164c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <HAL_InitTick+0x44>)
 80015d8:	2000      	movs	r0, #0
 80015da:	601c      	str	r4, [r3, #0]
}
 80015dc:	bd10      	pop	{r4, pc}
 80015de:	bf00      	nop
 80015e0:	20000004 	.word	0x20000004
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_Init>:
{
 80015ec:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ee:	2003      	movs	r0, #3
 80015f0:	f000 f81a 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f4:	200f      	movs	r0, #15
 80015f6:	f7ff ffd5 	bl	80015a4 <HAL_InitTick>
  HAL_MspInit();
 80015fa:	f7ff fec7 	bl	800138c <HAL_MspInit>
}
 80015fe:	2000      	movs	r0, #0
 8001600:	bd08      	pop	{r3, pc}
 8001602:	bf00      	nop

08001604 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_IncTick+0x10>)
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <HAL_IncTick+0x14>)
 8001608:	6811      	ldr	r1, [r2, #0]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	440b      	add	r3, r1
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200007a0 	.word	0x200007a0
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800161c:	4b01      	ldr	r3, [pc, #4]	; (8001624 <HAL_GetTick+0x8>)
 800161e:	6818      	ldr	r0, [r3, #0]
}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200007a0 	.word	0x200007a0

08001628 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4906      	ldr	r1, [pc, #24]	; (8001644 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001632:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001634:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001638:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800163e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001640:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	05fa0000 	.word	0x05fa0000

0800164c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_NVIC_SetPriority+0x70>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001654:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001656:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165e:	f1be 0f04 	cmp.w	lr, #4
 8001662:	bf28      	it	cs
 8001664:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001668:	f1bc 0f06 	cmp.w	ip, #6
 800166c:	d91a      	bls.n	80016a4 <HAL_NVIC_SetPriority+0x58>
 800166e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 3cff 	mov.w	ip, #4294967295
 8001674:	fa0c fc03 	lsl.w	ip, ip, r3
 8001678:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001680:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001682:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001686:	ea21 010c 	bic.w	r1, r1, ip
 800168a:	fa01 f103 	lsl.w	r1, r1, r3
 800168e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001692:	db0a      	blt.n	80016aa <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	0109      	lsls	r1, r1, #4
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_NVIC_SetPriority+0x74>)
 8001698:	b2c9      	uxtb	r1, r1
 800169a:	4403      	add	r3, r0
 800169c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80016a4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	4613      	mov	r3, r2
 80016a8:	e7e8      	b.n	800167c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	f000 000f 	and.w	r0, r0, #15
 80016ae:	0109      	lsls	r1, r1, #4
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_NVIC_SetPriority+0x78>)
 80016b2:	b2c9      	uxtb	r1, r1
 80016b4:	4403      	add	r3, r0
 80016b6:	7619      	strb	r1, [r3, #24]
 80016b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ecfc 	.word	0xe000ecfc

080016c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	1e43      	subs	r3, r0, #1
 80016ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ce:	d20c      	bcs.n	80016ea <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	4906      	ldr	r1, [pc, #24]	; (80016f0 <HAL_SYSTICK_Config+0x28>)
 80016d8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016dc:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d036      	beq.n	8001766 <HAL_CRC_Init+0x72>
{
 80016f8:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016fa:	7f43      	ldrb	r3, [r0, #29]
 80016fc:	4604      	mov	r4, r0
 80016fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001702:	b363      	cbz	r3, 800175e <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001704:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001706:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001708:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800170a:	b9f3      	cbnz	r3, 800174a <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <HAL_CRC_Init+0x78>)
 8001710:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	f022 0218 	bic.w	r2, r2, #24
 8001718:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800171a:	7962      	ldrb	r2, [r4, #5]
 800171c:	b18a      	cbz	r2, 8001742 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800171e:	6922      	ldr	r2, [r4, #16]
 8001720:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001722:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001724:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001728:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800172c:	4311      	orrs	r1, r2
 800172e:	6099      	str	r1, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001730:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001738:	4302      	orrs	r2, r0

  /* Return function status */
  return HAL_OK;
 800173a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800173c:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800173e:	7761      	strb	r1, [r4, #29]
}
 8001740:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001742:	f04f 32ff 	mov.w	r2, #4294967295
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	e7eb      	b.n	8001722 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800174a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800174e:	4620      	mov	r0, r4
 8001750:	f000 f80e 	bl	8001770 <HAL_CRCEx_Polynomial_Set>
 8001754:	b908      	cbnz	r0, 800175a <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	e7df      	b.n	800171a <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
}
 800175c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800175e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001760:	f7ff fe2c 	bl	80013bc <HAL_CRC_MspInit>
 8001764:	e7ce      	b.n	8001704 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 8001766:	2001      	movs	r0, #1
}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	04c11db7 	.word	0x04c11db7

08001770 <HAL_CRCEx_Polynomial_Set>:
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001770:	231e      	movs	r3, #30
{
 8001772:	b410      	push	{r4}
 8001774:	e001      	b.n	800177a <HAL_CRCEx_Polynomial_Set+0xa>
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001776:	3b01      	subs	r3, #1
 8001778:	d315      	bcc.n	80017a6 <HAL_CRCEx_Polynomial_Set+0x36>
 800177a:	fa21 fc03 	lsr.w	ip, r1, r3
 800177e:	f01c 0f01 	tst.w	ip, #1
 8001782:	d0f8      	beq.n	8001776 <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 8001784:	2a18      	cmp	r2, #24
 8001786:	d80f      	bhi.n	80017a8 <HAL_CRCEx_Polynomial_Set+0x38>
 8001788:	e8df f002 	tbb	[pc, r2]
 800178c:	0e0e0e14 	.word	0x0e0e0e14
 8001790:	0e0e0e0e 	.word	0x0e0e0e0e
 8001794:	0e0e0e1f 	.word	0x0e0e0e1f
 8001798:	0e0e0e0e 	.word	0x0e0e0e0e
 800179c:	0e0e0e22 	.word	0x0e0e0e22
 80017a0:	0e0e0e0e 	.word	0x0e0e0e0e
 80017a4:	12          	.byte	0x12
 80017a5:	00          	.byte	0x00
 80017a6:	b12a      	cbz	r2, 80017b4 <HAL_CRCEx_Polynomial_Set+0x44>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80017a8:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 80017aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017ae:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 80017b0:	2b06      	cmp	r3, #6
 80017b2:	d8f9      	bhi.n	80017a8 <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80017b4:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80017b6:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 80017b8:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80017ba:	68a3      	ldr	r3, [r4, #8]
 80017bc:	f023 0318 	bic.w	r3, r3, #24
 80017c0:	431a      	orrs	r2, r3
 80017c2:	60a2      	str	r2, [r4, #8]
}
 80017c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017c8:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	d9f2      	bls.n	80017b4 <HAL_CRCEx_Polynomial_Set+0x44>
 80017ce:	e7eb      	b.n	80017a8 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d9ef      	bls.n	80017b4 <HAL_CRCEx_Polynomial_Set+0x44>
 80017d4:	e7e8      	b.n	80017a8 <HAL_CRCEx_Polynomial_Set+0x38>
 80017d6:	bf00      	nop

080017d8 <HAL_GPIO_Init>:
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d8:	2200      	movs	r2, #0
{
 80017da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
 80017de:	4613      	mov	r3, r2
{
 80017e0:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	f8df b248 	ldr.w	fp, [pc, #584]	; 8001a2c <HAL_GPIO_Init+0x254>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017e6:	4689      	mov	r9, r1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e8:	680c      	ldr	r4, [r1, #0]
 80017ea:	e004      	b.n	80017f6 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ec:	3301      	adds	r3, #1
 80017ee:	3202      	adds	r2, #2
 80017f0:	2b10      	cmp	r3, #16
 80017f2:	f000 809a 	beq.w	800192a <HAL_GPIO_Init+0x152>
    ioposition = ((uint32_t)0x01) << position;
 80017f6:	2101      	movs	r1, #1
 80017f8:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	ea01 0e04 	and.w	lr, r1, r4
    if(iocurrent == ioposition)
 80017fe:	43a1      	bics	r1, r4
 8001800:	d1f4      	bne.n	80017ec <HAL_GPIO_Init+0x14>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001802:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001806:	f00c 0103 	and.w	r1, ip, #3
 800180a:	1e4d      	subs	r5, r1, #1
 800180c:	2d01      	cmp	r5, #1
 800180e:	f240 808f 	bls.w	8001930 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001812:	2903      	cmp	r1, #3
 8001814:	f040 80c9 	bne.w	80019aa <HAL_GPIO_Init+0x1d2>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001818:	4091      	lsls	r1, r2
 800181a:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 800181c:	6806      	ldr	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181e:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001822:	ea05 0506 	and.w	r5, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001826:	ea41 0105 	orr.w	r1, r1, r5
      GPIOx->MODER = temp;
 800182a:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182c:	d0de      	beq.n	80017ec <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 8001832:	f023 0503 	bic.w	r5, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001836:	f003 0603 	and.w	r6, r3, #3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800183a:	4f76      	ldr	r7, [pc, #472]	; (8001a14 <HAL_GPIO_Init+0x23c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001840:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001844:	00b6      	lsls	r6, r6, #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001846:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001848:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 800184c:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
 8001850:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 8001854:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001858:	9101      	str	r1, [sp, #4]
 800185a:	9901      	ldr	r1, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800185c:	f04f 010f 	mov.w	r1, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8001860:	f8d5 8008 	ldr.w	r8, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001864:	fa01 f106 	lsl.w	r1, r1, r6
 8001868:	ea28 0101 	bic.w	r1, r8, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800186c:	d02e      	beq.n	80018cc <HAL_GPIO_Init+0xf4>
 800186e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001872:	42b8      	cmp	r0, r7
 8001874:	f000 809d 	beq.w	80019b2 <HAL_GPIO_Init+0x1da>
 8001878:	4f67      	ldr	r7, [pc, #412]	; (8001a18 <HAL_GPIO_Init+0x240>)
 800187a:	42b8      	cmp	r0, r7
 800187c:	f000 809f 	beq.w	80019be <HAL_GPIO_Init+0x1e6>
 8001880:	4f66      	ldr	r7, [pc, #408]	; (8001a1c <HAL_GPIO_Init+0x244>)
 8001882:	42b8      	cmp	r0, r7
 8001884:	f000 80a1 	beq.w	80019ca <HAL_GPIO_Init+0x1f2>
 8001888:	4f65      	ldr	r7, [pc, #404]	; (8001a20 <HAL_GPIO_Init+0x248>)
 800188a:	42b8      	cmp	r0, r7
 800188c:	f000 80a3 	beq.w	80019d6 <HAL_GPIO_Init+0x1fe>
 8001890:	4f64      	ldr	r7, [pc, #400]	; (8001a24 <HAL_GPIO_Init+0x24c>)
 8001892:	42b8      	cmp	r0, r7
 8001894:	f000 80ab 	beq.w	80019ee <HAL_GPIO_Init+0x216>
 8001898:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8001a30 <HAL_GPIO_Init+0x258>
 800189c:	4540      	cmp	r0, r8
 800189e:	f000 80ac 	beq.w	80019fa <HAL_GPIO_Init+0x222>
 80018a2:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8001a34 <HAL_GPIO_Init+0x25c>
 80018a6:	4540      	cmp	r0, r8
 80018a8:	f000 809b 	beq.w	80019e2 <HAL_GPIO_Init+0x20a>
 80018ac:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8001a38 <HAL_GPIO_Init+0x260>
 80018b0:	4540      	cmp	r0, r8
 80018b2:	f000 80a8 	beq.w	8001a06 <HAL_GPIO_Init+0x22e>
 80018b6:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001a3c <HAL_GPIO_Init+0x264>
 80018ba:	4540      	cmp	r0, r8
 80018bc:	bf0c      	ite	eq
 80018be:	f04f 0809 	moveq.w	r8, #9
 80018c2:	f04f 080a 	movne.w	r8, #10
 80018c6:	fa08 f606 	lsl.w	r6, r8, r6
 80018ca:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80018cc:	60a9      	str	r1, [r5, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80018ce:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR;
 80018d2:	4955      	ldr	r1, [pc, #340]	; (8001a28 <HAL_GPIO_Init+0x250>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d4:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80018d8:	4d53      	ldr	r5, [pc, #332]	; (8001a28 <HAL_GPIO_Init+0x250>)
  for(position = 0; position < GPIO_NUMBER; position++)
 80018da:	f103 0301 	add.w	r3, r3, #1
        temp = EXTI->RTSR;
 80018de:	6889      	ldr	r1, [r1, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018e0:	f102 0202 	add.w	r2, r2, #2
        temp &= ~((uint32_t)iocurrent);
 80018e4:	bf0c      	ite	eq
 80018e6:	4031      	andeq	r1, r6
          temp |= iocurrent;
 80018e8:	ea4e 0101 	orrne.w	r1, lr, r1

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ec:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        EXTI->RTSR = temp;
 80018f0:	60a9      	str	r1, [r5, #8]
        temp = EXTI->FTSR;
 80018f2:	68ed      	ldr	r5, [r5, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80018f4:	494c      	ldr	r1, [pc, #304]	; (8001a28 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 80018f6:	bf0c      	ite	eq
 80018f8:	4035      	andeq	r5, r6
          temp |= iocurrent;
 80018fa:	ea4e 0505 	orrne.w	r5, lr, r5

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018fe:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        EXTI->FTSR = temp;
 8001902:	60cd      	str	r5, [r1, #12]
        temp = EXTI->EMR;
 8001904:	684d      	ldr	r5, [r1, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001906:	4948      	ldr	r1, [pc, #288]	; (8001a28 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8001908:	bf0c      	ite	eq
 800190a:	4035      	andeq	r5, r6
          temp |= iocurrent;
 800190c:	ea4e 0505 	orrne.w	r5, lr, r5

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001910:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
        EXTI->EMR = temp;
 8001914:	604d      	str	r5, [r1, #4]
        temp = EXTI->IMR;
 8001916:	6809      	ldr	r1, [r1, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001918:	4d43      	ldr	r5, [pc, #268]	; (8001a28 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 800191a:	bf0c      	ite	eq
 800191c:	4031      	andeq	r1, r6
          temp |= iocurrent;
 800191e:	ea4e 0101 	orrne.w	r1, lr, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8001922:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8001924:	6029      	str	r1, [r5, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001926:	f47f af66 	bne.w	80017f6 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800192a:	b003      	add	sp, #12
 800192c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001930:	2503      	movs	r5, #3
        temp = GPIOx->OSPEEDR; 
 8001932:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001934:	4095      	lsls	r5, r2
 8001936:	ea26 0805 	bic.w	r8, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800193a:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800193e:	43ed      	mvns	r5, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001940:	4096      	lsls	r6, r2
 8001942:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OSPEEDR = temp;
 8001946:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001948:	f3cc 1600 	ubfx	r6, ip, #4, #1
        temp = GPIOx->OTYPER;
 800194c:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001950:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001952:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001956:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 800195a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800195c:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195e:	2902      	cmp	r1, #2
 8001960:	fa01 f102 	lsl.w	r1, r1, r2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001964:	ea06 0805 	and.w	r8, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001968:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800196c:	fa06 f602 	lsl.w	r6, r6, r2
 8001970:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->PUPDR = temp;
 8001974:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	f47f af51 	bne.w	800181c <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3];
 800197a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800197e:	f003 0607 	and.w	r6, r3, #7
 8001982:	f04f 0a0f 	mov.w	sl, #15
 8001986:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800198a:	00b6      	lsls	r6, r6, #2
        temp = GPIOx->AFR[position >> 3];
 800198c:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001990:	fa0a fa06 	lsl.w	sl, sl, r6
 8001994:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001998:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800199c:	fa07 f606 	lsl.w	r6, r7, r6
 80019a0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 80019a4:	f8c8 6020 	str.w	r6, [r8, #32]
 80019a8:	e738      	b.n	800181c <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019aa:	2503      	movs	r5, #3
 80019ac:	4095      	lsls	r5, r2
 80019ae:	43ed      	mvns	r5, r5
 80019b0:	e7d4      	b.n	800195c <HAL_GPIO_Init+0x184>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019b2:	f04f 0801 	mov.w	r8, #1
 80019b6:	fa08 f606 	lsl.w	r6, r8, r6
 80019ba:	4331      	orrs	r1, r6
 80019bc:	e786      	b.n	80018cc <HAL_GPIO_Init+0xf4>
 80019be:	f04f 0802 	mov.w	r8, #2
 80019c2:	fa08 f606 	lsl.w	r6, r8, r6
 80019c6:	4331      	orrs	r1, r6
 80019c8:	e780      	b.n	80018cc <HAL_GPIO_Init+0xf4>
 80019ca:	f04f 0803 	mov.w	r8, #3
 80019ce:	fa08 f606 	lsl.w	r6, r8, r6
 80019d2:	4331      	orrs	r1, r6
 80019d4:	e77a      	b.n	80018cc <HAL_GPIO_Init+0xf4>
 80019d6:	f04f 0804 	mov.w	r8, #4
 80019da:	fa08 f606 	lsl.w	r6, r8, r6
 80019de:	4331      	orrs	r1, r6
 80019e0:	e774      	b.n	80018cc <HAL_GPIO_Init+0xf4>
 80019e2:	f04f 0807 	mov.w	r8, #7
 80019e6:	fa08 f606 	lsl.w	r6, r8, r6
 80019ea:	4331      	orrs	r1, r6
 80019ec:	e76e      	b.n	80018cc <HAL_GPIO_Init+0xf4>
 80019ee:	f04f 0805 	mov.w	r8, #5
 80019f2:	fa08 f606 	lsl.w	r6, r8, r6
 80019f6:	4331      	orrs	r1, r6
 80019f8:	e768      	b.n	80018cc <HAL_GPIO_Init+0xf4>
 80019fa:	f04f 0806 	mov.w	r8, #6
 80019fe:	fa08 f606 	lsl.w	r6, r8, r6
 8001a02:	4331      	orrs	r1, r6
 8001a04:	e762      	b.n	80018cc <HAL_GPIO_Init+0xf4>
 8001a06:	f04f 0808 	mov.w	r8, #8
 8001a0a:	fa08 f606 	lsl.w	r6, r8, r6
 8001a0e:	4331      	orrs	r1, r6
 8001a10:	e75c      	b.n	80018cc <HAL_GPIO_Init+0xf4>
 8001a12:	bf00      	nop
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40021400 	.word	0x40021400
 8001a28:	40013c00 	.word	0x40013c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40021800 	.word	0x40021800
 8001a34:	40021c00 	.word	0x40021c00
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40022400 	.word	0x40022400

08001a40 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_PWREx_EnableOverDrive+0x6c>)
 8001a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8001a48:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001a4c:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a50:	4c17      	ldr	r4, [pc, #92]	; (8001ab0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a62:	f7ff fddb 	bl	800161c <HAL_GetTick>
 8001a66:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a68:	e005      	b.n	8001a76 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a6a:	f7ff fdd7 	bl	800161c <HAL_GetTick>
 8001a6e:	1b40      	subs	r0, r0, r5
 8001a70:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a74:	d817      	bhi.n	8001aa6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a76:	6863      	ldr	r3, [r4, #4]
 8001a78:	03da      	lsls	r2, r3, #15
 8001a7a:	d5f6      	bpl.n	8001a6a <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a7c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a7e:	4d0c      	ldr	r5, [pc, #48]	; (8001ab0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001a86:	f7ff fdc9 	bl	800161c <HAL_GetTick>
 8001a8a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a8c:	e005      	b.n	8001a9a <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a8e:	f7ff fdc5 	bl	800161c <HAL_GetTick>
 8001a92:	1b00      	subs	r0, r0, r4
 8001a94:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a98:	d805      	bhi.n	8001aa6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a9a:	686b      	ldr	r3, [r5, #4]
 8001a9c:	039b      	lsls	r3, r3, #14
 8001a9e:	d5f6      	bpl.n	8001a8e <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001aa0:	2000      	movs	r0, #0
}
 8001aa2:	b003      	add	sp, #12
 8001aa4:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8001aa6:	2003      	movs	r0, #3
}
 8001aa8:	b003      	add	sp, #12
 8001aaa:	bd30      	pop	{r4, r5, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	f000 81b6 	beq.w	8001e26 <HAL_RCC_OscConfig+0x372>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aba:	6803      	ldr	r3, [r0, #0]
{
 8001abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac0:	07dd      	lsls	r5, r3, #31
{
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac6:	d535      	bpl.n	8001b34 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac8:	499a      	ldr	r1, [pc, #616]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001aca:	688a      	ldr	r2, [r1, #8]
 8001acc:	f002 020c 	and.w	r2, r2, #12
 8001ad0:	2a04      	cmp	r2, #4
 8001ad2:	f000 80e0 	beq.w	8001c96 <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad6:	688a      	ldr	r2, [r1, #8]
 8001ad8:	f002 020c 	and.w	r2, r2, #12
 8001adc:	2a08      	cmp	r2, #8
 8001ade:	f000 80d6 	beq.w	8001c8e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae2:	6863      	ldr	r3, [r4, #4]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d010      	beq.n	8001b0c <HAL_RCC_OscConfig+0x58>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 80fd 	beq.w	8001cea <HAL_RCC_OscConfig+0x236>
 8001af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af4:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f000 8185 	beq.w	8001e06 <HAL_RCC_OscConfig+0x352>
 8001afc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e004      	b.n	8001b16 <HAL_RCC_OscConfig+0x62>
 8001b0c:	4a89      	ldr	r2, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff fd81 	bl	800161c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4e86      	ldr	r6, [pc, #536]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8001b1c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	e005      	b.n	8001b2c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fd7c 	bl	800161c <HAL_GetTick>
 8001b24:	1b40      	subs	r0, r0, r5
 8001b26:	2864      	cmp	r0, #100	; 0x64
 8001b28:	f200 80db 	bhi.w	8001ce2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2c:	6833      	ldr	r3, [r6, #0]
 8001b2e:	039a      	lsls	r2, r3, #14
 8001b30:	d5f6      	bpl.n	8001b20 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	079f      	lsls	r7, r3, #30
 8001b36:	d527      	bpl.n	8001b88 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b38:	4a7e      	ldr	r2, [pc, #504]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001b3a:	6891      	ldr	r1, [r2, #8]
 8001b3c:	f011 0f0c 	tst.w	r1, #12
 8001b40:	d07e      	beq.n	8001c40 <HAL_RCC_OscConfig+0x18c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b42:	6891      	ldr	r1, [r2, #8]
 8001b44:	f001 010c 	and.w	r1, r1, #12
 8001b48:	2908      	cmp	r1, #8
 8001b4a:	d076      	beq.n	8001c3a <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b4c:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4e:	4d79      	ldr	r5, [pc, #484]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8104 	beq.w	8001d5e <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 8001b56:	682b      	ldr	r3, [r5, #0]
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fd5d 	bl	800161c <HAL_GetTick>
 8001b62:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	e005      	b.n	8001b72 <HAL_RCC_OscConfig+0xbe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff fd59 	bl	800161c <HAL_GetTick>
 8001b6a:	1b80      	subs	r0, r0, r6
 8001b6c:	2802      	cmp	r0, #2
 8001b6e:	f200 80b8 	bhi.w	8001ce2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	682b      	ldr	r3, [r5, #0]
 8001b74:	0798      	lsls	r0, r3, #30
 8001b76:	d5f6      	bpl.n	8001b66 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	6922      	ldr	r2, [r4, #16]
 8001b7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b80:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b84:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	071a      	lsls	r2, r3, #28
 8001b8a:	d41f      	bmi.n	8001bcc <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	075d      	lsls	r5, r3, #29
 8001b8e:	d534      	bpl.n	8001bfa <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b94:	00d0      	lsls	r0, r2, #3
 8001b96:	d56f      	bpl.n	8001c78 <HAL_RCC_OscConfig+0x1c4>
  FlagStatus pwrclkchanged = RESET;
 8001b98:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9a:	4e67      	ldr	r6, [pc, #412]	; (8001d38 <HAL_RCC_OscConfig+0x284>)
 8001b9c:	6833      	ldr	r3, [r6, #0]
 8001b9e:	05d9      	lsls	r1, r3, #23
 8001ba0:	f140 808f 	bpl.w	8001cc2 <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba4:	68a3      	ldr	r3, [r4, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	f000 80eb 	beq.w	8001d82 <HAL_RCC_OscConfig+0x2ce>
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80b2 	beq.w	8001d16 <HAL_RCC_OscConfig+0x262>
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	4b5f      	ldr	r3, [pc, #380]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bb8:	f000 812d 	beq.w	8001e16 <HAL_RCC_OscConfig+0x362>
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	671a      	str	r2, [r3, #112]	; 0x70
 8001bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bc4:	f022 0204 	bic.w	r2, r2, #4
 8001bc8:	671a      	str	r2, [r3, #112]	; 0x70
 8001bca:	e0df      	b.n	8001d8c <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bcc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8001bce:	4d59      	ldr	r5, [pc, #356]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d040      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_LSI_ENABLE();
 8001bd4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fd1e 	bl	800161c <HAL_GetTick>
 8001be0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	e004      	b.n	8001bee <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fd1a 	bl	800161c <HAL_GetTick>
 8001be8:	1b80      	subs	r0, r0, r6
 8001bea:	2802      	cmp	r0, #2
 8001bec:	d879      	bhi.n	8001ce2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bf0:	079b      	lsls	r3, r3, #30
 8001bf2:	d5f7      	bpl.n	8001be4 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	075d      	lsls	r5, r3, #29
 8001bf8:	d4ca      	bmi.n	8001b90 <HAL_RCC_OscConfig+0xdc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfa:	69a0      	ldr	r0, [r4, #24]
 8001bfc:	b1c8      	cbz	r0, 8001c32 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfe:	4d4d      	ldr	r5, [pc, #308]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001c00:	68ab      	ldr	r3, [r5, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	f000 80d3 	beq.w	8001db2 <HAL_RCC_OscConfig+0x2fe>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c14:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c16:	f000 8108 	beq.w	8001e2a <HAL_RCC_OscConfig+0x376>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fcff 	bl	800161c <HAL_GetTick>
 8001c1e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c20:	e004      	b.n	8001c2c <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff fcfb 	bl	800161c <HAL_GetTick>
 8001c26:	1b00      	subs	r0, r0, r4
 8001c28:	2802      	cmp	r0, #2
 8001c2a:	d85a      	bhi.n	8001ce2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	019b      	lsls	r3, r3, #6
 8001c30:	d4f7      	bmi.n	8001c22 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001c32:	2000      	movs	r0, #0
}
 8001c34:	b002      	add	sp, #8
 8001c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3a:	6852      	ldr	r2, [r2, #4]
 8001c3c:	0256      	lsls	r6, r2, #9
 8001c3e:	d485      	bmi.n	8001b4c <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c40:	4a3c      	ldr	r2, [pc, #240]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	0795      	lsls	r5, r2, #30
 8001c46:	d530      	bpl.n	8001caa <HAL_RCC_OscConfig+0x1f6>
 8001c48:	68e2      	ldr	r2, [r4, #12]
 8001c4a:	2a01      	cmp	r2, #1
 8001c4c:	d02d      	beq.n	8001caa <HAL_RCC_OscConfig+0x1f6>
        return HAL_ERROR;
 8001c4e:	2001      	movs	r0, #1
}
 8001c50:	b002      	add	sp, #8
 8001c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001c56:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fcdd 	bl	800161c <HAL_GetTick>
 8001c62:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e004      	b.n	8001c70 <HAL_RCC_OscConfig+0x1bc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff fcd9 	bl	800161c <HAL_GetTick>
 8001c6a:	1b80      	subs	r0, r0, r6
 8001c6c:	2802      	cmp	r0, #2
 8001c6e:	d838      	bhi.n	8001ce2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c72:	079f      	lsls	r7, r3, #30
 8001c74:	d4f7      	bmi.n	8001c66 <HAL_RCC_OscConfig+0x1b2>
 8001c76:	e7bd      	b.n	8001bf4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001c7a:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c8c:	e785      	b.n	8001b9a <HAL_RCC_OscConfig+0xe6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8e:	684a      	ldr	r2, [r1, #4]
 8001c90:	0250      	lsls	r0, r2, #9
 8001c92:	f57f af26 	bpl.w	8001ae2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c96:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	0391      	lsls	r1, r2, #14
 8001c9c:	f57f af4a 	bpl.w	8001b34 <HAL_RCC_OscConfig+0x80>
 8001ca0:	6862      	ldr	r2, [r4, #4]
 8001ca2:	2a00      	cmp	r2, #0
 8001ca4:	f47f af46 	bne.w	8001b34 <HAL_RCC_OscConfig+0x80>
 8001ca8:	e7d1      	b.n	8001c4e <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001cac:	6920      	ldr	r0, [r4, #16]
 8001cae:	680a      	ldr	r2, [r1, #0]
 8001cb0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001cb4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001cb8:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	071a      	lsls	r2, r3, #28
 8001cbc:	f57f af66 	bpl.w	8001b8c <HAL_RCC_OscConfig+0xd8>
 8001cc0:	e784      	b.n	8001bcc <HAL_RCC_OscConfig+0x118>
      PWR->CR1 |= PWR_CR1_DBP;
 8001cc2:	6833      	ldr	r3, [r6, #0]
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001cca:	f7ff fca7 	bl	800161c <HAL_GetTick>
 8001cce:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd0:	6833      	ldr	r3, [r6, #0]
 8001cd2:	05da      	lsls	r2, r3, #23
 8001cd4:	f53f af66 	bmi.w	8001ba4 <HAL_RCC_OscConfig+0xf0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7ff fca0 	bl	800161c <HAL_GetTick>
 8001cdc:	1bc0      	subs	r0, r0, r7
 8001cde:	2864      	cmp	r0, #100	; 0x64
 8001ce0:	d9f6      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 8001ce2:	2003      	movs	r0, #3
}
 8001ce4:	b002      	add	sp, #8
 8001ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	4d12      	ldr	r5, [pc, #72]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf2:	602b      	str	r3, [r5, #0]
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fc8e 	bl	800161c <HAL_GetTick>
 8001d00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	e004      	b.n	8001d0e <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fc8a 	bl	800161c <HAL_GetTick>
 8001d08:	1b80      	subs	r0, r0, r6
 8001d0a:	2864      	cmp	r0, #100	; 0x64
 8001d0c:	d8e9      	bhi.n	8001ce2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	039b      	lsls	r3, r3, #14
 8001d12:	d4f7      	bmi.n	8001d04 <HAL_RCC_OscConfig+0x250>
 8001d14:	e70d      	b.n	8001b32 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d16:	4e07      	ldr	r6, [pc, #28]	; (8001d34 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d18:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6733      	str	r3, [r6, #112]	; 0x70
 8001d24:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fc76 	bl	800161c <HAL_GetTick>
 8001d30:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x292>
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fc6e 	bl	800161c <HAL_GetTick>
 8001d40:	1bc0      	subs	r0, r0, r7
 8001d42:	4540      	cmp	r0, r8
 8001d44:	d8cd      	bhi.n	8001ce2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d46:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001d48:	0798      	lsls	r0, r3, #30
 8001d4a:	d4f7      	bmi.n	8001d3c <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8001d4c:	2d00      	cmp	r5, #0
 8001d4e:	f43f af54 	beq.w	8001bfa <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d52:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <HAL_RCC_OscConfig+0x3d8>)
 8001d54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	e74d      	b.n	8001bfa <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8001d5e:	682b      	ldr	r3, [r5, #0]
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d66:	f7ff fc59 	bl	800161c <HAL_GetTick>
 8001d6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6c:	e004      	b.n	8001d78 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fc55 	bl	800161c <HAL_GetTick>
 8001d72:	1b80      	subs	r0, r0, r6
 8001d74:	2802      	cmp	r0, #2
 8001d76:	d8b4      	bhi.n	8001ce2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	0799      	lsls	r1, r3, #30
 8001d7c:	d4f7      	bmi.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	e702      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d82:	4a42      	ldr	r2, [pc, #264]	; (8001e8c <HAL_RCC_OscConfig+0x3d8>)
 8001d84:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fc46 	bl	800161c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	4f3e      	ldr	r7, [pc, #248]	; (8001e8c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d96:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	e004      	b.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff fc3f 	bl	800161c <HAL_GetTick>
 8001d9e:	1b80      	subs	r0, r0, r6
 8001da0:	4540      	cmp	r0, r8
 8001da2:	d89e      	bhi.n	8001ce2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001da6:	079b      	lsls	r3, r3, #30
 8001da8:	d5f7      	bpl.n	8001d9a <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	f43f af25 	beq.w	8001bfa <HAL_RCC_OscConfig+0x146>
 8001db0:	e7cf      	b.n	8001d52 <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db2:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001db4:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db6:	f43f af3d 	beq.w	8001c34 <HAL_RCC_OscConfig+0x180>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dbe:	69e1      	ldr	r1, [r4, #28]
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	f47f af44 	bne.w	8001c4e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc6:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	6a21      	ldr	r1, [r4, #32]
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	f47f af3e 	bne.w	8001c4e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dd8:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dda:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001dde:	f47f af36 	bne.w	8001c4e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001de4:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dec:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001df0:	f47f af2d 	bne.w	8001c4e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001df6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dfa:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 8001dfe:	bf14      	ite	ne
 8001e00:	2001      	movne	r0, #1
 8001e02:	2000      	moveq	r0, #0
 8001e04:	e716      	b.n	8001c34 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e67f      	b.n	8001b16 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e16:	f042 0204 	orr.w	r2, r2, #4
 8001e1a:	671a      	str	r2, [r3, #112]	; 0x70
 8001e1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	671a      	str	r2, [r3, #112]	; 0x70
 8001e24:	e7b2      	b.n	8001d8c <HAL_RCC_OscConfig+0x2d8>
    return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
}
 8001e28:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fbf7 	bl	800161c <HAL_GetTick>
 8001e2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e30:	e005      	b.n	8001e3e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7ff fbf3 	bl	800161c <HAL_GetTick>
 8001e36:	1b80      	subs	r0, r0, r6
 8001e38:	2802      	cmp	r0, #2
 8001e3a:	f63f af52 	bhi.w	8001ce2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	0199      	lsls	r1, r3, #6
 8001e42:	d4f6      	bmi.n	8001e32 <HAL_RCC_OscConfig+0x37e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e48:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4e10      	ldr	r6, [pc, #64]	; (8001e8c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001e50:	3a01      	subs	r2, #1
 8001e52:	430b      	orrs	r3, r1
 8001e54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e5a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001e62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e66:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e70:	f7ff fbd4 	bl	800161c <HAL_GetTick>
 8001e74:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	e005      	b.n	8001e84 <HAL_RCC_OscConfig+0x3d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff fbd0 	bl	800161c <HAL_GetTick>
 8001e7c:	1b00      	subs	r0, r0, r4
 8001e7e:	2802      	cmp	r0, #2
 8001e80:	f63f af2f 	bhi.w	8001ce2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e84:	6833      	ldr	r3, [r6, #0]
 8001e86:	019a      	lsls	r2, r3, #6
 8001e88:	d5f6      	bpl.n	8001e78 <HAL_RCC_OscConfig+0x3c4>
 8001e8a:	e6d2      	b.n	8001c32 <HAL_RCC_OscConfig+0x17e>
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e90:	2800      	cmp	r0, #0
 8001e92:	f000 80b3 	beq.w	8001ffc <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e96:	4a61      	ldr	r2, [pc, #388]	; (800201c <HAL_RCC_ClockConfig+0x18c>)
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	428b      	cmp	r3, r1
{
 8001ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	d20c      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	f023 030f 	bic.w	r3, r3, #15
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb4:	6813      	ldr	r3, [r2, #0]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	428b      	cmp	r3, r1
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001ebe:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8001ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	0798      	lsls	r0, r3, #30
 8001ec8:	d514      	bpl.n	8001ef4 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eca:	0759      	lsls	r1, r3, #29
 8001ecc:	d504      	bpl.n	8001ed8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ece:	4954      	ldr	r1, [pc, #336]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
 8001ed0:	688a      	ldr	r2, [r1, #8]
 8001ed2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001ed6:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	071a      	lsls	r2, r3, #28
 8001eda:	d504      	bpl.n	8001ee6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001edc:	4950      	ldr	r1, [pc, #320]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
 8001ede:	688a      	ldr	r2, [r1, #8]
 8001ee0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001ee4:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee6:	494e      	ldr	r1, [pc, #312]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
 8001ee8:	68a0      	ldr	r0, [r4, #8]
 8001eea:	688a      	ldr	r2, [r1, #8]
 8001eec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ef0:	4302      	orrs	r2, r0
 8001ef2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef4:	07df      	lsls	r7, r3, #31
 8001ef6:	d520      	bpl.n	8001f3a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f00:	d07e      	beq.n	8002000 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f02:	2a02      	cmp	r2, #2
 8001f04:	d077      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x166>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	0799      	lsls	r1, r3, #30
 8001f08:	d5d9      	bpl.n	8001ebe <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0a:	4e45      	ldr	r6, [pc, #276]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f10:	68b3      	ldr	r3, [r6, #8]
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f1a:	f7ff fb7f 	bl	800161c <HAL_GetTick>
 8001f1e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	e004      	b.n	8001f2c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7ff fb7b 	bl	800161c <HAL_GetTick>
 8001f26:	1bc0      	subs	r0, r0, r7
 8001f28:	4540      	cmp	r0, r8
 8001f2a:	d86c      	bhi.n	8002006 <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2c:	68b3      	ldr	r3, [r6, #8]
 8001f2e:	6862      	ldr	r2, [r4, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f38:	d1f3      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3a:	4a38      	ldr	r2, [pc, #224]	; (800201c <HAL_RCC_ClockConfig+0x18c>)
 8001f3c:	6813      	ldr	r3, [r2, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	42ab      	cmp	r3, r5
 8001f44:	d909      	bls.n	8001f5a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	6813      	ldr	r3, [r2, #0]
 8001f48:	f023 030f 	bic.w	r3, r3, #15
 8001f4c:	432b      	orrs	r3, r5
 8001f4e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	42ab      	cmp	r3, r5
 8001f58:	d1b1      	bne.n	8001ebe <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	075a      	lsls	r2, r3, #29
 8001f5e:	d506      	bpl.n	8001f6e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	492f      	ldr	r1, [pc, #188]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
 8001f62:	68e0      	ldr	r0, [r4, #12]
 8001f64:	688a      	ldr	r2, [r1, #8]
 8001f66:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001f6a:	4302      	orrs	r2, r0
 8001f6c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	071b      	lsls	r3, r3, #28
 8001f70:	d431      	bmi.n	8001fd6 <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f72:	492b      	ldr	r1, [pc, #172]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
 8001f74:	688b      	ldr	r3, [r1, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d039      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x162>
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d118      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f82:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f84:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f8c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001f90:	d03b      	beq.n	800200a <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f92:	4824      	ldr	r0, [pc, #144]	; (8002024 <HAL_RCC_ClockConfig+0x194>)
 8001f94:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f98:	2300      	movs	r3, #0
 8001f9a:	fba1 0100 	umull	r0, r1, r1, r0
 8001f9e:	f7fe fe23 	bl	8000be8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001faa:	3301      	adds	r3, #1
 8001fac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001fae:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
 8001fb8:	4c1c      	ldr	r4, [pc, #112]	; (800202c <HAL_RCC_ClockConfig+0x19c>)
 8001fba:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8001fbc:	481c      	ldr	r0, [pc, #112]	; (8002030 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fbe:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001fc2:	491c      	ldr	r1, [pc, #112]	; (8002034 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 8001fc4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fc6:	5ca2      	ldrb	r2, [r4, r2]
 8001fc8:	40d3      	lsrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001fcc:	f7ff faea 	bl	80015a4 <HAL_InitTick>
  return HAL_OK;
 8001fd0:	2000      	movs	r0, #0
}
 8001fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
 8001fd8:	6921      	ldr	r1, [r4, #16]
 8001fda:	6893      	ldr	r3, [r2, #8]
 8001fdc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001fe0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe4:	490e      	ldr	r1, [pc, #56]	; (8002020 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fe6:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe8:	688b      	ldr	r3, [r1, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d1c5      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xee>
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_RCC_ClockConfig+0x194>)
 8001ff4:	e7df      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	0198      	lsls	r0, r3, #6
 8001ff8:	d487      	bmi.n	8001f0a <HAL_RCC_ClockConfig+0x7a>
 8001ffa:	e760      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001ffc:	2001      	movs	r0, #1
}
 8001ffe:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002000:	039e      	lsls	r6, r3, #14
 8002002:	d482      	bmi.n	8001f0a <HAL_RCC_ClockConfig+0x7a>
 8002004:	e75b      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002006:	2003      	movs	r0, #3
 8002008:	e75a      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <HAL_RCC_ClockConfig+0x198>)
 800200c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002010:	fba1 0100 	umull	r0, r1, r1, r0
 8002014:	f7fe fde8 	bl	8000be8 <__aeabi_uldivmod>
 8002018:	e7c3      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x112>
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00
 8002020:	40023800 	.word	0x40023800
 8002024:	017d7840 	.word	0x017d7840
 8002028:	00f42400 	.word	0x00f42400
 800202c:	08007b98 	.word	0x08007b98
 8002030:	20000008 	.word	0x20000008
 8002034:	20000000 	.word	0x20000000

08002038 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002038:	4916      	ldr	r1, [pc, #88]	; (8002094 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800203a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800203c:	688b      	ldr	r3, [r1, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b04      	cmp	r3, #4
 8002044:	d01b      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x46>
 8002046:	2b08      	cmp	r3, #8
 8002048:	d117      	bne.n	800207a <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800204c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002052:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002054:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8002058:	d113      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205a:	480f      	ldr	r0, [pc, #60]	; (8002098 <HAL_RCC_GetSysClockFreq+0x60>)
 800205c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002060:	fba1 0100 	umull	r0, r1, r1, r0
 8002064:	f7fe fdc0 	bl	8000be8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_GetSysClockFreq+0x5c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002070:	3301      	adds	r3, #1
 8002072:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8002074:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002078:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800207c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002080:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <HAL_RCC_GetSysClockFreq+0x64>)
 8002084:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002088:	2300      	movs	r3, #0
 800208a:	fba1 0100 	umull	r0, r1, r1, r0
 800208e:	f7fe fdab 	bl	8000be8 <__aeabi_uldivmod>
 8002092:	e7e9      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x30>
 8002094:	40023800 	.word	0x40023800
 8002098:	00f42400 	.word	0x00f42400
 800209c:	017d7840 	.word	0x017d7840

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80020a2:	4905      	ldr	r1, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020a8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80020ac:	6808      	ldr	r0, [r1, #0]
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
}
 80020b0:	40d8      	lsrs	r0, r3
 80020b2:	4770      	bx	lr
 80020b4:	40023800 	.word	0x40023800
 80020b8:	20000000 	.word	0x20000000
 80020bc:	08007ba8 	.word	0x08007ba8

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80020c2:	4905      	ldr	r1, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020c8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80020cc:	6808      	ldr	r0, [r1, #0]
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
}
 80020d0:	40d8      	lsrs	r0, r3
 80020d2:	4770      	bx	lr
 80020d4:	40023800 	.word	0x40023800
 80020d8:	20000000 	.word	0x20000000
 80020dc:	08007ba8 	.word	0x08007ba8

080020e0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020e0:	6803      	ldr	r3, [r0, #0]
{
 80020e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020e6:	f013 0601 	ands.w	r6, r3, #1
{
 80020ea:	b083      	sub	sp, #12
 80020ec:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020ee:	d00b      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020f0:	4aa8      	ldr	r2, [pc, #672]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80020f2:	6891      	ldr	r1, [r2, #8]
 80020f4:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80020f8:	6091      	str	r1, [r2, #8]
 80020fa:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80020fc:	6891      	ldr	r1, [r2, #8]
 80020fe:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002100:	fab6 f686 	clz	r6, r6
 8002104:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002106:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002108:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800210c:	d010      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800210e:	49a1      	ldr	r1, [pc, #644]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002110:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002112:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002116:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800211a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800211e:	ea42 0205 	orr.w	r2, r2, r5
 8002122:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002126:	f000 8214 	beq.w	8002552 <HAL_RCCEx_PeriphCLKConfig+0x472>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800212a:	fab5 f585 	clz	r5, r5
 800212e:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002130:	02df      	lsls	r7, r3, #11
 8002132:	d510      	bpl.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002134:	4897      	ldr	r0, [pc, #604]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002136:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002138:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800213c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002140:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002144:	ea42 0201 	orr.w	r2, r2, r1
 8002148:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800214c:	f000 8204 	beq.w	8002558 <HAL_RCCEx_PeriphCLKConfig+0x478>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002150:	2900      	cmp	r1, #0
 8002152:	bf08      	it	eq
 8002154:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002156:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800215a:	bf18      	it	ne
 800215c:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800215e:	0698      	lsls	r0, r3, #26
 8002160:	f100 81b2 	bmi.w	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002164:	06d9      	lsls	r1, r3, #27
 8002166:	d50c      	bpl.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002168:	4a8a      	ldr	r2, [pc, #552]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800216a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800216e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002172:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002176:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800217a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800217c:	4301      	orrs	r1, r0
 800217e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002182:	045a      	lsls	r2, r3, #17
 8002184:	d508      	bpl.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002186:	4983      	ldr	r1, [pc, #524]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002188:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800218a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800218e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002192:	4302      	orrs	r2, r0
 8002194:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002198:	041f      	lsls	r7, r3, #16
 800219a:	d508      	bpl.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800219c:	497d      	ldr	r1, [pc, #500]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800219e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80021a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021a4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80021a8:	4302      	orrs	r2, r0
 80021aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ae:	03d8      	lsls	r0, r3, #15
 80021b0:	d508      	bpl.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021b2:	4978      	ldr	r1, [pc, #480]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80021b4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80021b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021ba:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80021be:	4302      	orrs	r2, r0
 80021c0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021c4:	0399      	lsls	r1, r3, #14
 80021c6:	d508      	bpl.n	80021da <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021c8:	4972      	ldr	r1, [pc, #456]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80021ca:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80021cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021d0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80021d4:	4302      	orrs	r2, r0
 80021d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021da:	065a      	lsls	r2, r3, #25
 80021dc:	d508      	bpl.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021de:	496d      	ldr	r1, [pc, #436]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80021e0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80021e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021e6:	f022 0203 	bic.w	r2, r2, #3
 80021ea:	4302      	orrs	r2, r0
 80021ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f0:	061f      	lsls	r7, r3, #24
 80021f2:	d508      	bpl.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f4:	4967      	ldr	r1, [pc, #412]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80021f6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80021f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021fc:	f022 020c 	bic.w	r2, r2, #12
 8002200:	4302      	orrs	r2, r0
 8002202:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002206:	05d8      	lsls	r0, r3, #23
 8002208:	d508      	bpl.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800220a:	4962      	ldr	r1, [pc, #392]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800220c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800220e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002212:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002216:	4302      	orrs	r2, r0
 8002218:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800221c:	0599      	lsls	r1, r3, #22
 800221e:	d508      	bpl.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002220:	495c      	ldr	r1, [pc, #368]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002222:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002224:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002228:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800222c:	4302      	orrs	r2, r0
 800222e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002232:	055a      	lsls	r2, r3, #21
 8002234:	d508      	bpl.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002236:	4957      	ldr	r1, [pc, #348]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002238:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800223a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800223e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002242:	4302      	orrs	r2, r0
 8002244:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002248:	051f      	lsls	r7, r3, #20
 800224a:	d508      	bpl.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800224c:	4951      	ldr	r1, [pc, #324]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800224e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002250:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002254:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002258:	4302      	orrs	r2, r0
 800225a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800225e:	04d8      	lsls	r0, r3, #19
 8002260:	d508      	bpl.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002262:	494c      	ldr	r1, [pc, #304]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002264:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002266:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800226a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800226e:	4302      	orrs	r2, r0
 8002270:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002274:	0499      	lsls	r1, r3, #18
 8002276:	d508      	bpl.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002278:	4946      	ldr	r1, [pc, #280]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800227a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800227c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002280:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002284:	4302      	orrs	r2, r0
 8002286:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800228a:	025a      	lsls	r2, r3, #9
 800228c:	d508      	bpl.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800228e:	4941      	ldr	r1, [pc, #260]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002290:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002292:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002296:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800229a:	4302      	orrs	r2, r0
 800229c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022a0:	029f      	lsls	r7, r3, #10
 80022a2:	d50c      	bpl.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022a4:	493b      	ldr	r1, [pc, #236]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80022a6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80022a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80022ac:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022b0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80022b4:	bf08      	it	eq
 80022b6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022b8:	4302      	orrs	r2, r0
 80022ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80022be:	f013 0f08 	tst.w	r3, #8
 80022c2:	bf18      	it	ne
 80022c4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022c6:	0358      	lsls	r0, r3, #13
 80022c8:	d508      	bpl.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ca:	4932      	ldr	r1, [pc, #200]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80022cc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80022ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022d2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022d6:	4302      	orrs	r2, r0
 80022d8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022dc:	0219      	lsls	r1, r3, #8
 80022de:	d46a      	bmi.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022e0:	2e01      	cmp	r6, #1
 80022e2:	d001      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80022e4:	019a      	lsls	r2, r3, #6
 80022e6:	d560      	bpl.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022e8:	4e2a      	ldr	r6, [pc, #168]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80022ea:	6833      	ldr	r3, [r6, #0]
 80022ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022f0:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f2:	f7ff f993 	bl	800161c <HAL_GetTick>
 80022f6:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022f8:	e005      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022fa:	f7ff f98f 	bl	800161c <HAL_GetTick>
 80022fe:	1bc3      	subs	r3, r0, r7
 8002300:	2b64      	cmp	r3, #100	; 0x64
 8002302:	f200 80dd 	bhi.w	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002306:	6833      	ldr	r3, [r6, #0]
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	d4f6      	bmi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x21a>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	07df      	lsls	r7, r3, #31
 8002310:	d512      	bpl.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8002312:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002314:	b982      	cbnz	r2, 8002338 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002316:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800231a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800231e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002322:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002326:	430a      	orrs	r2, r1
 8002328:	6861      	ldr	r1, [r4, #4]
 800232a:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800232e:	68a1      	ldr	r1, [r4, #8]
 8002330:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002334:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002338:	031e      	lsls	r6, r3, #12
 800233a:	d504      	bpl.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800233c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800233e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002342:	f000 811a 	beq.w	800257a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002346:	02d8      	lsls	r0, r3, #11
 8002348:	d504      	bpl.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x274>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800234a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800234c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002350:	f000 8113 	beq.w	800257a <HAL_RCCEx_PeriphCLKConfig+0x49a>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002354:	01d9      	lsls	r1, r3, #7
 8002356:	d511      	bpl.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800235a:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800235e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002362:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002366:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800236a:	4302      	orrs	r2, r0
 800236c:	6860      	ldr	r0, [r4, #4]
 800236e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002372:	6920      	ldr	r0, [r4, #16]
 8002374:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002378:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800237c:	019a      	lsls	r2, r3, #6
 800237e:	f100 80ed 	bmi.w	800255c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002382:	4e04      	ldr	r6, [pc, #16]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002384:	6833      	ldr	r3, [r6, #0]
 8002386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800238a:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238c:	f7ff f946 	bl	800161c <HAL_GetTick>
 8002390:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002392:	e007      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002394:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002398:	f7ff f940 	bl	800161c <HAL_GetTick>
 800239c:	1bc0      	subs	r0, r0, r7
 800239e:	2864      	cmp	r0, #100	; 0x64
 80023a0:	f200 808e 	bhi.w	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023a4:	6833      	ldr	r3, [r6, #0]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	d5f6      	bpl.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023aa:	2d01      	cmp	r5, #1
 80023ac:	d00e      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80023ae:	2000      	movs	r0, #0
}
 80023b0:	b003      	add	sp, #12
 80023b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023b6:	4991      	ldr	r1, [pc, #580]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80023b8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80023bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80023c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80023c4:	4302      	orrs	r2, r0
 80023c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 80023ca:	e789      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_PLLSAI_DISABLE();
 80023cc:	4d8b      	ldr	r5, [pc, #556]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80023d6:	f7ff f921 	bl	800161c <HAL_GetTick>
 80023da:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023dc:	e004      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023de:	f7ff f91d 	bl	800161c <HAL_GetTick>
 80023e2:	1b80      	subs	r0, r0, r6
 80023e4:	2864      	cmp	r0, #100	; 0x64
 80023e6:	d86b      	bhi.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	009f      	lsls	r7, r3, #2
 80023ec:	d4f7      	bmi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	031d      	lsls	r5, r3, #12
 80023f2:	f140 80fb 	bpl.w	80025ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80023f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	f040 80f7 	bne.w	80025ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023fe:	497f      	ldr	r1, [pc, #508]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002400:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002404:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002408:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800240c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002410:	4302      	orrs	r2, r0
 8002412:	6960      	ldr	r0, [r4, #20]
 8002414:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002418:	69a0      	ldr	r0, [r4, #24]
 800241a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800241e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002422:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002426:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002428:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800242c:	3801      	subs	r0, #1
 800242e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002432:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002436:	0299      	lsls	r1, r3, #10
 8002438:	d515      	bpl.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800243a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800243c:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8002440:	d111      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x386>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002442:	496e      	ldr	r1, [pc, #440]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002444:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002448:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800244c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002450:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002454:	4302      	orrs	r2, r0
 8002456:	6960      	ldr	r0, [r4, #20]
 8002458:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800245c:	6a20      	ldr	r0, [r4, #32]
 800245e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002462:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002466:	071a      	lsls	r2, r3, #28
 8002468:	d519      	bpl.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x3be>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800246a:	4a64      	ldr	r2, [pc, #400]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800246c:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800246e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002472:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002476:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800247a:	69e0      	ldr	r0, [r4, #28]
 800247c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002480:	430b      	orrs	r3, r1
 8002482:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002486:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800248a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800248e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002492:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002494:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002498:	430b      	orrs	r3, r1
 800249a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800249e:	4c57      	ldr	r4, [pc, #348]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80024a8:	f7ff f8b8 	bl	800161c <HAL_GetTick>
 80024ac:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	f53f af7c 	bmi.w	80023ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024b6:	f7ff f8b1 	bl	800161c <HAL_GetTick>
 80024ba:	1b40      	subs	r0, r0, r5
 80024bc:	2864      	cmp	r0, #100	; 0x64
 80024be:	d9f6      	bls.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        return HAL_TIMEOUT;
 80024c0:	2003      	movs	r0, #3
}
 80024c2:	b003      	add	sp, #12
 80024c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    PWR->CR1 |= PWR_CR1_DBP;
 80024ca:	4f4d      	ldr	r7, [pc, #308]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x520>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80024e6:	f7ff f899 	bl	800161c <HAL_GetTick>
 80024ea:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ec:	e005      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7ff f895 	bl	800161c <HAL_GetTick>
 80024f2:	eba0 0008 	sub.w	r0, r0, r8
 80024f6:	2864      	cmp	r0, #100	; 0x64
 80024f8:	d8e2      	bhi.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	05d9      	lsls	r1, r3, #23
 80024fe:	d5f6      	bpl.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002500:	4f3e      	ldr	r7, [pc, #248]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002502:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002504:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002506:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800250a:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800250e:	d010      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002510:	4291      	cmp	r1, r2
 8002512:	d00e      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x452>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002514:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002516:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002518:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800251c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002520:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002522:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002524:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8002528:	6738      	str	r0, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800252a:	673a      	str	r2, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800252c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800252e:	07d2      	lsls	r2, r2, #31
 8002530:	d448      	bmi.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002532:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002536:	d03c      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002538:	4930      	ldr	r1, [pc, #192]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800253a:	688a      	ldr	r2, [r1, #8]
 800253c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002540:	608a      	str	r2, [r1, #8]
 8002542:	4a2e      	ldr	r2, [pc, #184]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800254a:	430b      	orrs	r3, r1
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	e608      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 8002552:	2500      	movs	r5, #0
      plli2sused = 1;
 8002554:	2601      	movs	r6, #1
 8002556:	e5eb      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 8002558:	2601      	movs	r6, #1
 800255a:	e5fc      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800255c:	6923      	ldr	r3, [r4, #16]
 800255e:	6861      	ldr	r1, [r4, #4]
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	68e2      	ldr	r2, [r4, #12]
 8002564:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002568:	68a1      	ldr	r1, [r4, #8]
 800256a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800256e:	4a23      	ldr	r2, [pc, #140]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002570:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002574:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002578:	e703      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800257a:	4920      	ldr	r1, [pc, #128]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800257c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002580:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002584:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002588:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800258c:	4302      	orrs	r2, r0
 800258e:	6860      	ldr	r0, [r4, #4]
 8002590:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002594:	68e0      	ldr	r0, [r4, #12]
 8002596:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800259a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800259e:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80025a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025a4:	f020 001f 	bic.w	r0, r0, #31
 80025a8:	3a01      	subs	r2, #1
 80025aa:	4302      	orrs	r2, r0
 80025ac:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 80025b0:	e6d0      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x274>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b2:	4812      	ldr	r0, [pc, #72]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80025b4:	4913      	ldr	r1, [pc, #76]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 80025b6:	6882      	ldr	r2, [r0, #8]
 80025b8:	4019      	ands	r1, r3
 80025ba:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80025be:	430a      	orrs	r2, r1
 80025c0:	6082      	str	r2, [r0, #8]
 80025c2:	e7be      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x462>
        tickstart = HAL_GetTick();
 80025c4:	f7ff f82a 	bl	800161c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80025cc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	e006      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7ff f824 	bl	800161c <HAL_GetTick>
 80025d4:	eba0 0008 	sub.w	r0, r0, r8
 80025d8:	4548      	cmp	r0, r9
 80025da:	f63f af71 	bhi.w	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e0:	0798      	lsls	r0, r3, #30
 80025e2:	d5f5      	bpl.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025e6:	f403 7140 	and.w	r1, r3, #768	; 0x300
 80025ea:	e7a2      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x452>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ec:	02d8      	lsls	r0, r3, #11
 80025ee:	f57f af22 	bpl.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x356>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	f47f af1e 	bne.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80025fa:	e700      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000
 8002604:	0ffffcff 	.word	0x0ffffcff

08002608 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002608:	2800      	cmp	r0, #0
 800260a:	f000 809e 	beq.w	800274a <HAL_TIM_Base_Init+0x142>
{
 800260e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002610:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002614:	4604      	mov	r4, r0
 8002616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800261a:	2b00      	cmp	r3, #0
 800261c:	d07c      	beq.n	8002718 <HAL_TIM_Base_Init+0x110>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800261e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002622:	494c      	ldr	r1, [pc, #304]	; (8002754 <HAL_TIM_Base_Init+0x14c>)
 8002624:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800262c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8002630:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002632:	fab1 f181 	clz	r1, r1
 8002636:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800263a:	d036      	beq.n	80026aa <HAL_TIM_Base_Init+0xa2>
 800263c:	2900      	cmp	r1, #0
 800263e:	d134      	bne.n	80026aa <HAL_TIM_Base_Init+0xa2>
 8002640:	4d45      	ldr	r5, [pc, #276]	; (8002758 <HAL_TIM_Base_Init+0x150>)
 8002642:	4846      	ldr	r0, [pc, #280]	; (800275c <HAL_TIM_Base_Init+0x154>)
 8002644:	4282      	cmp	r2, r0
 8002646:	bf18      	it	ne
 8002648:	42aa      	cmpne	r2, r5
 800264a:	d06a      	beq.n	8002722 <HAL_TIM_Base_Init+0x11a>
 800264c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8002650:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002654:	1b55      	subs	r5, r2, r5
 8002656:	4282      	cmp	r2, r0
 8002658:	fab5 f585 	clz	r5, r5
 800265c:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8002660:	d069      	beq.n	8002736 <HAL_TIM_Base_Init+0x12e>
 8002662:	2d00      	cmp	r5, #0
 8002664:	d167      	bne.n	8002736 <HAL_TIM_Base_Init+0x12e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002666:	4d3e      	ldr	r5, [pc, #248]	; (8002760 <HAL_TIM_Base_Init+0x158>)
 8002668:	483e      	ldr	r0, [pc, #248]	; (8002764 <HAL_TIM_Base_Init+0x15c>)
 800266a:	4282      	cmp	r2, r0
 800266c:	bf18      	it	ne
 800266e:	42aa      	cmpne	r2, r5
 8002670:	bf0c      	ite	eq
 8002672:	2501      	moveq	r5, #1
 8002674:	2500      	movne	r5, #0
 8002676:	d06a      	beq.n	800274e <HAL_TIM_Base_Init+0x146>
 8002678:	4e3b      	ldr	r6, [pc, #236]	; (8002768 <HAL_TIM_Base_Init+0x160>)
 800267a:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800267e:	4282      	cmp	r2, r0
 8002680:	bf18      	it	ne
 8002682:	42b2      	cmpne	r2, r6
 8002684:	d01a      	beq.n	80026bc <HAL_TIM_Base_Init+0xb4>
 8002686:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800268a:	4282      	cmp	r2, r0
 800268c:	d05f      	beq.n	800274e <HAL_TIM_Base_Init+0x146>
 800268e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002692:	4282      	cmp	r2, r0
 8002694:	d05b      	beq.n	800274e <HAL_TIM_Base_Init+0x146>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002696:	69a0      	ldr	r0, [r4, #24]
 8002698:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800269c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800269e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80026a0:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80026a6:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a8:	e017      	b.n	80026da <HAL_TIM_Base_Init+0xd2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026aa:	4d30      	ldr	r5, [pc, #192]	; (800276c <HAL_TIM_Base_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026b0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b2:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 80026b4:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b6:	fab5 f585 	clz	r5, r5
 80026ba:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026bc:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80026be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c4:	69a0      	ldr	r0, [r4, #24]
 80026c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ca:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80026cc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ce:	68e3      	ldr	r3, [r4, #12]
 80026d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80026d2:	6863      	ldr	r3, [r4, #4]
 80026d4:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d6:	b9e1      	cbnz	r1, 8002712 <HAL_TIM_Base_Init+0x10a>
 80026d8:	b9dd      	cbnz	r5, 8002712 <HAL_TIM_Base_Init+0x10a>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026da:	2301      	movs	r3, #1
  return HAL_OK;
 80026dc:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80026de:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80026e8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80026ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80026f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80026f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002700:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002704:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002708:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800270c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002710:	bd70      	pop	{r4, r5, r6, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8002712:	6963      	ldr	r3, [r4, #20]
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	e7e0      	b.n	80026da <HAL_TIM_Base_Init+0xd2>
    htim->Lock = HAL_UNLOCKED;
 8002718:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800271c:	f7fe fe64 	bl	80013e8 <HAL_TIM_Base_MspInit>
 8002720:	e77d      	b.n	800261e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002722:	4d12      	ldr	r5, [pc, #72]	; (800276c <HAL_TIM_Base_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002728:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800272a:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800272c:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800272e:	fab5 f585 	clz	r5, r5
 8002732:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002734:	e7c2      	b.n	80026bc <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8002736:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800273c:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800273e:	480c      	ldr	r0, [pc, #48]	; (8002770 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002740:	4282      	cmp	r2, r0
 8002742:	d0bb      	beq.n	80026bc <HAL_TIM_Base_Init+0xb4>
 8002744:	2d00      	cmp	r5, #0
 8002746:	d1b9      	bne.n	80026bc <HAL_TIM_Base_Init+0xb4>
 8002748:	e78d      	b.n	8002666 <HAL_TIM_Base_Init+0x5e>
    return HAL_ERROR;
 800274a:	2001      	movs	r0, #1
}
 800274c:	4770      	bx	lr
 800274e:	2500      	movs	r5, #0
 8002750:	e7b4      	b.n	80026bc <HAL_TIM_Base_Init+0xb4>
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40000400 	.word	0x40000400
 800275c:	40000800 	.word	0x40000800
 8002760:	40014000 	.word	0x40014000
 8002764:	40014400 	.word	0x40014400
 8002768:	40014800 	.word	0x40014800
 800276c:	40010400 	.word	0x40010400
 8002770:	40000c00 	.word	0x40000c00

08002774 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002774:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002778:	2b01      	cmp	r3, #1
 800277a:	d13d      	bne.n	80027f8 <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800277c:	6802      	ldr	r2, [r0, #0]
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <HAL_TIM_Base_Start+0x98>)
 8002780:	4923      	ldr	r1, [pc, #140]	; (8002810 <HAL_TIM_Base_Start+0x9c>)
 8002782:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002786:	bf18      	it	ne
 8002788:	429a      	cmpne	r2, r3
{
 800278a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	4d20      	ldr	r5, [pc, #128]	; (8002814 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002796:	42aa      	cmp	r2, r5
 8002798:	bf08      	it	eq
 800279a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800279e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a2:	4c1d      	ldr	r4, [pc, #116]	; (8002818 <HAL_TIM_Base_Start+0xa4>)
 80027a4:	428a      	cmp	r2, r1
 80027a6:	bf08      	it	eq
 80027a8:	f043 0301 	orreq.w	r3, r3, #1
 80027ac:	481b      	ldr	r0, [pc, #108]	; (800281c <HAL_TIM_Base_Start+0xa8>)
 80027ae:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 80027b2:	42a2      	cmp	r2, r4
 80027b4:	bf08      	it	eq
 80027b6:	f043 0301 	orreq.w	r3, r3, #1
 80027ba:	4282      	cmp	r2, r0
 80027bc:	bf08      	it	eq
 80027be:	f043 0301 	orreq.w	r3, r3, #1
 80027c2:	428a      	cmp	r2, r1
 80027c4:	bf08      	it	eq
 80027c6:	f043 0301 	orreq.w	r3, r3, #1
 80027ca:	b933      	cbnz	r3, 80027da <HAL_TIM_Base_Start+0x66>
 80027cc:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 80027d0:	1a10      	subs	r0, r2, r0
 80027d2:	fab0 f080 	clz	r0, r0
 80027d6:	0940      	lsrs	r0, r0, #5
 80027d8:	b198      	cbz	r0, 8002802 <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027da:	6891      	ldr	r1, [r2, #8]
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_TIM_Base_Start+0xac>)
 80027de:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d00b      	beq.n	80027fc <HAL_TIM_Base_Start+0x88>
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e8:	d008      	beq.n	80027fc <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 80027ea:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 80027ec:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bc30      	pop	{r4, r5}
 80027f6:	4770      	bx	lr
    return HAL_ERROR;
 80027f8:	2001      	movs	r0, #1
}
 80027fa:	4770      	bx	lr
  return HAL_OK;
 80027fc:	2000      	movs	r0, #0
}
 80027fe:	bc30      	pop	{r4, r5}
 8002800:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002802:	6813      	ldr	r3, [r2, #0]
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e7f3      	b.n	80027f4 <HAL_TIM_Base_Start+0x80>
 800280c:	40010000 	.word	0x40010000
 8002810:	40000800 	.word	0x40000800
 8002814:	40000400 	.word	0x40000400
 8002818:	40000c00 	.word	0x40000c00
 800281c:	40010400 	.word	0x40010400
 8002820:	00010007 	.word	0x00010007

08002824 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002824:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d073      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0xf0>
 800282c:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800282e:	2302      	movs	r3, #2
{
 8002830:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 8002832:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 8002834:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002836:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800283a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800283e:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_TIM_ConfigClockSource+0x15c>)
  tmpsmcr = htim->Instance->SMCR;
 8002840:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002842:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002844:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002846:	680b      	ldr	r3, [r1, #0]
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d065      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0xf4>
 800284c:	d824      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x74>
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d07c      	beq.n	800294c <HAL_TIM_ConfigClockSource+0x128>
 8002852:	d94b      	bls.n	80028ec <HAL_TIM_ConfigClockSource+0xc8>
 8002854:	2b50      	cmp	r3, #80	; 0x50
 8002856:	d117      	bne.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002858:	6848      	ldr	r0, [r1, #4]
 800285a:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800285c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	6a25      	ldr	r5, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002860:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002864:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8002868:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286c:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002874:	ea43 1306 	orr.w	r3, r3, r6, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002878:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800287a:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800287c:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002882:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002886:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002888:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800288a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800288c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002890:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002894:	bc70      	pop	{r4, r5, r6}
 8002896:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289c:	d038      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0xec>
 800289e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a2:	d110      	bne.n	80028c6 <HAL_TIM_ConfigClockSource+0xa2>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028a4:	68a0      	ldr	r0, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028a6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80028aa:	432b      	orrs	r3, r5
 80028ac:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ae:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80028b8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ba:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028bc:	68a3      	ldr	r3, [r4, #8]
 80028be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c2:	60a3      	str	r3, [r4, #8]
      break;
 80028c4:	e7e0      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80028c6:	2b70      	cmp	r3, #112	; 0x70
 80028c8:	d1de      	bne.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80028ca:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028cc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80028d0:	432b      	orrs	r3, r5
 80028d2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d4:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80028de:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80028e0:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80028e2:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80028e8:	60a3      	str	r3, [r4, #8]
      break;
 80028ea:	e7cd      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d002      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0xd2>
 80028f0:	d90a      	bls.n	8002908 <HAL_TIM_ConfigClockSource+0xe4>
 80028f2:	2b30      	cmp	r3, #48	; 0x30
 80028f4:	d1c8      	bne.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80028f6:	68a1      	ldr	r1, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80028f8:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028fe:	430b      	orrs	r3, r1
 8002900:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002904:	60a3      	str	r3, [r4, #8]
}
 8002906:	e7bf      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8002908:	f033 0110 	bics.w	r1, r3, #16
 800290c:	d1bc      	bne.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
 800290e:	e7f2      	b.n	80028f6 <HAL_TIM_ConfigClockSource+0xd2>
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2000      	movs	r0, #0
 8002912:	e7b9      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8002914:	2002      	movs	r0, #2
}
 8002916:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002918:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800291a:	68cb      	ldr	r3, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291c:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002920:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002922:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8002924:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8002926:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002928:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800292c:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8002930:	6a23      	ldr	r3, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002932:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 8002936:	61a1      	str	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002938:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 800293c:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800293e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002944:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002948:	60a3      	str	r3, [r4, #8]
}
 800294a:	e79d      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800294c:	6848      	ldr	r0, [r1, #4]
 800294e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002950:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002952:	6a25      	ldr	r5, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002954:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002958:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800295c:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002960:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002962:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002968:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800296c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800296e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002970:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002976:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800297a:	60a3      	str	r3, [r4, #8]
}
 800297c:	e784      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x64>
 800297e:	bf00      	nop
 8002980:	fffe0088 	.word	0xfffe0088

08002984 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002984:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d04b      	beq.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298c:	6803      	ldr	r3, [r0, #0]
 800298e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	2002      	movs	r0, #2
{
 8002992:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002994:	4d24      	ldr	r5, [pc, #144]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002996:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800299a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800299c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800299e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029a0:	d029      	beq.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80029a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029a6:	42ab      	cmp	r3, r5
 80029a8:	d025      	beq.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029aa:	4d20      	ldr	r5, [pc, #128]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ac:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	42ab      	cmp	r3, r5
 80029b2:	bf18      	it	ne
 80029b4:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80029b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029bc:	bf0c      	ite	eq
 80029be:	f04f 0c01 	moveq.w	ip, #1
 80029c2:	f04f 0c00 	movne.w	ip, #0
 80029c6:	42ab      	cmp	r3, r5
 80029c8:	bf08      	it	eq
 80029ca:	f04c 0c01 	orreq.w	ip, ip, #1
 80029ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029d2:	42ab      	cmp	r3, r5
 80029d4:	bf08      	it	eq
 80029d6:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029da:	680d      	ldr	r5, [r1, #0]
 80029dc:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029de:	4d14      	ldr	r5, [pc, #80]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 80029e0:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e2:	42ab      	cmp	r3, r5
 80029e4:	bf14      	ite	ne
 80029e6:	4660      	movne	r0, ip
 80029e8:	f04c 0001 	orreq.w	r0, ip, #1
 80029ec:	b960      	cbnz	r0, 8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80029ee:	4811      	ldr	r0, [pc, #68]	; (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029f0:	4283      	cmp	r3, r0
 80029f2:	d009      	beq.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80029f4:	e00d      	b.n	8002a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029f6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029f8:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029fc:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029fe:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a00:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a04:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8002a06:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a08:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a0a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a0e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a10:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002a12:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002a14:	2101      	movs	r1, #1

  return HAL_OK;
 8002a16:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002a1c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002a20:	bc30      	pop	{r4, r5}
 8002a22:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a24:	2002      	movs	r0, #2
}
 8002a26:	4770      	bx	lr
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40014000 	.word	0x40014000
 8002a34:	40001800 	.word	0x40001800

08002a38 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a38:	6901      	ldr	r1, [r0, #16]
 8002a3a:	6882      	ldr	r2, [r0, #8]
{
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a40:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a42:	430a      	orrs	r2, r1
 8002a44:	69c0      	ldr	r0, [r0, #28]
 8002a46:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a48:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a4a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a4c:	49a1      	ldr	r1, [pc, #644]	; (8002cd4 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a4e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a50:	4029      	ands	r1, r5

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a52:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a58:	6859      	ldr	r1, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a5a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a5c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002a60:	4329      	orrs	r1, r5
 8002a62:	6059      	str	r1, [r3, #4]

  tmpreg |= huart->Init.OneBitSampling;
 8002a64:	6a21      	ldr	r1, [r4, #32]
 8002a66:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002a6e:	430a      	orrs	r2, r1


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a70:	4999      	ldr	r1, [pc, #612]	; (8002cd8 <UART_SetConfig+0x2a0>)
 8002a72:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a74:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a76:	d03f      	beq.n	8002af8 <UART_SetConfig+0xc0>
 8002a78:	4a98      	ldr	r2, [pc, #608]	; (8002cdc <UART_SetConfig+0x2a4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01b      	beq.n	8002ab6 <UART_SetConfig+0x7e>
 8002a7e:	4a98      	ldr	r2, [pc, #608]	; (8002ce0 <UART_SetConfig+0x2a8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	f000 80c9 	beq.w	8002c18 <UART_SetConfig+0x1e0>
 8002a86:	4a97      	ldr	r2, [pc, #604]	; (8002ce4 <UART_SetConfig+0x2ac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f000 80d5 	beq.w	8002c38 <UART_SetConfig+0x200>
 8002a8e:	4a96      	ldr	r2, [pc, #600]	; (8002ce8 <UART_SetConfig+0x2b0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d05f      	beq.n	8002b54 <UART_SetConfig+0x11c>
 8002a94:	4a95      	ldr	r2, [pc, #596]	; (8002cec <UART_SetConfig+0x2b4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	f000 8090 	beq.w	8002bbc <UART_SetConfig+0x184>
 8002a9c:	4a94      	ldr	r2, [pc, #592]	; (8002cf0 <UART_SetConfig+0x2b8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	f000 80eb 	beq.w	8002c7a <UART_SetConfig+0x242>
 8002aa4:	4a93      	ldr	r2, [pc, #588]	; (8002cf4 <UART_SetConfig+0x2bc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	f000 80fd 	beq.w	8002ca6 <UART_SetConfig+0x26e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aac:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002aae:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002ab0:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 8002ab4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ab6:	4b90      	ldr	r3, [pc, #576]	; (8002cf8 <UART_SetConfig+0x2c0>)
 8002ab8:	4a90      	ldr	r2, [pc, #576]	; (8002cfc <UART_SetConfig+0x2c4>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ac8:	d02d      	beq.n	8002b26 <UART_SetConfig+0xee>
    switch (clocksource)
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d8ee      	bhi.n	8002aac <UART_SetConfig+0x74>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <UART_SetConfig+0x9c>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b81 	.word	0x08002b81
 8002ad8:	08002b0f 	.word	0x08002b0f
 8002adc:	08002bd3 	.word	0x08002bd3
 8002ae0:	08002aad 	.word	0x08002aad
 8002ae4:	08002b75 	.word	0x08002b75
 8002ae8:	08002aad 	.word	0x08002aad
 8002aec:	08002aad 	.word	0x08002aad
 8002af0:	08002aad 	.word	0x08002aad
 8002af4:	08002b93 	.word	0x08002b93
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002af8:	4b7f      	ldr	r3, [pc, #508]	; (8002cf8 <UART_SetConfig+0x2c0>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d90b      	bls.n	8002b20 <UART_SetConfig+0xe8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b08:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b0c:	d063      	beq.n	8002bd6 <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b0e:	f7ff fad7 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d13f      	bne.n	8002b96 <UART_SetConfig+0x15e>
  huart->RxISR = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8002b1a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8002b1e:	bd38      	pop	{r3, r4, r5, pc}
 8002b20:	4a77      	ldr	r2, [pc, #476]	; (8002d00 <UART_SetConfig+0x2c8>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	e7ce      	b.n	8002ac4 <UART_SetConfig+0x8c>
    switch (clocksource)
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d8c0      	bhi.n	8002aac <UART_SetConfig+0x74>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <UART_SetConfig+0xf8>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002c13 	.word	0x08002c13
 8002b34:	08002bd7 	.word	0x08002bd7
 8002b38:	08002c71 	.word	0x08002c71
 8002b3c:	08002aad 	.word	0x08002aad
 8002b40:	08002c0d 	.word	0x08002c0d
 8002b44:	08002aad 	.word	0x08002aad
 8002b48:	08002aad 	.word	0x08002aad
 8002b4c:	08002aad 	.word	0x08002aad
 8002b50:	08002c75 	.word	0x08002c75
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b54:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <UART_SetConfig+0x2c0>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b62:	d033      	beq.n	8002bcc <UART_SetConfig+0x194>
 8002b64:	d80f      	bhi.n	8002b86 <UART_SetConfig+0x14e>
 8002b66:	b143      	cbz	r3, 8002b7a <UART_SetConfig+0x142>
 8002b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6c:	d19e      	bne.n	8002aac <UART_SetConfig+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b6e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b72:	d04b      	beq.n	8002c0c <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002b74:	f7ff fa60 	bl	8002038 <HAL_RCC_GetSysClockFreq>
        break;
 8002b78:	e7cb      	b.n	8002b12 <UART_SetConfig+0xda>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b7a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b7e:	d048      	beq.n	8002c12 <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b80:	f7ff fa8e 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
        break;
 8002b84:	e7c5      	b.n	8002b12 <UART_SetConfig+0xda>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b8a:	d18f      	bne.n	8002aac <UART_SetConfig+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b90:	d070      	beq.n	8002c74 <UART_SetConfig+0x23c>
        pclk = (uint32_t) LSE_VALUE;
 8002b92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b96:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b98:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b9c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002ba0:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba4:	f1a3 0110 	sub.w	r1, r3, #16
 8002ba8:	4291      	cmp	r1, r2
 8002baa:	f63f af7f 	bhi.w	8002aac <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bae:	6822      	ldr	r2, [r4, #0]
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8002bb4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002bb6:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8002bba:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bbc:	4b4e      	ldr	r3, [pc, #312]	; (8002cf8 <UART_SetConfig+0x2c0>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bca:	d145      	bne.n	8002c58 <UART_SetConfig+0x220>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002bd0:	d04e      	beq.n	8002c70 <UART_SetConfig+0x238>
    switch (clocksource)
 8002bd2:	484c      	ldr	r0, [pc, #304]	; (8002d04 <UART_SetConfig+0x2cc>)
 8002bd4:	e7df      	b.n	8002b96 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bd6:	f7ff fa73 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d09b      	beq.n	8002b16 <UART_SetConfig+0xde>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bde:	0043      	lsls	r3, r0, #1
 8002be0:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be2:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002be6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002bea:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bee:	f1a3 0210 	sub.w	r2, r3, #16
 8002bf2:	428a      	cmp	r2, r1
 8002bf4:	f63f af5a 	bhi.w	8002aac <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bf8:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bfc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002c00:	6821      	ldr	r1, [r4, #0]
 8002c02:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c04:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60cb      	str	r3, [r1, #12]
 8002c0a:	e750      	b.n	8002aae <UART_SetConfig+0x76>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c0c:	f7ff fa14 	bl	8002038 <HAL_RCC_GetSysClockFreq>
        break;
 8002c10:	e7e3      	b.n	8002bda <UART_SetConfig+0x1a2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c12:	f7ff fa45 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
        break;
 8002c16:	e7e0      	b.n	8002bda <UART_SetConfig+0x1a2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c18:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <UART_SetConfig+0x2c0>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d0d2      	beq.n	8002bcc <UART_SetConfig+0x194>
 8002c26:	d804      	bhi.n	8002c32 <UART_SetConfig+0x1fa>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0a6      	beq.n	8002b7a <UART_SetConfig+0x142>
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d09e      	beq.n	8002b6e <UART_SetConfig+0x136>
 8002c30:	e73c      	b.n	8002aac <UART_SetConfig+0x74>
 8002c32:	2b30      	cmp	r3, #48	; 0x30
 8002c34:	d0aa      	beq.n	8002b8c <UART_SetConfig+0x154>
 8002c36:	e739      	b.n	8002aac <UART_SetConfig+0x74>
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <UART_SetConfig+0x2c0>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c42:	2b80      	cmp	r3, #128	; 0x80
 8002c44:	d0c2      	beq.n	8002bcc <UART_SetConfig+0x194>
 8002c46:	d804      	bhi.n	8002c52 <UART_SetConfig+0x21a>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d096      	beq.n	8002b7a <UART_SetConfig+0x142>
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d08e      	beq.n	8002b6e <UART_SetConfig+0x136>
 8002c50:	e72c      	b.n	8002aac <UART_SetConfig+0x74>
 8002c52:	2bc0      	cmp	r3, #192	; 0xc0
 8002c54:	d09a      	beq.n	8002b8c <UART_SetConfig+0x154>
 8002c56:	e729      	b.n	8002aac <UART_SetConfig+0x74>
 8002c58:	d806      	bhi.n	8002c68 <UART_SetConfig+0x230>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f43f af54 	beq.w	8002b08 <UART_SetConfig+0xd0>
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c64:	d083      	beq.n	8002b6e <UART_SetConfig+0x136>
 8002c66:	e721      	b.n	8002aac <UART_SetConfig+0x74>
 8002c68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c6c:	d08e      	beq.n	8002b8c <UART_SetConfig+0x154>
 8002c6e:	e71d      	b.n	8002aac <UART_SetConfig+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <UART_SetConfig+0x2d0>)
 8002c72:	e7b5      	b.n	8002be0 <UART_SetConfig+0x1a8>
    switch (clocksource)
 8002c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c78:	e7b2      	b.n	8002be0 <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <UART_SetConfig+0x2c0>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c88:	d0a0      	beq.n	8002bcc <UART_SetConfig+0x194>
 8002c8a:	d807      	bhi.n	8002c9c <UART_SetConfig+0x264>
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f43f af74 	beq.w	8002b7a <UART_SetConfig+0x142>
 8002c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c96:	f43f af6a 	beq.w	8002b6e <UART_SetConfig+0x136>
 8002c9a:	e707      	b.n	8002aac <UART_SetConfig+0x74>
 8002c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ca0:	f43f af74 	beq.w	8002b8c <UART_SetConfig+0x154>
 8002ca4:	e702      	b.n	8002aac <UART_SetConfig+0x74>
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <UART_SetConfig+0x2c0>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb4:	d08a      	beq.n	8002bcc <UART_SetConfig+0x194>
 8002cb6:	d807      	bhi.n	8002cc8 <UART_SetConfig+0x290>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f43f af5e 	beq.w	8002b7a <UART_SetConfig+0x142>
 8002cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc2:	f43f af54 	beq.w	8002b6e <UART_SetConfig+0x136>
 8002cc6:	e6f1      	b.n	8002aac <UART_SetConfig+0x74>
 8002cc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ccc:	f43f af5e 	beq.w	8002b8c <UART_SetConfig+0x154>
 8002cd0:	e6ec      	b.n	8002aac <UART_SetConfig+0x74>
 8002cd2:	bf00      	nop
 8002cd4:	efff69f3 	.word	0xefff69f3
 8002cd8:	40011000 	.word	0x40011000
 8002cdc:	40004400 	.word	0x40004400
 8002ce0:	40004800 	.word	0x40004800
 8002ce4:	40004c00 	.word	0x40004c00
 8002ce8:	40005000 	.word	0x40005000
 8002cec:	40011400 	.word	0x40011400
 8002cf0:	40007800 	.word	0x40007800
 8002cf4:	40007c00 	.word	0x40007c00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08007bb4 	.word	0x08007bb4
 8002d00:	08007bb0 	.word	0x08007bb0
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	01e84800 	.word	0x01e84800

08002d0c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d0e:	07da      	lsls	r2, r3, #31
{
 8002d10:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d12:	d506      	bpl.n	8002d22 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d14:	6801      	ldr	r1, [r0, #0]
 8002d16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002d18:	684a      	ldr	r2, [r1, #4]
 8002d1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002d1e:	4322      	orrs	r2, r4
 8002d20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d22:	079c      	lsls	r4, r3, #30
 8002d24:	d506      	bpl.n	8002d34 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d26:	6801      	ldr	r1, [r0, #0]
 8002d28:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002d2a:	684a      	ldr	r2, [r1, #4]
 8002d2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d30:	4322      	orrs	r2, r4
 8002d32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d34:	0759      	lsls	r1, r3, #29
 8002d36:	d506      	bpl.n	8002d46 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d38:	6801      	ldr	r1, [r0, #0]
 8002d3a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002d3c:	684a      	ldr	r2, [r1, #4]
 8002d3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d42:	4322      	orrs	r2, r4
 8002d44:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d46:	071a      	lsls	r2, r3, #28
 8002d48:	d506      	bpl.n	8002d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d4a:	6801      	ldr	r1, [r0, #0]
 8002d4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002d4e:	684a      	ldr	r2, [r1, #4]
 8002d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d54:	4322      	orrs	r2, r4
 8002d56:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d58:	06dc      	lsls	r4, r3, #27
 8002d5a:	d506      	bpl.n	8002d6a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d5c:	6801      	ldr	r1, [r0, #0]
 8002d5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002d60:	688a      	ldr	r2, [r1, #8]
 8002d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d66:	4322      	orrs	r2, r4
 8002d68:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d6a:	0699      	lsls	r1, r3, #26
 8002d6c:	d506      	bpl.n	8002d7c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d6e:	6801      	ldr	r1, [r0, #0]
 8002d70:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002d72:	688a      	ldr	r2, [r1, #8]
 8002d74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d78:	4322      	orrs	r2, r4
 8002d7a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d7c:	065a      	lsls	r2, r3, #25
 8002d7e:	d50a      	bpl.n	8002d96 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d80:	6801      	ldr	r1, [r0, #0]
 8002d82:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002d84:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d86:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d8a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002d8e:	ea42 0204 	orr.w	r2, r2, r4
 8002d92:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d94:	d00b      	beq.n	8002dae <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d96:	061b      	lsls	r3, r3, #24
 8002d98:	d506      	bpl.n	8002da8 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d9a:	6802      	ldr	r2, [r0, #0]
 8002d9c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d9e:	6853      	ldr	r3, [r2, #4]
 8002da0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6053      	str	r3, [r2, #4]
  }
}
 8002da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dac:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dae:	684a      	ldr	r2, [r1, #4]
 8002db0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002db2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002db6:	4322      	orrs	r2, r4
 8002db8:	604a      	str	r2, [r1, #4]
 8002dba:	e7ec      	b.n	8002d96 <UART_AdvFeatureConfig+0x8a>

08002dbc <HAL_UART_Init>:
  if (huart == NULL)
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	f000 808f 	beq.w	8002ee0 <HAL_UART_Init+0x124>
{
 8002dc2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8084 	beq.w	8002ed6 <HAL_UART_Init+0x11a>
  __HAL_UART_DISABLE(huart);
 8002dce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002dd0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002dd6:	6813      	ldr	r3, [r2, #0]
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dde:	f7ff fe2b 	bl	8002a38 <UART_SetConfig>
 8002de2:	2801      	cmp	r0, #1
 8002de4:	d075      	beq.n	8002ed2 <HAL_UART_Init+0x116>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d16e      	bne.n	8002eca <HAL_UART_Init+0x10e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dec:	6823      	ldr	r3, [r4, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e08:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e0c:	f7fe fc06 	bl	800161c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e10:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002e12:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	0712      	lsls	r2, r2, #28
 8002e18:	d40a      	bmi.n	8002e30 <HAL_UART_Init+0x74>
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8002e1c:	2220      	movs	r2, #32
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8002e1e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002e22:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e26:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e2c:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002e2e:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	0298      	lsls	r0, r3, #10
 8002e34:	d4f1      	bmi.n	8002e1a <HAL_UART_Init+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fe fbf1 	bl	800161c <HAL_GetTick>
 8002e3a:	1b43      	subs	r3, r0, r5
 8002e3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	d226      	bcs.n	8002e92 <HAL_UART_Init+0xd6>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	0751      	lsls	r1, r2, #29
 8002e48:	d5f2      	bpl.n	8002e30 <HAL_UART_Init+0x74>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	0512      	lsls	r2, r2, #20
 8002e4e:	d5ef      	bpl.n	8002e30 <HAL_UART_Init+0x74>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e54:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	e853 2f00 	ldrex	r2, [r3]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	e843 2100 	strex	r1, r2, [r3]
 8002e62:	2900      	cmp	r1, #0
 8002e64:	d1f7      	bne.n	8002e56 <HAL_UART_Init+0x9a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	f103 0208 	add.w	r2, r3, #8
 8002e6a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e72:	f103 0008 	add.w	r0, r3, #8
 8002e76:	e840 2100 	strex	r1, r2, [r0]
 8002e7a:	2900      	cmp	r1, #0
 8002e7c:	d1f3      	bne.n	8002e66 <HAL_UART_Init+0xaa>

          huart->gState = HAL_UART_STATE_READY;
 8002e7e:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8002e80:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e82:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
          huart->gState = HAL_UART_STATE_READY;
 8002e86:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002e88:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8002e90:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9a:	e843 2100 	strex	r1, r2, [r3]
 8002e9e:	2900      	cmp	r1, #0
 8002ea0:	d1f7      	bne.n	8002e92 <HAL_UART_Init+0xd6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea2:	f103 0208 	add.w	r2, r3, #8
 8002ea6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	f103 0008 	add.w	r0, r3, #8
 8002eb2:	e840 2100 	strex	r1, r2, [r0]
 8002eb6:	2900      	cmp	r1, #0
 8002eb8:	d1f3      	bne.n	8002ea2 <HAL_UART_Init+0xe6>
        huart->gState = HAL_UART_STATE_READY;
 8002eba:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8002ebc:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8002ebe:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
        huart->gState = HAL_UART_STATE_READY;
 8002ec2:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8002ec8:	bd38      	pop	{r3, r4, r5, pc}
    UART_AdvFeatureConfig(huart);
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7ff ff1e 	bl	8002d0c <UART_AdvFeatureConfig>
 8002ed0:	e78c      	b.n	8002dec <HAL_UART_Init+0x30>
    return HAL_ERROR;
 8002ed2:	2001      	movs	r0, #1
}
 8002ed4:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8002ed6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8002eda:	f7fe fa9b 	bl	8001414 <HAL_UART_MspInit>
 8002ede:	e776      	b.n	8002dce <HAL_UART_Init+0x12>
    return HAL_ERROR;
 8002ee0:	2001      	movs	r0, #1
}
 8002ee2:	4770      	bx	lr

08002ee4 <UART_WaitOnFlagUntilTimeout>:
{
 8002ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002eec:	4607      	mov	r7, r0
 8002eee:	460e      	mov	r6, r1
 8002ef0:	4615      	mov	r5, r2
 8002ef2:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef4:	6804      	ldr	r4, [r0, #0]
 8002ef6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002efa:	d10a      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002efc:	69e3      	ldr	r3, [r4, #28]
 8002efe:	ea36 0303 	bics.w	r3, r6, r3
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	429d      	cmp	r5, r3
 8002f0a:	d0f7      	beq.n	8002efc <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002f0c:	2000      	movs	r0, #0
}
 8002f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f12:	69e3      	ldr	r3, [r4, #28]
 8002f14:	ea36 0303 	bics.w	r3, r6, r3
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	42ab      	cmp	r3, r5
 8002f20:	d1f4      	bne.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fb7b 	bl	800161c <HAL_GetTick>
 8002f26:	eba0 0009 	sub.w	r0, r0, r9
 8002f2a:	4540      	cmp	r0, r8
 8002f2c:	d832      	bhi.n	8002f94 <UART_WaitOnFlagUntilTimeout+0xb0>
 8002f2e:	f1b8 0f00 	cmp.w	r8, #0
 8002f32:	d02f      	beq.n	8002f94 <UART_WaitOnFlagUntilTimeout+0xb0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f34:	683c      	ldr	r4, [r7, #0]
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	4622      	mov	r2, r4
 8002f3a:	0759      	lsls	r1, r3, #29
 8002f3c:	d5db      	bpl.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f3e:	69e3      	ldr	r3, [r4, #28]
 8002f40:	051b      	lsls	r3, r3, #20
 8002f42:	d5d8      	bpl.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f48:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	e844 3100 	strex	r1, r3, [r4]
 8002f56:	b139      	cbz	r1, 8002f68 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	e852 3f00 	ldrex	r3, [r2]
 8002f5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	e842 3100 	strex	r1, r3, [r2]
 8002f64:	2900      	cmp	r1, #0
 8002f66:	d1f7      	bne.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f68:	f102 0308 	add.w	r3, r2, #8
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f70:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f74:	f102 0008 	add.w	r0, r2, #8
 8002f78:	e840 3100 	strex	r1, r3, [r0]
 8002f7c:	2900      	cmp	r1, #0
 8002f7e:	d1f3      	bne.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8002f80:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8002f82:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002f84:	f887 1078 	strb.w	r1, [r7, #120]	; 0x78
          huart->gState = HAL_UART_STATE_READY;
 8002f88:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002f8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          return HAL_TIMEOUT;
 8002f92:	e7bc      	b.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x2a>
 8002f94:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	e842 3100 	strex	r1, r3, [r2]
 8002fa2:	2900      	cmp	r1, #0
 8002fa4:	d1f7      	bne.n	8002f96 <UART_WaitOnFlagUntilTimeout+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	f102 0308 	add.w	r3, r2, #8
 8002faa:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	f102 0008 	add.w	r0, r2, #8
 8002fb6:	e840 3100 	strex	r1, r3, [r0]
 8002fba:	2900      	cmp	r1, #0
 8002fbc:	d1f3      	bne.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0xc2>
        huart->gState = HAL_UART_STATE_READY;
 8002fbe:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8002fc0:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8002fc2:	f887 1078 	strb.w	r1, [r7, #120]	; 0x78
        huart->gState = HAL_UART_STATE_READY;
 8002fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        return HAL_TIMEOUT;
 8002fcc:	e79f      	b.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x2a>
 8002fce:	bf00      	nop

08002fd0 <HAL_UART_Transmit>:
{
 8002fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fd4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8002fd8:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	f040 8087 	bne.w	80030ee <HAL_UART_Transmit+0x11e>
    if ((pData == NULL) || (Size == 0U))
 8002fe0:	4689      	mov	r9, r1
 8002fe2:	2900      	cmp	r1, #0
 8002fe4:	d03f      	beq.n	8003066 <HAL_UART_Transmit+0x96>
 8002fe6:	fab2 f782 	clz	r7, r2
 8002fea:	4614      	mov	r4, r2
 8002fec:	097f      	lsrs	r7, r7, #5
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	d039      	beq.n	8003066 <HAL_UART_Transmit+0x96>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ff2:	2321      	movs	r3, #33	; 0x21
 8002ff4:	4605      	mov	r5, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff6:	f8c0 7084 	str.w	r7, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffa:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fb0e 	bl	800161c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003000:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8003002:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8003004:	f8a5 4050 	strh.w	r4, [r5, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800300c:	f8a5 4052 	strh.w	r4, [r5, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003010:	f000 8090 	beq.w	8003134 <HAL_UART_Transmit+0x164>
    while (huart->TxXferCount > 0U)
 8003014:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8003018:	b29b      	uxth	r3, r3
 800301a:	b1b3      	cbz	r3, 800304a <HAL_UART_Transmit+0x7a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301c:	682c      	ldr	r4, [r5, #0]
 800301e:	1c71      	adds	r1, r6, #1
 8003020:	d125      	bne.n	800306e <HAL_UART_Transmit+0x9e>
 8003022:	69e2      	ldr	r2, [r4, #28]
 8003024:	0612      	lsls	r2, r2, #24
 8003026:	d5fc      	bpl.n	8003022 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003028:	f1b9 0f00 	cmp.w	r9, #0
 800302c:	d05a      	beq.n	80030e4 <HAL_UART_Transmit+0x114>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800302e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8003032:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8003034:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8003038:	3b01      	subs	r3, #1
 800303a:	b29b      	uxth	r3, r3
 800303c:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003040:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e9      	bne.n	800301e <HAL_UART_Transmit+0x4e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	4643      	mov	r3, r8
 800304c:	2200      	movs	r2, #0
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	4628      	mov	r0, r5
 8003052:	9600      	str	r6, [sp, #0]
 8003054:	f7ff ff46 	bl	8002ee4 <UART_WaitOnFlagUntilTimeout>
 8003058:	2800      	cmp	r0, #0
 800305a:	d172      	bne.n	8003142 <HAL_UART_Transmit+0x172>
    huart->gState = HAL_UART_STATE_READY;
 800305c:	2320      	movs	r3, #32
 800305e:	67eb      	str	r3, [r5, #124]	; 0x7c
}
 8003060:	b003      	add	sp, #12
 8003062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003066:	2001      	movs	r0, #1
}
 8003068:	b003      	add	sp, #12
 800306a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	69e3      	ldr	r3, [r4, #28]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	d4d9      	bmi.n	8003028 <HAL_UART_Transmit+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003074:	f7fe fad2 	bl	800161c <HAL_GetTick>
 8003078:	eba0 0008 	sub.w	r0, r0, r8
 800307c:	4286      	cmp	r6, r0
 800307e:	d33a      	bcc.n	80030f6 <HAL_UART_Transmit+0x126>
 8003080:	2e00      	cmp	r6, #0
 8003082:	d038      	beq.n	80030f6 <HAL_UART_Transmit+0x126>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003084:	682c      	ldr	r4, [r5, #0]
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	4623      	mov	r3, r4
 800308a:	0752      	lsls	r2, r2, #29
 800308c:	d5c7      	bpl.n	800301e <HAL_UART_Transmit+0x4e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800308e:	69e2      	ldr	r2, [r4, #28]
 8003090:	0510      	lsls	r0, r2, #20
 8003092:	d5c4      	bpl.n	800301e <HAL_UART_Transmit+0x4e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003098:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800309e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a2:	e844 2100 	strex	r1, r2, [r4]
 80030a6:	b139      	cbz	r1, 80030b8 <HAL_UART_Transmit+0xe8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	e853 2f00 	ldrex	r2, [r3]
 80030ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	e843 2100 	strex	r1, r2, [r3]
 80030b4:	2900      	cmp	r1, #0
 80030b6:	d1f7      	bne.n	80030a8 <HAL_UART_Transmit+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	f103 0208 	add.w	r2, r3, #8
 80030bc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	f103 0008 	add.w	r0, r3, #8
 80030c8:	e840 2100 	strex	r1, r2, [r0]
 80030cc:	2900      	cmp	r1, #0
 80030ce:	d1f3      	bne.n	80030b8 <HAL_UART_Transmit+0xe8>
          huart->gState = HAL_UART_STATE_READY;
 80030d0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80030d2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80030d4:	f885 1078 	strb.w	r1, [r5, #120]	; 0x78
          huart->gState = HAL_UART_STATE_READY;
 80030d8:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80030da:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030de:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 80030e2:	e7c1      	b.n	8003068 <HAL_UART_Transmit+0x98>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030e4:	f837 3b02 	ldrh.w	r3, [r7], #2
 80030e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ec:	e7a1      	b.n	8003032 <HAL_UART_Transmit+0x62>
    return HAL_BUSY;
 80030ee:	2002      	movs	r0, #2
}
 80030f0:	b003      	add	sp, #12
 80030f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030f6:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	e843 2100 	strex	r1, r2, [r3]
 8003104:	2900      	cmp	r1, #0
 8003106:	d1f7      	bne.n	80030f8 <HAL_UART_Transmit+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	f103 0208 	add.w	r2, r3, #8
 800310c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003110:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003114:	f103 0008 	add.w	r0, r3, #8
 8003118:	e840 2100 	strex	r1, r2, [r0]
 800311c:	2900      	cmp	r1, #0
 800311e:	d1f3      	bne.n	8003108 <HAL_UART_Transmit+0x138>
        huart->gState = HAL_UART_STATE_READY;
 8003120:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003122:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8003124:	f885 1078 	strb.w	r1, [r5, #120]	; 0x78
        huart->gState = HAL_UART_STATE_READY;
 8003128:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800312a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
}
 800312e:	b003      	add	sp, #12
 8003130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003134:	692b      	ldr	r3, [r5, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f47f af6c 	bne.w	8003014 <HAL_UART_Transmit+0x44>
 800313c:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 800313e:	4699      	mov	r9, r3
 8003140:	e768      	b.n	8003014 <HAL_UART_Transmit+0x44>
      return HAL_TIMEOUT;
 8003142:	2003      	movs	r0, #3
 8003144:	e790      	b.n	8003068 <HAL_UART_Transmit+0x98>
 8003146:	bf00      	nop

08003148 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8003148:	f000 b888 	b.w	800325c <ai_platform_network_get_error>

0800314c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800314c:	b510      	push	{r4, lr}
  return ai_platform_network_create(
 800314e:	2204      	movs	r2, #4
{
 8003150:	b082      	sub	sp, #8
  return ai_platform_network_create(
 8003152:	2400      	movs	r4, #0
 8003154:	2301      	movs	r3, #1
 8003156:	e9cd 2400 	strd	r2, r4, [sp]
 800315a:	4a02      	ldr	r2, [pc, #8]	; (8003164 <ai_network_create+0x18>)
 800315c:	f000 f90c 	bl	8003378 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003160:	b002      	add	sp, #8
 8003162:	bd10      	pop	{r4, pc}
 8003164:	20000424 	.word	0x20000424

08003168 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8003168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800316c:	4605      	mov	r5, r0
 800316e:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003170:	f000 f9c8 	bl	8003504 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8003174:	2800      	cmp	r0, #0
 8003176:	d055      	beq.n	8003224 <ai_network_init+0xbc>
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8003178:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);

  ok &= ai_platform_network_post_init(network);
 800317a:	4628      	mov	r0, r5
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800317c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 800324c <ai_network_init+0xe4>
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8003180:	3303      	adds	r3, #3
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8003182:	4e29      	ldr	r6, [pc, #164]	; (8003228 <ai_network_init+0xc0>)
 8003184:	6922      	ldr	r2, [r4, #16]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8003186:	f023 0803 	bic.w	r8, r3, #3
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800318a:	f8dc 3000 	ldr.w	r3, [ip]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800318e:	4f27      	ldr	r7, [pc, #156]	; (800322c <ai_network_init+0xc4>)
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8003190:	f043 4e80 	orr.w	lr, r3, #1073741824	; 0x40000000
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8003194:	6833      	ldr	r3, [r6, #0]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003196:	4d26      	ldr	r5, [pc, #152]	; (8003230 <ai_network_init+0xc8>)
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8003198:	f8cc e000 	str.w	lr, [ip]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800319c:	4c25      	ldr	r4, [pc, #148]	; (8003234 <ai_network_init+0xcc>)
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800319e:	4926      	ldr	r1, [pc, #152]	; (8003238 <ai_network_init+0xd0>)
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 80031a0:	e9cc 2202 	strd	r2, r2, [ip, #8]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80031a4:	f043 4c80 	orr.w	ip, r3, #1073741824	; 0x40000000
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80031a8:	683b      	ldr	r3, [r7, #0]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80031aa:	f8c6 c000 	str.w	ip, [r6]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80031ae:	f043 4c80 	orr.w	ip, r3, #1073741824	; 0x40000000
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80031b2:	682b      	ldr	r3, [r5, #0]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80031b4:	f8c7 c000 	str.w	ip, [r7]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80031b8:	f043 4c80 	orr.w	ip, r3, #1073741824	; 0x40000000
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80031bc:	6823      	ldr	r3, [r4, #0]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80031be:	f8c5 c000 	str.w	ip, [r5]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80031c2:	f043 4c80 	orr.w	ip, r3, #1073741824	; 0x40000000
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80031c6:	680b      	ldr	r3, [r1, #0]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80031c8:	f8c4 c000 	str.w	ip, [r4]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80031cc:	f043 4c80 	orr.w	ip, r3, #1073741824	; 0x40000000
    dense_1_output_array.data = AI_PTR(activations + 16);
 80031d0:	f108 0310 	add.w	r3, r8, #16
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80031d4:	f8c1 c000 	str.w	ip, [r1]
    dense_0_bias_array.data = AI_PTR(weights + 16);
 80031d8:	f102 0c10 	add.w	ip, r2, #16
    dense_0_bias_array.data_start = AI_PTR(weights + 16);
 80031dc:	e9c6 cc02 	strd	ip, ip, [r6, #8]
    dense_1_weights_array.data = AI_PTR(weights + 80);
 80031e0:	f102 0650 	add.w	r6, r2, #80	; 0x50
    dense_1_weights_array.data_start = AI_PTR(weights + 80);
 80031e4:	e9c7 6602 	strd	r6, r6, [r7, #8]
    dense_1_bias_array.data = AI_PTR(weights + 336);
 80031e8:	f502 76a8 	add.w	r6, r2, #336	; 0x150
    dense_1_bias_array.data_start = AI_PTR(weights + 336);
 80031ec:	e9c5 6602 	strd	r6, r6, [r5, #8]
    dense_2_weights_array.data = AI_PTR(weights + 400);
 80031f0:	f502 75c8 	add.w	r5, r2, #400	; 0x190
    dense_2_bias_array.data = AI_PTR(weights + 416);
 80031f4:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
    dense_2_bias_array.data_start = AI_PTR(weights + 416);
 80031f8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_0_output_array.data = AI_PTR(activations + 0);
 80031fc:	4a0f      	ldr	r2, [pc, #60]	; (800323c <ai_network_init+0xd4>)
    serving_default_dense_2_input0_output_array.data = AI_PTR(NULL);
 80031fe:	4910      	ldr	r1, [pc, #64]	; (8003240 <ai_network_init+0xd8>)
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 8003200:	e9c2 8802 	strd	r8, r8, [r2, #8]
    dense_1_output_array.data = AI_PTR(activations + 16);
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <ai_network_init+0xdc>)
    dense_2_weights_array.data_start = AI_PTR(weights + 400);
 8003206:	e9c4 5502 	strd	r5, r5, [r4, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 16);
 800320a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    serving_default_dense_2_input0_output_array.data = AI_PTR(NULL);
 800320e:	2400      	movs	r4, #0
 8003210:	2500      	movs	r5, #0
    dense_2_output_array.data = AI_PTR(NULL);
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <ai_network_init+0xe0>)
    serving_default_dense_2_input0_output_array.data = AI_PTR(NULL);
 8003214:	e9c1 4502 	strd	r4, r5, [r1, #8]
    dense_2_output_array.data = AI_PTR(NULL);
 8003218:	e9c3 4502 	strd	r4, r5, [r3, #8]

  return ok;
}
 800321c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  ok &= ai_platform_network_post_init(network);
 8003220:	f000 ba4a 	b.w	80036b8 <ai_platform_network_post_init>
}
 8003224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003228:	20000260 	.word	0x20000260
 800322c:	20000374 	.word	0x20000374
 8003230:	20000300 	.word	0x20000300
 8003234:	20000414 	.word	0x20000414
 8003238:	200003a0 	.word	0x200003a0
 800323c:	200002a8 	.word	0x200002a8
 8003240:	200004a8 	.word	0x200004a8
 8003244:	20000348 	.word	0x20000348
 8003248:	200003e8 	.word	0x200003e8
 800324c:	200002d4 	.word	0x200002d4

08003250 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8003250:	f000 bae0 	b.w	8003814 <ai_platform_network_process>

08003254 <ai_network_data_weights_get>:
    0xb6, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0xf7,
    0xff, 0xff, 0x4b, 0xf9, 0xff, 0xff, 0x4a, 0x05, 0x00, 0x00,
    0x21, 0xa5, 0x8b, 0xca, 0x5e, 0x1d, 0xce, 0x42, 0x9d, 0xce,
    0x1f, 0xb0, 0xdf, 0x54, 0x2f, 0x81, 0x8c, 0xef, 0xff, 0xff  };
  return AI_HANDLE_PTR(s_network_weights);
}
 8003254:	4800      	ldr	r0, [pc, #0]	; (8003258 <ai_network_data_weights_get+0x4>)
 8003256:	4770      	bx	lr
 8003258:	08007ce0 	.word	0x08007ce0

0800325c <ai_platform_network_get_error>:
 800325c:	b118      	cbz	r0, 8003266 <ai_platform_network_get_error+0xa>
 800325e:	4b3c      	ldr	r3, [pc, #240]	; (8003350 <ai_platform_network_get_error+0xf4>)
 8003260:	6802      	ldr	r2, [r0, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d02a      	beq.n	80032bc <ai_platform_network_get_error+0x60>
 8003266:	4a3b      	ldr	r2, [pc, #236]	; (8003354 <ai_platform_network_get_error+0xf8>)
 8003268:	493b      	ldr	r1, [pc, #236]	; (8003358 <ai_platform_network_get_error+0xfc>)
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	680b      	ldr	r3, [r1, #0]
 8003274:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8003278:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800327c:	185a      	adds	r2, r3, r1
 800327e:	2a01      	cmp	r2, #1
 8003280:	d90d      	bls.n	800329e <ai_platform_network_get_error+0x42>
 8003282:	f240 4249 	movw	r2, #1097	; 0x449
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <ai_platform_network_get_error+0x42>
 800328a:	4b34      	ldr	r3, [pc, #208]	; (800335c <ai_platform_network_get_error+0x100>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003292:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003296:	d02d      	beq.n	80032f4 <ai_platform_network_get_error+0x98>
 8003298:	f241 0010 	movw	r0, #4112	; 0x1010
 800329c:	4770      	bx	lr
 800329e:	4b30      	ldr	r3, [pc, #192]	; (8003360 <ai_platform_network_get_error+0x104>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	4619      	mov	r1, r3
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	680b      	ldr	r3, [r1, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1fc      	bne.n	80032a6 <ai_platform_network_get_error+0x4a>
 80032ac:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <ai_platform_network_get_error+0x108>)
 80032ae:	492e      	ldr	r1, [pc, #184]	; (8003368 <ai_platform_network_get_error+0x10c>)
 80032b0:	4a2e      	ldr	r2, [pc, #184]	; (800336c <ai_platform_network_get_error+0x110>)
 80032b2:	6019      	str	r1, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d0ee      	beq.n	8003298 <ai_platform_network_get_error+0x3c>
 80032ba:	e7fe      	b.n	80032ba <ai_platform_network_get_error+0x5e>
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <ai_platform_network_get_error+0xf8>)
 80032be:	4926      	ldr	r1, [pc, #152]	; (8003358 <ai_platform_network_get_error+0xfc>)
 80032c0:	6813      	ldr	r3, [r2, #0]
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80032cc:	680b      	ldr	r3, [r1, #0]
 80032ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d2:	189a      	adds	r2, r3, r2
 80032d4:	2a01      	cmp	r2, #1
 80032d6:	d92b      	bls.n	8003330 <ai_platform_network_get_error+0xd4>
 80032d8:	f240 4249 	movw	r2, #1097	; 0x449
 80032dc:	4293      	cmp	r3, r2
 80032de:	d027      	beq.n	8003330 <ai_platform_network_get_error+0xd4>
 80032e0:	4b1e      	ldr	r3, [pc, #120]	; (800335c <ai_platform_network_get_error+0x100>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80032ec:	d011      	beq.n	8003312 <ai_platform_network_get_error+0xb6>
 80032ee:	3010      	adds	r0, #16
 80032f0:	f000 bd3e 	b.w	8003d70 <core_get_error>
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <ai_platform_network_get_error+0x114>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	4619      	mov	r1, r3
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	680b      	ldr	r3, [r1, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1fc      	bne.n	80032fc <ai_platform_network_get_error+0xa0>
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <ai_platform_network_get_error+0x118>)
 8003304:	4918      	ldr	r1, [pc, #96]	; (8003368 <ai_platform_network_get_error+0x10c>)
 8003306:	4a19      	ldr	r2, [pc, #100]	; (800336c <ai_platform_network_get_error+0x110>)
 8003308:	6019      	str	r1, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4293      	cmp	r3, r2
 800330e:	d0c3      	beq.n	8003298 <ai_platform_network_get_error+0x3c>
 8003310:	e7fe      	b.n	8003310 <ai_platform_network_get_error+0xb4>
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <ai_platform_network_get_error+0x114>)
 8003314:	2201      	movs	r2, #1
 8003316:	4619      	mov	r1, r3
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	680b      	ldr	r3, [r1, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1fc      	bne.n	800331a <ai_platform_network_get_error+0xbe>
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <ai_platform_network_get_error+0x118>)
 8003322:	4911      	ldr	r1, [pc, #68]	; (8003368 <ai_platform_network_get_error+0x10c>)
 8003324:	4a11      	ldr	r2, [pc, #68]	; (800336c <ai_platform_network_get_error+0x110>)
 8003326:	6019      	str	r1, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4293      	cmp	r3, r2
 800332c:	d0df      	beq.n	80032ee <ai_platform_network_get_error+0x92>
 800332e:	e7fe      	b.n	800332e <ai_platform_network_get_error+0xd2>
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <ai_platform_network_get_error+0x104>)
 8003332:	2201      	movs	r2, #1
 8003334:	4619      	mov	r1, r3
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	680b      	ldr	r3, [r1, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1fc      	bne.n	8003338 <ai_platform_network_get_error+0xdc>
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <ai_platform_network_get_error+0x108>)
 8003340:	4909      	ldr	r1, [pc, #36]	; (8003368 <ai_platform_network_get_error+0x10c>)
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <ai_platform_network_get_error+0x110>)
 8003344:	6019      	str	r1, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4293      	cmp	r3, r2
 800334a:	d0d0      	beq.n	80032ee <ai_platform_network_get_error+0x92>
 800334c:	e7fe      	b.n	800334c <ai_platform_network_get_error+0xf0>
 800334e:	bf00      	nop
 8003350:	a1c00100 	.word	0xa1c00100
 8003354:	e0002000 	.word	0xe0002000
 8003358:	e0042000 	.word	0xe0042000
 800335c:	5c001000 	.word	0x5c001000
 8003360:	40023008 	.word	0x40023008
 8003364:	40023000 	.word	0x40023000
 8003368:	f407a5c2 	.word	0xf407a5c2
 800336c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003370:	58024c08 	.word	0x58024c08
 8003374:	58024c00 	.word	0x58024c00

08003378 <ai_platform_network_create>:
 8003378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800337c:	4d56      	ldr	r5, [pc, #344]	; (80034d8 <ai_platform_network_create+0x160>)
 800337e:	b082      	sub	sp, #8
 8003380:	4e56      	ldr	r6, [pc, #344]	; (80034dc <ai_platform_network_create+0x164>)
 8003382:	6829      	ldr	r1, [r5, #0]
 8003384:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8003388:	f021 0101 	bic.w	r1, r1, #1
 800338c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8003390:	6029      	str	r1, [r5, #0]
 8003392:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8003396:	6831      	ldr	r1, [r6, #0]
 8003398:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800339c:	194d      	adds	r5, r1, r5
 800339e:	2d01      	cmp	r5, #1
 80033a0:	d939      	bls.n	8003416 <ai_platform_network_create+0x9e>
 80033a2:	f240 4549 	movw	r5, #1097	; 0x449
 80033a6:	42a9      	cmp	r1, r5
 80033a8:	d035      	beq.n	8003416 <ai_platform_network_create+0x9e>
 80033aa:	494d      	ldr	r1, [pc, #308]	; (80034e0 <ai_platform_network_create+0x168>)
 80033ac:	6809      	ldr	r1, [r1, #0]
 80033ae:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80033b2:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80033b6:	d01f      	beq.n	80033f8 <ai_platform_network_create+0x80>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d03b      	beq.n	8003434 <ai_platform_network_create+0xbc>
 80033bc:	4698      	mov	r8, r3
 80033be:	4606      	mov	r6, r0
 80033c0:	4b48      	ldr	r3, [pc, #288]	; (80034e4 <ai_platform_network_create+0x16c>)
 80033c2:	4615      	mov	r5, r2
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	6032      	str	r2, [r6, #0]
 80033c8:	f000 fcd0 	bl	8003d6c <core_init>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d136      	bne.n	800343e <ai_platform_network_create+0xc6>
 80033d0:	ea4f 6808 	mov.w	r8, r8, lsl #24
 80033d4:	2230      	movs	r2, #48	; 0x30
 80033d6:	0424      	lsls	r4, r4, #16
 80033d8:	2300      	movs	r3, #0
 80033da:	2110      	movs	r1, #16
 80033dc:	6033      	str	r3, [r6, #0]
 80033de:	2000      	movs	r0, #0
 80033e0:	ea44 2307 	orr.w	r3, r4, r7, lsl #8
 80033e4:	f362 0007 	bfi	r0, r2, #0, #8
 80033e8:	ea43 0308 	orr.w	r3, r3, r8
 80033ec:	f361 201f 	bfi	r0, r1, #8, #24
 80033f0:	662b      	str	r3, [r5, #96]	; 0x60
 80033f2:	b002      	add	sp, #8
 80033f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f8:	493b      	ldr	r1, [pc, #236]	; (80034e8 <ai_platform_network_create+0x170>)
 80033fa:	2501      	movs	r5, #1
 80033fc:	460e      	mov	r6, r1
 80033fe:	600d      	str	r5, [r1, #0]
 8003400:	6831      	ldr	r1, [r6, #0]
 8003402:	2900      	cmp	r1, #0
 8003404:	d1fc      	bne.n	8003400 <ai_platform_network_create+0x88>
 8003406:	4939      	ldr	r1, [pc, #228]	; (80034ec <ai_platform_network_create+0x174>)
 8003408:	4e39      	ldr	r6, [pc, #228]	; (80034f0 <ai_platform_network_create+0x178>)
 800340a:	4d3a      	ldr	r5, [pc, #232]	; (80034f4 <ai_platform_network_create+0x17c>)
 800340c:	600e      	str	r6, [r1, #0]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	42a9      	cmp	r1, r5
 8003412:	d0d1      	beq.n	80033b8 <ai_platform_network_create+0x40>
 8003414:	e7fe      	b.n	8003414 <ai_platform_network_create+0x9c>
 8003416:	4938      	ldr	r1, [pc, #224]	; (80034f8 <ai_platform_network_create+0x180>)
 8003418:	2501      	movs	r5, #1
 800341a:	460e      	mov	r6, r1
 800341c:	600d      	str	r5, [r1, #0]
 800341e:	6831      	ldr	r1, [r6, #0]
 8003420:	2900      	cmp	r1, #0
 8003422:	d1fc      	bne.n	800341e <ai_platform_network_create+0xa6>
 8003424:	4935      	ldr	r1, [pc, #212]	; (80034fc <ai_platform_network_create+0x184>)
 8003426:	4e32      	ldr	r6, [pc, #200]	; (80034f0 <ai_platform_network_create+0x178>)
 8003428:	4d32      	ldr	r5, [pc, #200]	; (80034f4 <ai_platform_network_create+0x17c>)
 800342a:	600e      	str	r6, [r1, #0]
 800342c:	6809      	ldr	r1, [r1, #0]
 800342e:	42a9      	cmp	r1, r5
 8003430:	d0c2      	beq.n	80033b8 <ai_platform_network_create+0x40>
 8003432:	e7fe      	b.n	8003432 <ai_platform_network_create+0xba>
 8003434:	f241 0010 	movw	r0, #4112	; 0x1010
 8003438:	b002      	add	sp, #8
 800343a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800343e:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <ai_platform_network_create+0x160>)
 8003440:	4926      	ldr	r1, [pc, #152]	; (80034dc <ai_platform_network_create+0x164>)
 8003442:	6813      	ldr	r3, [r2, #0]
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	f46f 638a 	mvn.w	r3, #1104	; 0x450
 800344e:	680a      	ldr	r2, [r1, #0]
 8003450:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003454:	18d3      	adds	r3, r2, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d914      	bls.n	8003484 <ai_platform_network_create+0x10c>
 800345a:	f240 4349 	movw	r3, #1097	; 0x449
 800345e:	429a      	cmp	r2, r3
 8003460:	d010      	beq.n	8003484 <ai_platform_network_create+0x10c>
 8003462:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <ai_platform_network_create+0x168>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800346a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800346e:	d022      	beq.n	80034b6 <ai_platform_network_create+0x13e>
 8003470:	ea4f 6808 	mov.w	r8, r8, lsl #24
 8003474:	0424      	lsls	r4, r4, #16
 8003476:	ea48 0304 	orr.w	r3, r8, r4
 800347a:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800347e:	d010      	beq.n	80034a2 <ai_platform_network_create+0x12a>
 8003480:	2201      	movs	r2, #1
 8003482:	e7a9      	b.n	80033d8 <ai_platform_network_create+0x60>
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <ai_platform_network_create+0x180>)
 8003486:	2201      	movs	r2, #1
 8003488:	4619      	mov	r1, r3
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	680b      	ldr	r3, [r1, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1fc      	bne.n	800348c <ai_platform_network_create+0x114>
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <ai_platform_network_create+0x184>)
 8003494:	4916      	ldr	r1, [pc, #88]	; (80034f0 <ai_platform_network_create+0x178>)
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <ai_platform_network_create+0x17c>)
 8003498:	6019      	str	r1, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4293      	cmp	r3, r2
 800349e:	d0e7      	beq.n	8003470 <ai_platform_network_create+0xf8>
 80034a0:	e7fe      	b.n	80034a0 <ai_platform_network_create+0x128>
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <ai_platform_network_create+0x188>)
 80034a4:	a802      	add	r0, sp, #8
 80034a6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80034aa:	f000 fd79 	bl	8003fa0 <ai_check_custom_types>
 80034ae:	b188      	cbz	r0, 80034d4 <ai_platform_network_create+0x15c>
 80034b0:	2100      	movs	r1, #0
 80034b2:	460a      	mov	r2, r1
 80034b4:	e793      	b.n	80033de <ai_platform_network_create+0x66>
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <ai_platform_network_create+0x170>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	4619      	mov	r1, r3
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	680b      	ldr	r3, [r1, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1fc      	bne.n	80034be <ai_platform_network_create+0x146>
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <ai_platform_network_create+0x174>)
 80034c6:	490a      	ldr	r1, [pc, #40]	; (80034f0 <ai_platform_network_create+0x178>)
 80034c8:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <ai_platform_network_create+0x17c>)
 80034ca:	6019      	str	r1, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d0ce      	beq.n	8003470 <ai_platform_network_create+0xf8>
 80034d2:	e7fe      	b.n	80034d2 <ai_platform_network_create+0x15a>
 80034d4:	2202      	movs	r2, #2
 80034d6:	e77f      	b.n	80033d8 <ai_platform_network_create+0x60>
 80034d8:	e0002000 	.word	0xe0002000
 80034dc:	e0042000 	.word	0xe0042000
 80034e0:	5c001000 	.word	0x5c001000
 80034e4:	a1c00100 	.word	0xa1c00100
 80034e8:	58024c08 	.word	0x58024c08
 80034ec:	58024c00 	.word	0x58024c00
 80034f0:	f407a5c2 	.word	0xf407a5c2
 80034f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80034f8:	40023008 	.word	0x40023008
 80034fc:	40023000 	.word	0x40023000
 8003500:	84048403 	.word	0x84048403

08003504 <ai_platform_network_init>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	2800      	cmp	r0, #0
 8003508:	d061      	beq.n	80035ce <ai_platform_network_init+0xca>
 800350a:	4b61      	ldr	r3, [pc, #388]	; (8003690 <ai_platform_network_init+0x18c>)
 800350c:	6802      	ldr	r2, [r0, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d15d      	bne.n	80035ce <ai_platform_network_init+0xca>
 8003512:	4a60      	ldr	r2, [pc, #384]	; (8003694 <ai_platform_network_init+0x190>)
 8003514:	4c60      	ldr	r4, [pc, #384]	; (8003698 <ai_platform_network_init+0x194>)
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003528:	189a      	adds	r2, r3, r2
 800352a:	2a01      	cmp	r2, #1
 800352c:	d92f      	bls.n	800358e <ai_platform_network_init+0x8a>
 800352e:	f240 4249 	movw	r2, #1097	; 0x449
 8003532:	4293      	cmp	r3, r2
 8003534:	d02b      	beq.n	800358e <ai_platform_network_init+0x8a>
 8003536:	4b59      	ldr	r3, [pc, #356]	; (800369c <ai_platform_network_init+0x198>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003542:	d05f      	beq.n	8003604 <ai_platform_network_init+0x100>
 8003544:	4605      	mov	r5, r0
 8003546:	460c      	mov	r4, r1
 8003548:	2900      	cmp	r1, #0
 800354a:	f000 8099 	beq.w	8003680 <ai_platform_network_init+0x17c>
 800354e:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8003550:	690e      	ldr	r6, [r1, #16]
 8003552:	2f00      	cmp	r7, #0
 8003554:	f000 8083 	beq.w	800365e <ai_platform_network_init+0x15a>
 8003558:	b346      	cbz	r6, 80035ac <ai_platform_network_init+0xa8>
 800355a:	f105 0c18 	add.w	ip, r5, #24
 800355e:	f104 0718 	add.w	r7, r4, #24
 8003562:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8003566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800356c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003570:	2403      	movs	r4, #3
 8003572:	e88c 0003 	stmia.w	ip, {r0, r1}
 8003576:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003578:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800357a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800357e:	e886 0003 	stmia.w	r6, {r0, r1}
 8003582:	60ec      	str	r4, [r5, #12]
 8003584:	4628      	mov	r0, r5
 8003586:	f000 fd35 	bl	8003ff4 <ai_layers_init_all>
 800358a:	4628      	mov	r0, r5
 800358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800358e:	4b44      	ldr	r3, [pc, #272]	; (80036a0 <ai_platform_network_init+0x19c>)
 8003590:	2201      	movs	r2, #1
 8003592:	461c      	mov	r4, r3
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1fc      	bne.n	8003596 <ai_platform_network_init+0x92>
 800359c:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <ai_platform_network_init+0x1a0>)
 800359e:	4c42      	ldr	r4, [pc, #264]	; (80036a8 <ai_platform_network_init+0x1a4>)
 80035a0:	4a42      	ldr	r2, [pc, #264]	; (80036ac <ai_platform_network_init+0x1a8>)
 80035a2:	601c      	str	r4, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d0cc      	beq.n	8003544 <ai_platform_network_init+0x40>
 80035aa:	e7fe      	b.n	80035aa <ai_platform_network_init+0xa6>
 80035ac:	8921      	ldrh	r1, [r4, #8]
 80035ae:	88e2      	ldrh	r2, [r4, #6]
 80035b0:	68e3      	ldr	r3, [r4, #12]
 80035b2:	fb02 f201 	mul.w	r2, r2, r1
 80035b6:	fb03 f302 	mul.w	r3, r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0cd      	beq.n	800355a <ai_platform_network_init+0x56>
 80035be:	f105 0010 	add.w	r0, r5, #16
 80035c2:	2212      	movs	r2, #18
 80035c4:	2110      	movs	r1, #16
 80035c6:	f000 fbd9 	bl	8003d7c <core_set_error>
 80035ca:	4630      	mov	r0, r6
 80035cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ce:	4a31      	ldr	r2, [pc, #196]	; (8003694 <ai_platform_network_init+0x190>)
 80035d0:	4931      	ldr	r1, [pc, #196]	; (8003698 <ai_platform_network_init+0x194>)
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	680b      	ldr	r3, [r1, #0]
 80035dc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80035e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035e4:	185a      	adds	r2, r3, r1
 80035e6:	2a01      	cmp	r2, #1
 80035e8:	d91b      	bls.n	8003622 <ai_platform_network_init+0x11e>
 80035ea:	f240 4249 	movw	r2, #1097	; 0x449
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d017      	beq.n	8003622 <ai_platform_network_init+0x11e>
 80035f2:	4b2a      	ldr	r3, [pc, #168]	; (800369c <ai_platform_network_init+0x198>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035fa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80035fe:	d01f      	beq.n	8003640 <ai_platform_network_init+0x13c>
 8003600:	2000      	movs	r0, #0
 8003602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003604:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <ai_platform_network_init+0x1ac>)
 8003606:	2201      	movs	r2, #1
 8003608:	461c      	mov	r4, r3
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1fc      	bne.n	800360c <ai_platform_network_init+0x108>
 8003612:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <ai_platform_network_init+0x1b0>)
 8003614:	4c24      	ldr	r4, [pc, #144]	; (80036a8 <ai_platform_network_init+0x1a4>)
 8003616:	4a25      	ldr	r2, [pc, #148]	; (80036ac <ai_platform_network_init+0x1a8>)
 8003618:	601c      	str	r4, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4293      	cmp	r3, r2
 800361e:	d091      	beq.n	8003544 <ai_platform_network_init+0x40>
 8003620:	e7fe      	b.n	8003620 <ai_platform_network_init+0x11c>
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <ai_platform_network_init+0x19c>)
 8003624:	2201      	movs	r2, #1
 8003626:	4619      	mov	r1, r3
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	680b      	ldr	r3, [r1, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1fc      	bne.n	800362a <ai_platform_network_init+0x126>
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <ai_platform_network_init+0x1a0>)
 8003632:	491d      	ldr	r1, [pc, #116]	; (80036a8 <ai_platform_network_init+0x1a4>)
 8003634:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <ai_platform_network_init+0x1a8>)
 8003636:	6019      	str	r1, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4293      	cmp	r3, r2
 800363c:	d0e0      	beq.n	8003600 <ai_platform_network_init+0xfc>
 800363e:	e7fe      	b.n	800363e <ai_platform_network_init+0x13a>
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <ai_platform_network_init+0x1ac>)
 8003642:	2201      	movs	r2, #1
 8003644:	4619      	mov	r1, r3
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	680b      	ldr	r3, [r1, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1fc      	bne.n	8003648 <ai_platform_network_init+0x144>
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <ai_platform_network_init+0x1b0>)
 8003650:	4915      	ldr	r1, [pc, #84]	; (80036a8 <ai_platform_network_init+0x1a4>)
 8003652:	4a16      	ldr	r2, [pc, #88]	; (80036ac <ai_platform_network_init+0x1a8>)
 8003654:	6019      	str	r1, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4293      	cmp	r3, r2
 800365a:	d0d1      	beq.n	8003600 <ai_platform_network_init+0xfc>
 800365c:	e7fe      	b.n	800365c <ai_platform_network_init+0x158>
 800365e:	8c09      	ldrh	r1, [r1, #32]
 8003660:	8be2      	ldrh	r2, [r4, #30]
 8003662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003664:	fb02 f201 	mul.w	r2, r2, r1
 8003668:	fb03 f302 	mul.w	r3, r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f43f af73 	beq.w	8003558 <ai_platform_network_init+0x54>
 8003672:	2213      	movs	r2, #19
 8003674:	2110      	movs	r1, #16
 8003676:	3010      	adds	r0, #16
 8003678:	f000 fb80 	bl	8003d7c <core_set_error>
 800367c:	4638      	mov	r0, r7
 800367e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003680:	2211      	movs	r2, #17
 8003682:	2110      	movs	r1, #16
 8003684:	3010      	adds	r0, #16
 8003686:	f000 fb79 	bl	8003d7c <core_set_error>
 800368a:	4620      	mov	r0, r4
 800368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800368e:	bf00      	nop
 8003690:	a1c00100 	.word	0xa1c00100
 8003694:	e0002000 	.word	0xe0002000
 8003698:	e0042000 	.word	0xe0042000
 800369c:	5c001000 	.word	0x5c001000
 80036a0:	40023008 	.word	0x40023008
 80036a4:	40023000 	.word	0x40023000
 80036a8:	f407a5c2 	.word	0xf407a5c2
 80036ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80036b0:	58024c08 	.word	0x58024c08
 80036b4:	58024c00 	.word	0x58024c00

080036b8 <ai_platform_network_post_init>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	b118      	cbz	r0, 80036c4 <ai_platform_network_post_init+0xc>
 80036bc:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <ai_platform_network_post_init+0x134>)
 80036be:	6802      	ldr	r2, [r0, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d029      	beq.n	8003718 <ai_platform_network_post_init+0x60>
 80036c4:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <ai_platform_network_post_init+0x138>)
 80036c6:	494b      	ldr	r1, [pc, #300]	; (80037f4 <ai_platform_network_post_init+0x13c>)
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	680b      	ldr	r3, [r1, #0]
 80036d2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80036d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036da:	185a      	adds	r2, r3, r1
 80036dc:	2a01      	cmp	r2, #1
 80036de:	d90c      	bls.n	80036fa <ai_platform_network_post_init+0x42>
 80036e0:	f240 4249 	movw	r2, #1097	; 0x449
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d008      	beq.n	80036fa <ai_platform_network_post_init+0x42>
 80036e8:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <ai_platform_network_post_init+0x140>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80036f4:	d046      	beq.n	8003784 <ai_platform_network_post_init+0xcc>
 80036f6:	2000      	movs	r0, #0
 80036f8:	bd38      	pop	{r3, r4, r5, pc}
 80036fa:	4b40      	ldr	r3, [pc, #256]	; (80037fc <ai_platform_network_post_init+0x144>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	4619      	mov	r1, r3
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	680b      	ldr	r3, [r1, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1fc      	bne.n	8003702 <ai_platform_network_post_init+0x4a>
 8003708:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <ai_platform_network_post_init+0x148>)
 800370a:	493e      	ldr	r1, [pc, #248]	; (8003804 <ai_platform_network_post_init+0x14c>)
 800370c:	4a3e      	ldr	r2, [pc, #248]	; (8003808 <ai_platform_network_post_init+0x150>)
 800370e:	6019      	str	r1, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4293      	cmp	r3, r2
 8003714:	d0ef      	beq.n	80036f6 <ai_platform_network_post_init+0x3e>
 8003716:	e7fe      	b.n	8003716 <ai_platform_network_post_init+0x5e>
 8003718:	4a35      	ldr	r2, [pc, #212]	; (80037f0 <ai_platform_network_post_init+0x138>)
 800371a:	4936      	ldr	r1, [pc, #216]	; (80037f4 <ai_platform_network_post_init+0x13c>)
 800371c:	6813      	ldr	r3, [r2, #0]
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003728:	680b      	ldr	r3, [r1, #0]
 800372a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800372e:	189a      	adds	r2, r3, r2
 8003730:	2a01      	cmp	r2, #1
 8003732:	d94c      	bls.n	80037ce <ai_platform_network_post_init+0x116>
 8003734:	f240 4249 	movw	r2, #1097	; 0x449
 8003738:	4293      	cmp	r3, r2
 800373a:	d048      	beq.n	80037ce <ai_platform_network_post_init+0x116>
 800373c:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <ai_platform_network_post_init+0x140>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003744:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003748:	d032      	beq.n	80037b0 <ai_platform_network_post_init+0xf8>
 800374a:	68c3      	ldr	r3, [r0, #12]
 800374c:	4604      	mov	r4, r0
 800374e:	f013 0502 	ands.w	r5, r3, #2
 8003752:	d026      	beq.n	80037a2 <ai_platform_network_post_init+0xea>
 8003754:	f000 fc62 	bl	800401c <ai_layers_post_init_all>
 8003758:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800375a:	b18b      	cbz	r3, 8003780 <ai_platform_network_post_init+0xc8>
 800375c:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800375e:	b90d      	cbnz	r5, 8003764 <ai_platform_network_post_init+0xac>
 8003760:	e00e      	b.n	8003780 <ai_platform_network_post_init+0xc8>
 8003762:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003764:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003766:	4629      	mov	r1, r5
 8003768:	2000      	movs	r0, #0
 800376a:	4798      	blx	r3
 800376c:	692a      	ldr	r2, [r5, #16]
 800376e:	1b53      	subs	r3, r2, r5
 8003770:	4615      	mov	r5, r2
 8003772:	bf18      	it	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2a00      	cmp	r2, #0
 8003778:	bf08      	it	eq
 800377a:	2300      	moveq	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <ai_platform_network_post_init+0xaa>
 8003780:	2001      	movs	r0, #1
 8003782:	bd38      	pop	{r3, r4, r5, pc}
 8003784:	4b21      	ldr	r3, [pc, #132]	; (800380c <ai_platform_network_post_init+0x154>)
 8003786:	2201      	movs	r2, #1
 8003788:	4619      	mov	r1, r3
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	680b      	ldr	r3, [r1, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1fc      	bne.n	800378c <ai_platform_network_post_init+0xd4>
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <ai_platform_network_post_init+0x158>)
 8003794:	491b      	ldr	r1, [pc, #108]	; (8003804 <ai_platform_network_post_init+0x14c>)
 8003796:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <ai_platform_network_post_init+0x150>)
 8003798:	6019      	str	r1, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4293      	cmp	r3, r2
 800379e:	d0aa      	beq.n	80036f6 <ai_platform_network_post_init+0x3e>
 80037a0:	e7fe      	b.n	80037a0 <ai_platform_network_post_init+0xe8>
 80037a2:	2210      	movs	r2, #16
 80037a4:	2111      	movs	r1, #17
 80037a6:	3010      	adds	r0, #16
 80037a8:	f000 fae8 	bl	8003d7c <core_set_error>
 80037ac:	4628      	mov	r0, r5
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	4b16      	ldr	r3, [pc, #88]	; (800380c <ai_platform_network_post_init+0x154>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	4619      	mov	r1, r3
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	680b      	ldr	r3, [r1, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1fc      	bne.n	80037b8 <ai_platform_network_post_init+0x100>
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <ai_platform_network_post_init+0x158>)
 80037c0:	4910      	ldr	r1, [pc, #64]	; (8003804 <ai_platform_network_post_init+0x14c>)
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <ai_platform_network_post_init+0x150>)
 80037c4:	6019      	str	r1, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d0be      	beq.n	800374a <ai_platform_network_post_init+0x92>
 80037cc:	e7fe      	b.n	80037cc <ai_platform_network_post_init+0x114>
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <ai_platform_network_post_init+0x144>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	4619      	mov	r1, r3
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	680b      	ldr	r3, [r1, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1fc      	bne.n	80037d6 <ai_platform_network_post_init+0x11e>
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <ai_platform_network_post_init+0x148>)
 80037de:	4909      	ldr	r1, [pc, #36]	; (8003804 <ai_platform_network_post_init+0x14c>)
 80037e0:	4a09      	ldr	r2, [pc, #36]	; (8003808 <ai_platform_network_post_init+0x150>)
 80037e2:	6019      	str	r1, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d0af      	beq.n	800374a <ai_platform_network_post_init+0x92>
 80037ea:	e7fe      	b.n	80037ea <ai_platform_network_post_init+0x132>
 80037ec:	a1c00100 	.word	0xa1c00100
 80037f0:	e0002000 	.word	0xe0002000
 80037f4:	e0042000 	.word	0xe0042000
 80037f8:	5c001000 	.word	0x5c001000
 80037fc:	40023008 	.word	0x40023008
 8003800:	40023000 	.word	0x40023000
 8003804:	f407a5c2 	.word	0xf407a5c2
 8003808:	b5e8b5cd 	.word	0xb5e8b5cd
 800380c:	58024c08 	.word	0x58024c08
 8003810:	58024c00 	.word	0x58024c00

08003814 <ai_platform_network_process>:
 8003814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003818:	4617      	mov	r7, r2
 800381a:	b083      	sub	sp, #12
 800381c:	4604      	mov	r4, r0
 800381e:	b120      	cbz	r0, 800382a <ai_platform_network_process+0x16>
 8003820:	4b89      	ldr	r3, [pc, #548]	; (8003a48 <ai_platform_network_process+0x234>)
 8003822:	6802      	ldr	r2, [r0, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	bf18      	it	ne
 8003828:	2400      	movne	r4, #0
 800382a:	4a88      	ldr	r2, [pc, #544]	; (8003a4c <ai_platform_network_process+0x238>)
 800382c:	4888      	ldr	r0, [pc, #544]	; (8003a50 <ai_platform_network_process+0x23c>)
 800382e:	6813      	ldr	r3, [r2, #0]
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	6803      	ldr	r3, [r0, #0]
 8003838:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800383c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003840:	181a      	adds	r2, r3, r0
 8003842:	2a01      	cmp	r2, #1
 8003844:	f240 80cc 	bls.w	80039e0 <ai_platform_network_process+0x1cc>
 8003848:	f240 4249 	movw	r2, #1097	; 0x449
 800384c:	4293      	cmp	r3, r2
 800384e:	f000 80c7 	beq.w	80039e0 <ai_platform_network_process+0x1cc>
 8003852:	4b80      	ldr	r3, [pc, #512]	; (8003a54 <ai_platform_network_process+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800385a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800385e:	f000 80af 	beq.w	80039c0 <ai_platform_network_process+0x1ac>
 8003862:	2c00      	cmp	r4, #0
 8003864:	f000 80e1 	beq.w	8003a2a <ai_platform_network_process+0x216>
 8003868:	68e2      	ldr	r2, [r4, #12]
 800386a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800386e:	f002 0203 	and.w	r2, r2, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 80c4 	beq.w	8003a00 <ai_platform_network_process+0x1ec>
 8003878:	2000      	movs	r0, #0
 800387a:	2a03      	cmp	r2, #3
 800387c:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 8003880:	6160      	str	r0, [r4, #20]
 8003882:	f040 80cc 	bne.w	8003a1e <ai_platform_network_process+0x20a>
 8003886:	2900      	cmp	r1, #0
 8003888:	f000 80bd 	beq.w	8003a06 <ai_platform_network_process+0x1f2>
 800388c:	faba f28a 	clz	r2, sl
 8003890:	0952      	lsrs	r2, r2, #5
 8003892:	2a00      	cmp	r2, #0
 8003894:	f040 80b7 	bne.w	8003a06 <ai_platform_network_process+0x1f2>
 8003898:	f8ba 0000 	ldrh.w	r0, [sl]
 800389c:	2800      	cmp	r0, #0
 800389e:	f000 80b2 	beq.w	8003a06 <ai_platform_network_process+0x1f2>
 80038a2:	888d      	ldrh	r5, [r1, #4]
 80038a4:	f8da 0004 	ldr.w	r0, [sl, #4]
 80038a8:	9501      	str	r5, [sp, #4]
 80038aa:	2800      	cmp	r0, #0
 80038ac:	f000 80e2 	beq.w	8003a74 <ai_platform_network_process+0x260>
 80038b0:	6806      	ldr	r6, [r0, #0]
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	f000 80de 	beq.w	8003a74 <ai_platform_network_process+0x260>
 80038b8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80038bc:	f8d3 9000 	ldr.w	r9, [r3]
 80038c0:	f1b9 0f00 	cmp.w	r9, #0
 80038c4:	f000 809f 	beq.w	8003a06 <ai_platform_network_process+0x1f2>
 80038c8:	460d      	mov	r5, r1
 80038ca:	4690      	mov	r8, r2
 80038cc:	e061      	b.n	8003992 <ai_platform_network_process+0x17e>
 80038ce:	68f3      	ldr	r3, [r6, #12]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	455a      	cmp	r2, fp
 80038d4:	d16b      	bne.n	80039ae <ai_platform_network_process+0x19a>
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	4572      	cmp	r2, lr
 80038da:	d168      	bne.n	80039ae <ai_platform_network_process+0x19a>
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	459c      	cmp	ip, r3
 80038e0:	d165      	bne.n	80039ae <ai_platform_network_process+0x19a>
 80038e2:	6800      	ldr	r0, [r0, #0]
 80038e4:	f001 f966 	bl	8004bb4 <ai_array_get_byte_size>
 80038e8:	68f2      	ldr	r2, [r6, #12]
 80038ea:	6973      	ldr	r3, [r6, #20]
 80038ec:	68d2      	ldr	r2, [r2, #12]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	fb03 f302 	mul.w	r3, r3, r2
 80038f4:	4298      	cmp	r0, r3
 80038f6:	d35a      	bcc.n	80039ae <ai_platform_network_process+0x19a>
 80038f8:	69b3      	ldr	r3, [r6, #24]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	f001 f90e 	bl	8004b1c <ai_array_to_buffer_fmt>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	4043      	eors	r3, r0
 8003904:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8003908:	f040 8226 	bne.w	8003d58 <ai_platform_network_process+0x544>
 800390c:	692b      	ldr	r3, [r5, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 821a 	beq.w	8003d48 <ai_platform_network_process+0x534>
 8003914:	88ab      	ldrh	r3, [r5, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 808d 	beq.w	8003a36 <ai_platform_network_process+0x222>
 800391c:	9a01      	ldr	r2, [sp, #4]
 800391e:	68f1      	ldr	r1, [r6, #12]
 8003920:	429a      	cmp	r2, r3
 8003922:	68c9      	ldr	r1, [r1, #12]
 8003924:	bf38      	it	cc
 8003926:	461a      	movcc	r2, r3
 8003928:	9201      	str	r2, [sp, #4]
 800392a:	6972      	ldr	r2, [r6, #20]
 800392c:	68d3      	ldr	r3, [r2, #12]
 800392e:	fb03 f301 	mul.w	r3, r3, r1
 8003932:	f8c9 3008 	str.w	r3, [r9, #8]
 8003936:	88aa      	ldrh	r2, [r5, #4]
 8003938:	fb03 f302 	mul.w	r3, r3, r2
 800393c:	f8c9 300c 	str.w	r3, [r9, #12]
 8003940:	6929      	ldr	r1, [r5, #16]
 8003942:	f8c9 1004 	str.w	r1, [r9, #4]
 8003946:	692a      	ldr	r2, [r5, #16]
 8003948:	4413      	add	r3, r2
 800394a:	f8c9 3000 	str.w	r3, [r9]
 800394e:	69b0      	ldr	r0, [r6, #24]
 8003950:	6803      	ldr	r3, [r0, #0]
 8003952:	009a      	lsls	r2, r3, #2
 8003954:	d408      	bmi.n	8003968 <ai_platform_network_process+0x154>
 8003956:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	4419      	add	r1, r3
 800395e:	6081      	str	r1, [r0, #8]
 8003960:	69b3      	ldr	r3, [r6, #24]
 8003962:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	f108 0801 	add.w	r8, r8, #1
 800396c:	f8ba 3000 	ldrh.w	r3, [sl]
 8003970:	4598      	cmp	r8, r3
 8003972:	d27d      	bcs.n	8003a70 <ai_platform_network_process+0x25c>
 8003974:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d079      	beq.n	8003a70 <ai_platform_network_process+0x25c>
 800397c:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8003980:	2e00      	cmp	r6, #0
 8003982:	d075      	beq.n	8003a70 <ai_platform_network_process+0x25c>
 8003984:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003988:	3518      	adds	r5, #24
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8003990:	d039      	beq.n	8003a06 <ai_platform_network_process+0x1f2>
 8003992:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8003996:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800399a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800399e:	fb0b f30e 	mul.w	r3, fp, lr
 80039a2:	69b0      	ldr	r0, [r6, #24]
 80039a4:	fb0c f303 	mul.w	r3, ip, r3
 80039a8:	6841      	ldr	r1, [r0, #4]
 80039aa:	4299      	cmp	r1, r3
 80039ac:	d28f      	bcs.n	80038ce <ai_platform_network_process+0xba>
 80039ae:	f104 0010 	add.w	r0, r4, #16
 80039b2:	2218      	movs	r2, #24
 80039b4:	2112      	movs	r1, #18
 80039b6:	f04f 0b00 	mov.w	fp, #0
 80039ba:	f000 f9df 	bl	8003d7c <core_set_error>
 80039be:	e02a      	b.n	8003a16 <ai_platform_network_process+0x202>
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <ai_platform_network_process+0x244>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	6803      	ldr	r3, [r0, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1fc      	bne.n	80039c8 <ai_platform_network_process+0x1b4>
 80039ce:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <ai_platform_network_process+0x248>)
 80039d0:	4823      	ldr	r0, [pc, #140]	; (8003a60 <ai_platform_network_process+0x24c>)
 80039d2:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <ai_platform_network_process+0x250>)
 80039d4:	6018      	str	r0, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4293      	cmp	r3, r2
 80039da:	f43f af42 	beq.w	8003862 <ai_platform_network_process+0x4e>
 80039de:	e7fe      	b.n	80039de <ai_platform_network_process+0x1ca>
 80039e0:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <ai_platform_network_process+0x254>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	6803      	ldr	r3, [r0, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1fc      	bne.n	80039e8 <ai_platform_network_process+0x1d4>
 80039ee:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <ai_platform_network_process+0x258>)
 80039f0:	481b      	ldr	r0, [pc, #108]	; (8003a60 <ai_platform_network_process+0x24c>)
 80039f2:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <ai_platform_network_process+0x250>)
 80039f4:	6018      	str	r0, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4293      	cmp	r3, r2
 80039fa:	f43f af32 	beq.w	8003862 <ai_platform_network_process+0x4e>
 80039fe:	e7fe      	b.n	80039fe <ai_platform_network_process+0x1ea>
 8003a00:	2a03      	cmp	r2, #3
 8003a02:	6163      	str	r3, [r4, #20]
 8003a04:	d10b      	bne.n	8003a1e <ai_platform_network_process+0x20a>
 8003a06:	f04f 0b00 	mov.w	fp, #0
 8003a0a:	f104 0010 	add.w	r0, r4, #16
 8003a0e:	2217      	movs	r2, #23
 8003a10:	2112      	movs	r1, #18
 8003a12:	f000 f9b3 	bl	8003d7c <core_set_error>
 8003a16:	4658      	mov	r0, fp
 8003a18:	b003      	add	sp, #12
 8003a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a1e:	f104 0010 	add.w	r0, r4, #16
 8003a22:	2230      	movs	r2, #48	; 0x30
 8003a24:	2111      	movs	r1, #17
 8003a26:	f000 f9a9 	bl	8003d7c <core_set_error>
 8003a2a:	f04f 0b00 	mov.w	fp, #0
 8003a2e:	4658      	mov	r0, fp
 8003a30:	b003      	add	sp, #12
 8003a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a36:	f104 0010 	add.w	r0, r4, #16
 8003a3a:	2221      	movs	r2, #33	; 0x21
 8003a3c:	2112      	movs	r1, #18
 8003a3e:	469b      	mov	fp, r3
 8003a40:	f000 f99c 	bl	8003d7c <core_set_error>
 8003a44:	e7e7      	b.n	8003a16 <ai_platform_network_process+0x202>
 8003a46:	bf00      	nop
 8003a48:	a1c00100 	.word	0xa1c00100
 8003a4c:	e0002000 	.word	0xe0002000
 8003a50:	e0042000 	.word	0xe0042000
 8003a54:	5c001000 	.word	0x5c001000
 8003a58:	58024c08 	.word	0x58024c08
 8003a5c:	58024c00 	.word	0x58024c00
 8003a60:	f407a5c2 	.word	0xf407a5c2
 8003a64:	b5e8b5cd 	.word	0xb5e8b5cd
 8003a68:	40023008 	.word	0x40023008
 8003a6c:	40023000 	.word	0x40023000
 8003a70:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	f000 80ab 	beq.w	8003bd0 <ai_platform_network_process+0x3bc>
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	f240 809c 	bls.w	8003bb8 <ai_platform_network_process+0x3a4>
 8003a80:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 8003a84:	f11a 0f0c 	cmn.w	sl, #12
 8003a88:	f000 8096 	beq.w	8003bb8 <ai_platform_network_process+0x3a4>
 8003a8c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8091 	beq.w	8003bb8 <ai_platform_network_process+0x3a4>
 8003a96:	463d      	mov	r5, r7
 8003a98:	f04f 0900 	mov.w	r9, #0
 8003a9c:	9400      	str	r4, [sp, #0]
 8003a9e:	4599      	cmp	r9, r3
 8003aa0:	f080 8093 	bcs.w	8003bca <ai_platform_network_process+0x3b6>
 8003aa4:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 808e 	beq.w	8003bca <ai_platform_network_process+0x3b6>
 8003aae:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8003ab2:	2e00      	cmp	r6, #0
 8003ab4:	f000 8089 	beq.w	8003bca <ai_platform_network_process+0x3b6>
 8003ab8:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003abc:	ea4f 1409 	mov.w	r4, r9, lsl #4
 8003ac0:	f8d3 8000 	ldr.w	r8, [r3]
 8003ac4:	eb18 0704 	adds.w	r7, r8, r4
 8003ac8:	f000 8135 	beq.w	8003d36 <ai_platform_network_process+0x522>
 8003acc:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8003ad0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8003ad4:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8003ad8:	fb0b f30e 	mul.w	r3, fp, lr
 8003adc:	69b0      	ldr	r0, [r6, #24]
 8003ade:	fb0c f303 	mul.w	r3, ip, r3
 8003ae2:	6841      	ldr	r1, [r0, #4]
 8003ae4:	4299      	cmp	r1, r3
 8003ae6:	d366      	bcc.n	8003bb6 <ai_platform_network_process+0x3a2>
 8003ae8:	68f3      	ldr	r3, [r6, #12]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	455a      	cmp	r2, fp
 8003aee:	d162      	bne.n	8003bb6 <ai_platform_network_process+0x3a2>
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	4572      	cmp	r2, lr
 8003af4:	d15f      	bne.n	8003bb6 <ai_platform_network_process+0x3a2>
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	459c      	cmp	ip, r3
 8003afa:	d15c      	bne.n	8003bb6 <ai_platform_network_process+0x3a2>
 8003afc:	6800      	ldr	r0, [r0, #0]
 8003afe:	f001 f859 	bl	8004bb4 <ai_array_get_byte_size>
 8003b02:	68f2      	ldr	r2, [r6, #12]
 8003b04:	6973      	ldr	r3, [r6, #20]
 8003b06:	68d2      	ldr	r2, [r2, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	fb03 f302 	mul.w	r3, r3, r2
 8003b0e:	4298      	cmp	r0, r3
 8003b10:	d351      	bcc.n	8003bb6 <ai_platform_network_process+0x3a2>
 8003b12:	69b3      	ldr	r3, [r6, #24]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	f001 f801 	bl	8004b1c <ai_array_to_buffer_fmt>
 8003b1a:	682b      	ldr	r3, [r5, #0]
 8003b1c:	4043      	eors	r3, r0
 8003b1e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8003b22:	d13e      	bne.n	8003ba2 <ai_platform_network_process+0x38e>
 8003b24:	692b      	ldr	r3, [r5, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d032      	beq.n	8003b90 <ai_platform_network_process+0x37c>
 8003b2a:	88ab      	ldrh	r3, [r5, #4]
 8003b2c:	b33b      	cbz	r3, 8003b7e <ai_platform_network_process+0x36a>
 8003b2e:	9a01      	ldr	r2, [sp, #4]
 8003b30:	68f1      	ldr	r1, [r6, #12]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	68c9      	ldr	r1, [r1, #12]
 8003b36:	bf38      	it	cc
 8003b38:	461a      	movcc	r2, r3
 8003b3a:	9201      	str	r2, [sp, #4]
 8003b3c:	6972      	ldr	r2, [r6, #20]
 8003b3e:	68d3      	ldr	r3, [r2, #12]
 8003b40:	fb03 f301 	mul.w	r3, r3, r1
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	88aa      	ldrh	r2, [r5, #4]
 8003b48:	fb03 f302 	mul.w	r3, r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	6929      	ldr	r1, [r5, #16]
 8003b50:	6079      	str	r1, [r7, #4]
 8003b52:	692a      	ldr	r2, [r5, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f848 3004 	str.w	r3, [r8, r4]
 8003b5a:	69b0      	ldr	r0, [r6, #24]
 8003b5c:	6803      	ldr	r3, [r0, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	d407      	bmi.n	8003b72 <ai_platform_network_process+0x35e>
 8003b62:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	4419      	add	r1, r3
 8003b6a:	6081      	str	r1, [r0, #8]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	69b3      	ldr	r3, [r6, #24]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	f109 0901 	add.w	r9, r9, #1
 8003b76:	3518      	adds	r5, #24
 8003b78:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003b7c:	e78f      	b.n	8003a9e <ai_platform_network_process+0x28a>
 8003b7e:	9c00      	ldr	r4, [sp, #0]
 8003b80:	2221      	movs	r2, #33	; 0x21
 8003b82:	2113      	movs	r1, #19
 8003b84:	469b      	mov	fp, r3
 8003b86:	f104 0010 	add.w	r0, r4, #16
 8003b8a:	f000 f8f7 	bl	8003d7c <core_set_error>
 8003b8e:	e742      	b.n	8003a16 <ai_platform_network_process+0x202>
 8003b90:	9c00      	ldr	r4, [sp, #0]
 8003b92:	2217      	movs	r2, #23
 8003b94:	2113      	movs	r1, #19
 8003b96:	469b      	mov	fp, r3
 8003b98:	f104 0010 	add.w	r0, r4, #16
 8003b9c:	f000 f8ee 	bl	8003d7c <core_set_error>
 8003ba0:	e739      	b.n	8003a16 <ai_platform_network_process+0x202>
 8003ba2:	9c00      	ldr	r4, [sp, #0]
 8003ba4:	2219      	movs	r2, #25
 8003ba6:	2113      	movs	r1, #19
 8003ba8:	f04f 0b00 	mov.w	fp, #0
 8003bac:	f104 0010 	add.w	r0, r4, #16
 8003bb0:	f000 f8e4 	bl	8003d7c <core_set_error>
 8003bb4:	e72f      	b.n	8003a16 <ai_platform_network_process+0x202>
 8003bb6:	9c00      	ldr	r4, [sp, #0]
 8003bb8:	f104 0010 	add.w	r0, r4, #16
 8003bbc:	2218      	movs	r2, #24
 8003bbe:	2113      	movs	r1, #19
 8003bc0:	f04f 0b00 	mov.w	fp, #0
 8003bc4:	f000 f8da 	bl	8003d7c <core_set_error>
 8003bc8:	e725      	b.n	8003a16 <ai_platform_network_process+0x202>
 8003bca:	9c00      	ldr	r4, [sp, #0]
 8003bcc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8003bd0:	9a01      	ldr	r2, [sp, #4]
 8003bd2:	82a2      	strh	r2, [r4, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a9 	beq.w	8003d2c <ai_platform_network_process+0x518>
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003bde:	f240 80a8 	bls.w	8003d32 <ai_platform_network_process+0x51e>
 8003be2:	f105 060c 	add.w	r6, r5, #12
 8003be6:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8003bea:	8aa3      	ldrh	r3, [r4, #20]
 8003bec:	455b      	cmp	r3, fp
 8003bee:	f67f af12 	bls.w	8003a16 <ai_platform_network_process+0x202>
 8003bf2:	9400      	str	r4, [sp, #0]
 8003bf4:	2d00      	cmp	r5, #0
 8003bf6:	d037      	beq.n	8003c68 <ai_platform_network_process+0x454>
 8003bf8:	882b      	ldrh	r3, [r5, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d034      	beq.n	8003c68 <ai_platform_network_process+0x454>
 8003bfe:	686b      	ldr	r3, [r5, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d031      	beq.n	8003c68 <ai_platform_network_process+0x454>
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d02e      	beq.n	8003c68 <ai_platform_network_process+0x454>
 8003c0a:	f04f 0800 	mov.w	r8, #0
 8003c0e:	e01a      	b.n	8003c46 <ai_platform_network_process+0x432>
 8003c10:	68d4      	ldr	r4, [r2, #12]
 8003c12:	1b00      	subs	r0, r0, r4
 8003c14:	4401      	add	r1, r0
 8003c16:	6091      	str	r1, [r2, #8]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f108 0801 	add.w	r8, r8, #1
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	f85a 2009 	ldr.w	r2, [sl, r9]
 8003c2a:	440b      	add	r3, r1
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d301      	bcc.n	8003c34 <ai_platform_network_process+0x420>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	882b      	ldrh	r3, [r5, #0]
 8003c38:	4598      	cmp	r8, r3
 8003c3a:	d215      	bcs.n	8003c68 <ai_platform_network_process+0x454>
 8003c3c:	686b      	ldr	r3, [r5, #4]
 8003c3e:	b19b      	cbz	r3, 8003c68 <ai_platform_network_process+0x454>
 8003c40:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003c44:	b183      	cbz	r3, 8003c68 <ai_platform_network_process+0x454>
 8003c46:	68a9      	ldr	r1, [r5, #8]
 8003c48:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	f8d1 a000 	ldr.w	sl, [r1]
 8003c52:	6814      	ldr	r4, [r2, #0]
 8003c54:	eb0a 0709 	add.w	r7, sl, r9
 8003c58:	6890      	ldr	r0, [r2, #8]
 8003c5a:	00a4      	lsls	r4, r4, #2
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	d5d7      	bpl.n	8003c10 <ai_platform_network_process+0x3fc>
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	f001 f801 	bl	8004c68 <memcpy>
 8003c66:	e7da      	b.n	8003c1e <ai_platform_network_process+0x40a>
 8003c68:	9800      	ldr	r0, [sp, #0]
 8003c6a:	f000 f9ed 	bl	8004048 <ai_layers_forward_all>
 8003c6e:	2e00      	cmp	r6, #0
 8003c70:	d04a      	beq.n	8003d08 <ai_platform_network_process+0x4f4>
 8003c72:	8833      	ldrh	r3, [r6, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d047      	beq.n	8003d08 <ai_platform_network_process+0x4f4>
 8003c78:	6873      	ldr	r3, [r6, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d044      	beq.n	8003d08 <ai_platform_network_process+0x4f4>
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d041      	beq.n	8003d08 <ai_platform_network_process+0x4f4>
 8003c84:	f04f 0800 	mov.w	r8, #0
 8003c88:	e019      	b.n	8003cbe <ai_platform_network_process+0x4aa>
 8003c8a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8003c8e:	4291      	cmp	r1, r2
 8003c90:	d301      	bcc.n	8003c96 <ai_platform_network_process+0x482>
 8003c92:	68f9      	ldr	r1, [r7, #12]
 8003c94:	1a51      	subs	r1, r2, r1
 8003c96:	6079      	str	r1, [r7, #4]
 8003c98:	f108 0801 	add.w	r8, r8, #1
 8003c9c:	6998      	ldr	r0, [r3, #24]
 8003c9e:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8003ca2:	1b12      	subs	r2, r2, r4
 8003ca4:	440a      	add	r2, r1
 8003ca6:	6082      	str	r2, [r0, #8]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	8833      	ldrh	r3, [r6, #0]
 8003cb0:	4598      	cmp	r8, r3
 8003cb2:	d229      	bcs.n	8003d08 <ai_platform_network_process+0x4f4>
 8003cb4:	6873      	ldr	r3, [r6, #4]
 8003cb6:	b33b      	cbz	r3, 8003d08 <ai_platform_network_process+0x4f4>
 8003cb8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003cbc:	b323      	cbz	r3, 8003d08 <ai_platform_network_process+0x4f4>
 8003cbe:	68b2      	ldr	r2, [r6, #8]
 8003cc0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8003cc4:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8003cc8:	f8d2 a000 	ldr.w	sl, [r2]
 8003ccc:	f8de 1000 	ldr.w	r1, [lr]
 8003cd0:	eb0a 0709 	add.w	r7, sl, r9
 8003cd4:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8003cd8:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8003cdc:	eb00 0102 	add.w	r1, r0, r2
 8003ce0:	d0d3      	beq.n	8003c8a <ai_platform_network_process+0x476>
 8003ce2:	f8de 1008 	ldr.w	r1, [lr, #8]
 8003ce6:	f000 ffbf 	bl	8004c68 <memcpy>
 8003cea:	f85a 2009 	ldr.w	r2, [sl, r9]
 8003cee:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8003cf2:	440b      	add	r3, r1
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d301      	bcc.n	8003cfc <ai_platform_network_process+0x4e8>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	f108 0801 	add.w	r8, r8, #1
 8003d02:	8833      	ldrh	r3, [r6, #0]
 8003d04:	4598      	cmp	r8, r3
 8003d06:	d3d5      	bcc.n	8003cb4 <ai_platform_network_process+0x4a0>
 8003d08:	9b00      	ldr	r3, [sp, #0]
 8003d0a:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	8a9b      	ldrh	r3, [r3, #20]
 8003d12:	f10b 0b01 	add.w	fp, fp, #1
 8003d16:	fa1f fb8b 	uxth.w	fp, fp
 8003d1a:	455b      	cmp	r3, fp
 8003d1c:	f8a2 b016 	strh.w	fp, [r2, #22]
 8003d20:	f63f af68 	bhi.w	8003bf4 <ai_platform_network_process+0x3e0>
 8003d24:	4658      	mov	r0, fp
 8003d26:	b003      	add	sp, #12
 8003d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2c:	461d      	mov	r5, r3
 8003d2e:	461e      	mov	r6, r3
 8003d30:	e759      	b.n	8003be6 <ai_platform_network_process+0x3d2>
 8003d32:	2600      	movs	r6, #0
 8003d34:	e757      	b.n	8003be6 <ai_platform_network_process+0x3d2>
 8003d36:	9c00      	ldr	r4, [sp, #0]
 8003d38:	2217      	movs	r2, #23
 8003d3a:	2113      	movs	r1, #19
 8003d3c:	46bb      	mov	fp, r7
 8003d3e:	f104 0010 	add.w	r0, r4, #16
 8003d42:	f000 f81b 	bl	8003d7c <core_set_error>
 8003d46:	e666      	b.n	8003a16 <ai_platform_network_process+0x202>
 8003d48:	f104 0010 	add.w	r0, r4, #16
 8003d4c:	2217      	movs	r2, #23
 8003d4e:	2112      	movs	r1, #18
 8003d50:	469b      	mov	fp, r3
 8003d52:	f000 f813 	bl	8003d7c <core_set_error>
 8003d56:	e65e      	b.n	8003a16 <ai_platform_network_process+0x202>
 8003d58:	f104 0010 	add.w	r0, r4, #16
 8003d5c:	2219      	movs	r2, #25
 8003d5e:	2112      	movs	r1, #18
 8003d60:	f04f 0b00 	mov.w	fp, #0
 8003d64:	f000 f80a 	bl	8003d7c <core_set_error>
 8003d68:	e655      	b.n	8003a16 <ai_platform_network_process+0x202>
 8003d6a:	bf00      	nop

08003d6c <core_init>:
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	4770      	bx	lr

08003d70 <core_get_error>:
 8003d70:	4603      	mov	r3, r0
 8003d72:	2200      	movs	r2, #0
 8003d74:	6800      	ldr	r0, [r0, #0]
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop

08003d7c <core_set_error>:
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	7800      	ldrb	r0, [r0, #0]
 8003d80:	b930      	cbnz	r0, 8003d90 <core_set_error+0x14>
 8003d82:	7019      	strb	r1, [r3, #0]
 8003d84:	2001      	movs	r0, #1
 8003d86:	6819      	ldr	r1, [r3, #0]
 8003d88:	f362 211f 	bfi	r1, r2, #8, #24
 8003d8c:	6019      	str	r1, [r3, #0]
 8003d8e:	4770      	bx	lr
 8003d90:	2000      	movs	r0, #0
 8003d92:	4770      	bx	lr

08003d94 <forward_dense_integer_SSSA>:
 8003d94:	6983      	ldr	r3, [r0, #24]
 8003d96:	8818      	ldrh	r0, [r3, #0]
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	f000 80a4 	beq.w	8003ee6 <forward_dense_integer_SSSA+0x152>
 8003d9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da2:	ed2d 8b02 	vpush	{d8}
 8003da6:	685c      	ldr	r4, [r3, #4]
 8003da8:	b093      	sub	sp, #76	; 0x4c
 8003daa:	6862      	ldr	r2, [r4, #4]
 8003dac:	b102      	cbz	r2, 8003db0 <forward_dense_integer_SSSA+0x1c>
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	2801      	cmp	r0, #1
 8003db2:	f240 808f 	bls.w	8003ed4 <forward_dense_integer_SSSA+0x140>
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	b103      	cbz	r3, 8003dbc <forward_dense_integer_SSSA+0x28>
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2802      	cmp	r0, #2
 8003dbe:	f000 808f 	beq.w	8003ee0 <forward_dense_integer_SSSA+0x14c>
 8003dc2:	69e5      	ldr	r5, [r4, #28]
 8003dc4:	2d00      	cmp	r5, #0
 8003dc6:	f000 80e1 	beq.w	8003f8c <forward_dense_integer_SSSA+0x1f8>
 8003dca:	6829      	ldr	r1, [r5, #0]
 8003dcc:	f114 0618 	adds.w	r6, r4, #24
 8003dd0:	d007      	beq.n	8003de2 <forward_dense_integer_SSSA+0x4e>
 8003dd2:	8b26      	ldrh	r6, [r4, #24]
 8003dd4:	2e01      	cmp	r6, #1
 8003dd6:	f240 80c7 	bls.w	8003f68 <forward_dense_integer_SSSA+0x1d4>
 8003dda:	2d00      	cmp	r5, #0
 8003ddc:	f000 80bb 	beq.w	8003f56 <forward_dense_integer_SSSA+0x1c2>
 8003de0:	686e      	ldr	r6, [r5, #4]
 8003de2:	2803      	cmp	r0, #3
 8003de4:	d079      	beq.n	8003eda <forward_dense_integer_SSSA+0x146>
 8003de6:	69b7      	ldr	r7, [r6, #24]
 8003de8:	68d8      	ldr	r0, [r3, #12]
 8003dea:	68bf      	ldr	r7, [r7, #8]
 8003dec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003dee:	68c5      	ldr	r5, [r0, #12]
 8003df0:	68d4      	ldr	r4, [r2, #12]
 8003df2:	970f      	str	r7, [sp, #60]	; 0x3c
 8003df4:	6887      	ldr	r7, [r0, #8]
 8003df6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8003dfa:	fb07 f505 	mul.w	r5, r7, r5
 8003dfe:	f8b0 b004 	ldrh.w	fp, [r0, #4]
 8003e02:	699c      	ldr	r4, [r3, #24]
 8003e04:	6997      	ldr	r7, [r2, #24]
 8003e06:	2e00      	cmp	r6, #0
 8003e08:	f000 80c6 	beq.w	8003f98 <forward_dense_integer_SSSA+0x204>
 8003e0c:	6830      	ldr	r0, [r6, #0]
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	f000 8093 	beq.w	8003f3a <forward_dense_integer_SSSA+0x1a6>
 8003e14:	6980      	ldr	r0, [r0, #24]
 8003e16:	6880      	ldr	r0, [r0, #8]
 8003e18:	900c      	str	r0, [sp, #48]	; 0x30
 8003e1a:	68a0      	ldr	r0, [r4, #8]
 8003e1c:	6816      	ldr	r6, [r2, #0]
 8003e1e:	698a      	ldr	r2, [r1, #24]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8003e26:	900d      	str	r0, [sp, #52]	; 0x34
 8003e28:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003e2c:	680c      	ldr	r4, [r1, #0]
 8003e2e:	2e00      	cmp	r6, #0
 8003e30:	d062      	beq.n	8003ef8 <forward_dense_integer_SSSA+0x164>
 8003e32:	6870      	ldr	r0, [r6, #4]
 8003e34:	4607      	mov	r7, r0
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d057      	beq.n	8003eea <forward_dense_integer_SSSA+0x156>
 8003e3a:	8871      	ldrh	r1, [r6, #2]
 8003e3c:	2900      	cmp	r1, #0
 8003e3e:	d07e      	beq.n	8003f3e <forward_dense_integer_SSSA+0x1aa>
 8003e40:	6802      	ldr	r2, [r0, #0]
 8003e42:	ed92 8a00 	vldr	s16, [r2]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 809b 	beq.w	8003f82 <forward_dense_integer_SSSA+0x1ee>
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	2900      	cmp	r1, #0
 8003e50:	d07a      	beq.n	8003f48 <forward_dense_integer_SSSA+0x1b4>
 8003e52:	8858      	ldrh	r0, [r3, #2]
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d059      	beq.n	8003f0c <forward_dense_integer_SSSA+0x178>
 8003e58:	680a      	ldr	r2, [r1, #0]
 8003e5a:	edd2 8a00 	vldr	s17, [r2]
 8003e5e:	2e00      	cmp	r6, #0
 8003e60:	f040 8084 	bne.w	8003f6c <forward_dense_integer_SSSA+0x1d8>
 8003e64:	684b      	ldr	r3, [r1, #4]
 8003e66:	f993 3000 	ldrsb.w	r3, [r3]
 8003e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8003e6c:	b114      	cbz	r4, 8003e74 <forward_dense_integer_SSSA+0xe0>
 8003e6e:	6864      	ldr	r4, [r4, #4]
 8003e70:	b104      	cbz	r4, 8003e74 <forward_dense_integer_SSSA+0xe0>
 8003e72:	6824      	ldr	r4, [r4, #0]
 8003e74:	2700      	movs	r7, #0
 8003e76:	4640      	mov	r0, r8
 8003e78:	f000 f960 	bl	800413c <arm_fully_connected_s8_get_buffer_size>
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	eef0 0a68 	vmov.f32	s1, s17
 8003e82:	ab10      	add	r3, sp, #64	; 0x40
 8003e84:	eeb0 0a48 	vmov.f32	s0, s16
 8003e88:	aa11      	add	r2, sp, #68	; 0x44
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	247f      	movs	r4, #127	; 0x7f
 8003e8e:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
 8003e92:	f000 fdd5 	bl	8004a40 <align_factor_cmsisnn>
 8003e96:	9702      	str	r7, [sp, #8]
 8003e98:	b2a9      	uxth	r1, r5
 8003e9a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003e9c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8003ea0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ea2:	9707      	str	r7, [sp, #28]
 8003ea4:	465b      	mov	r3, fp
 8003ea6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	9100      	str	r1, [sp, #0]
 8003eac:	4649      	mov	r1, r9
 8003eae:	9706      	str	r7, [sp, #24]
 8003eb0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003eb2:	900a      	str	r0, [sp, #40]	; 0x28
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	9705      	str	r7, [sp, #20]
 8003eb8:	9601      	str	r6, [sp, #4]
 8003eba:	e9cd 5408 	strd	r5, r4, [sp, #32]
 8003ebe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003ec0:	9404      	str	r4, [sp, #16]
 8003ec2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8003ec4:	9403      	str	r4, [sp, #12]
 8003ec6:	f000 f90b 	bl	80040e0 <arm_fully_connected_s8>
 8003eca:	b013      	add	sp, #76	; 0x4c
 8003ecc:	ecbd 8b02 	vpop	{d8}
 8003ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	deff      	udf	#255	; 0xff
 8003eda:	2300      	movs	r3, #0
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	deff      	udf	#255	; 0xff
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	deff      	udf	#255	; 0xff
 8003ee6:	6843      	ldr	r3, [r0, #4]
 8003ee8:	deff      	udf	#255	; 0xff
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d035      	beq.n	8003f5a <forward_dense_integer_SSSA+0x1c6>
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	b939      	cbnz	r1, 8003f02 <forward_dense_integer_SSSA+0x16e>
 8003ef2:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003ef6:	e00c      	b.n	8003f12 <forward_dense_integer_SSSA+0x17e>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d02e      	beq.n	8003f5a <forward_dense_integer_SSSA+0x1c6>
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	2900      	cmp	r1, #0
 8003f00:	d039      	beq.n	8003f76 <forward_dense_integer_SSSA+0x1e2>
 8003f02:	8858      	ldrh	r0, [r3, #2]
 8003f04:	ed9f 8a25 	vldr	s16, [pc, #148]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d1a5      	bne.n	8003e58 <forward_dense_integer_SSSA+0xc4>
 8003f0c:	2e00      	cmp	r6, #0
 8003f0e:	d035      	beq.n	8003f7c <forward_dense_integer_SSSA+0x1e8>
 8003f10:	6870      	ldr	r0, [r6, #4]
 8003f12:	4607      	mov	r7, r0
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d03b      	beq.n	8003f90 <forward_dense_integer_SSSA+0x1fc>
 8003f18:	eddf 8a20 	vldr	s17, [pc, #128]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003f1c:	8876      	ldrh	r6, [r6, #2]
 8003f1e:	b12e      	cbz	r6, 8003f2c <forward_dense_integer_SSSA+0x198>
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	f992 6000 	ldrsb.w	r6, [r2]
 8003f26:	4276      	negs	r6, r6
 8003f28:	b12b      	cbz	r3, 8003f36 <forward_dense_integer_SSSA+0x1a2>
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	b151      	cbz	r1, 8003f44 <forward_dense_integer_SSSA+0x1b0>
 8003f2e:	8858      	ldrh	r0, [r3, #2]
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d197      	bne.n	8003e64 <forward_dense_integer_SSSA+0xd0>
 8003f34:	2300      	movs	r3, #0
 8003f36:	930e      	str	r3, [sp, #56]	; 0x38
 8003f38:	e798      	b.n	8003e6c <forward_dense_integer_SSSA+0xd8>
 8003f3a:	900c      	str	r0, [sp, #48]	; 0x30
 8003f3c:	e76d      	b.n	8003e1a <forward_dense_integer_SSSA+0x86>
 8003f3e:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003f42:	e780      	b.n	8003e46 <forward_dense_integer_SSSA+0xb2>
 8003f44:	910e      	str	r1, [sp, #56]	; 0x38
 8003f46:	e791      	b.n	8003e6c <forward_dense_integer_SSSA+0xd8>
 8003f48:	2e00      	cmp	r6, #0
 8003f4a:	d1e2      	bne.n	8003f12 <forward_dense_integer_SSSA+0x17e>
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	eddf 8a13 	vldr	s17, [pc, #76]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003f52:	960e      	str	r6, [sp, #56]	; 0x38
 8003f54:	e78a      	b.n	8003e6c <forward_dense_integer_SSSA+0xd8>
 8003f56:	462e      	mov	r6, r5
 8003f58:	e743      	b.n	8003de2 <forward_dense_integer_SSSA+0x4e>
 8003f5a:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003f5e:	461e      	mov	r6, r3
 8003f60:	930e      	str	r3, [sp, #56]	; 0x38
 8003f62:	eef0 8a48 	vmov.f32	s17, s16
 8003f66:	e781      	b.n	8003e6c <forward_dense_integer_SSSA+0xd8>
 8003f68:	2600      	movs	r6, #0
 8003f6a:	e73a      	b.n	8003de2 <forward_dense_integer_SSSA+0x4e>
 8003f6c:	6877      	ldr	r7, [r6, #4]
 8003f6e:	2f00      	cmp	r7, #0
 8003f70:	d1d4      	bne.n	8003f1c <forward_dense_integer_SSSA+0x188>
 8003f72:	463e      	mov	r6, r7
 8003f74:	e7dc      	b.n	8003f30 <forward_dense_integer_SSSA+0x19c>
 8003f76:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003f7a:	e7e7      	b.n	8003f4c <forward_dense_integer_SSSA+0x1b8>
 8003f7c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003f80:	e7d8      	b.n	8003f34 <forward_dense_integer_SSSA+0x1a0>
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d0e2      	beq.n	8003f4c <forward_dense_integer_SSSA+0x1b8>
 8003f86:	eddf 8a05 	vldr	s17, [pc, #20]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003f8a:	e7c9      	b.n	8003f20 <forward_dense_integer_SSSA+0x18c>
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	e71d      	b.n	8003dcc <forward_dense_integer_SSSA+0x38>
 8003f90:	4606      	mov	r6, r0
 8003f92:	eddf 8a02 	vldr	s17, [pc, #8]	; 8003f9c <forward_dense_integer_SSSA+0x208>
 8003f96:	e7c9      	b.n	8003f2c <forward_dense_integer_SSSA+0x198>
 8003f98:	960c      	str	r6, [sp, #48]	; 0x30
 8003f9a:	e73e      	b.n	8003e1a <forward_dense_integer_SSSA+0x86>
 8003f9c:	00000000 	.word	0x00000000

08003fa0 <ai_check_custom_types>:
 8003fa0:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <ai_check_custom_types+0x50>)
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	b118      	cbz	r0, 8003fb2 <ai_check_custom_types+0x12>
 8003faa:	7803      	ldrb	r3, [r0, #0]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d002      	beq.n	8003fb6 <ai_check_custom_types+0x16>
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	b002      	add	sp, #8
 8003fb4:	4770      	bx	lr
 8003fb6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <ai_check_custom_types+0x28>
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	f080 0001 	eor.w	r0, r0, #1
 8003fc4:	b002      	add	sp, #8
 8003fc6:	4770      	bx	lr
 8003fc8:	7842      	ldrb	r2, [r0, #1]
 8003fca:	3001      	adds	r0, #1
 8003fcc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1f4      	bne.n	8003fbe <ai_check_custom_types+0x1e>
 8003fd4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003fd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1ee      	bne.n	8003fbe <ai_check_custom_types+0x1e>
 8003fe0:	7842      	ldrb	r2, [r0, #1]
 8003fe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d1e9      	bne.n	8003fbe <ai_check_custom_types+0x1e>
 8003fea:	2000      	movs	r0, #0
 8003fec:	e7e8      	b.n	8003fc0 <ai_check_custom_types+0x20>
 8003fee:	bf00      	nop
 8003ff0:	08007af8 	.word	0x08007af8

08003ff4 <ai_layers_init_all>:
 8003ff4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003ff6:	b16a      	cbz	r2, 8004014 <ai_layers_init_all+0x20>
 8003ff8:	6913      	ldr	r3, [r2, #16]
 8003ffa:	60d0      	str	r0, [r2, #12]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	f04f 0201 	mov.w	r2, #1
 8004002:	d007      	beq.n	8004014 <ai_layers_init_all+0x20>
 8004004:	b133      	cbz	r3, 8004014 <ai_layers_init_all+0x20>
 8004006:	6919      	ldr	r1, [r3, #16]
 8004008:	3201      	adds	r2, #1
 800400a:	60d8      	str	r0, [r3, #12]
 800400c:	4299      	cmp	r1, r3
 800400e:	bf18      	it	ne
 8004010:	2900      	cmpne	r1, #0
 8004012:	d101      	bne.n	8004018 <ai_layers_init_all+0x24>
 8004014:	4610      	mov	r0, r2
 8004016:	4770      	bx	lr
 8004018:	460b      	mov	r3, r1
 800401a:	e7f4      	b.n	8004006 <ai_layers_init_all+0x12>

0800401c <ai_layers_post_init_all>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004020:	b184      	cbz	r4, 8004044 <ai_layers_post_init_all+0x28>
 8004022:	2500      	movs	r5, #0
 8004024:	6863      	ldr	r3, [r4, #4]
 8004026:	4620      	mov	r0, r4
 8004028:	07db      	lsls	r3, r3, #31
 800402a:	d503      	bpl.n	8004034 <ai_layers_post_init_all+0x18>
 800402c:	6a23      	ldr	r3, [r4, #32]
 800402e:	b10b      	cbz	r3, 8004034 <ai_layers_post_init_all+0x18>
 8004030:	3501      	adds	r5, #1
 8004032:	4798      	blx	r3
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	429c      	cmp	r4, r3
 8004038:	bf18      	it	ne
 800403a:	2b00      	cmpne	r3, #0
 800403c:	461c      	mov	r4, r3
 800403e:	d1f1      	bne.n	8004024 <ai_layers_post_init_all+0x8>
 8004040:	4628      	mov	r0, r5
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	4625      	mov	r5, r4
 8004046:	e7fb      	b.n	8004040 <ai_layers_post_init_all+0x24>

08004048 <ai_layers_forward_all>:
 8004048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404c:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800404e:	4604      	mov	r4, r0
 8004050:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004052:	2f00      	cmp	r7, #0
 8004054:	d02b      	beq.n	80040ae <ai_layers_forward_all+0x66>
 8004056:	2d00      	cmp	r5, #0
 8004058:	d03d      	beq.n	80040d6 <ai_layers_forward_all+0x8e>
 800405a:	2600      	movs	r6, #0
 800405c:	6545      	str	r5, [r0, #84]	; 0x54
 800405e:	4629      	mov	r1, r5
 8004060:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004062:	2001      	movs	r0, #1
 8004064:	46b0      	mov	r8, r6
 8004066:	47b8      	blx	r7
 8004068:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800406a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800406c:	2002      	movs	r0, #2
 800406e:	47b8      	blx	r7
 8004070:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004072:	696b      	ldr	r3, [r5, #20]
 8004074:	4628      	mov	r0, r5
 8004076:	4798      	blx	r3
 8004078:	692b      	ldr	r3, [r5, #16]
 800407a:	2003      	movs	r0, #3
 800407c:	429d      	cmp	r5, r3
 800407e:	4619      	mov	r1, r3
 8004080:	d009      	beq.n	8004096 <ai_layers_forward_all+0x4e>
 8004082:	6563      	str	r3, [r4, #84]	; 0x54
 8004084:	3601      	adds	r6, #1
 8004086:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004088:	47b8      	blx	r7
 800408a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800408c:	2900      	cmp	r1, #0
 800408e:	d1ec      	bne.n	800406a <ai_layers_forward_all+0x22>
 8004090:	4630      	mov	r0, r6
 8004092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004096:	2100      	movs	r1, #0
 8004098:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 800409c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800409e:	3601      	adds	r6, #1
 80040a0:	47b8      	blx	r7
 80040a2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80040a4:	2900      	cmp	r1, #0
 80040a6:	d1e0      	bne.n	800406a <ai_layers_forward_all+0x22>
 80040a8:	4630      	mov	r0, r6
 80040aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ae:	b195      	cbz	r5, 80040d6 <ai_layers_forward_all+0x8e>
 80040b0:	463e      	mov	r6, r7
 80040b2:	6545      	str	r5, [r0, #84]	; 0x54
 80040b4:	696b      	ldr	r3, [r5, #20]
 80040b6:	4628      	mov	r0, r5
 80040b8:	4798      	blx	r3
 80040ba:	692b      	ldr	r3, [r5, #16]
 80040bc:	3601      	adds	r6, #1
 80040be:	42ab      	cmp	r3, r5
 80040c0:	461d      	mov	r5, r3
 80040c2:	d003      	beq.n	80040cc <ai_layers_forward_all+0x84>
 80040c4:	6563      	str	r3, [r4, #84]	; 0x54
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f4      	bne.n	80040b4 <ai_layers_forward_all+0x6c>
 80040ca:	e7e1      	b.n	8004090 <ai_layers_forward_all+0x48>
 80040cc:	2300      	movs	r3, #0
 80040ce:	4630      	mov	r0, r6
 80040d0:	6563      	str	r3, [r4, #84]	; 0x54
 80040d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d6:	462e      	mov	r6, r5
 80040d8:	4630      	mov	r0, r6
 80040da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040de:	bf00      	nop

080040e0 <arm_fully_connected_s8>:
 80040e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e4:	b08b      	sub	sp, #44	; 0x2c
 80040e6:	f8bd 4050 	ldrh.w	r4, [sp, #80]	; 0x50
 80040ea:	e9dd a915 	ldrd	sl, r9, [sp, #84]	; 0x54
 80040ee:	b30c      	cbz	r4, 8004134 <arm_fully_connected_s8+0x54>
 80040f0:	4606      	mov	r6, r0
 80040f2:	468b      	mov	fp, r1
 80040f4:	4617      	mov	r7, r2
 80040f6:	4698      	mov	r8, r3
 80040f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80040fa:	3c01      	subs	r4, #1
 80040fc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80040fe:	4630      	mov	r0, r6
 8004100:	9308      	str	r3, [sp, #32]
 8004102:	b2a4      	uxth	r4, r4
 8004104:	9504      	str	r5, [sp, #16]
 8004106:	4659      	mov	r1, fp
 8004108:	f8cd 8018 	str.w	r8, [sp, #24]
 800410c:	443e      	add	r6, r7
 800410e:	9705      	str	r7, [sp, #20]
 8004110:	f8cd a000 	str.w	sl, [sp]
 8004114:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 8004118:	461d      	mov	r5, r3
 800411a:	9207      	str	r2, [sp, #28]
 800411c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800411e:	4445      	add	r5, r8
 8004120:	951b      	str	r5, [sp, #108]	; 0x6c
 8004122:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004124:	9503      	str	r5, [sp, #12]
 8004126:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004128:	e9cd 9501 	strd	r9, r5, [sp, #4]
 800412c:	f000 f808 	bl	8004140 <arm_nn_vec_mat_mult_t_s8>
 8004130:	2c00      	cmp	r4, #0
 8004132:	d1e1      	bne.n	80040f8 <arm_fully_connected_s8+0x18>
 8004134:	2000      	movs	r0, #0
 8004136:	b00b      	add	sp, #44	; 0x2c
 8004138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800413c <arm_fully_connected_s8_get_buffer_size>:
 800413c:	2000      	movs	r0, #0
 800413e:	4770      	bx	lr

08004140 <arm_nn_vec_mat_mult_t_s8>:
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	b093      	sub	sp, #76	; 0x4c
 8004146:	4689      	mov	r9, r1
 8004148:	910b      	str	r1, [sp, #44]	; 0x2c
 800414a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800414c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800414e:	b28f      	uxth	r7, r1
 8004150:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004152:	9007      	str	r0, [sp, #28]
 8004154:	b28d      	uxth	r5, r1
 8004156:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
 800415a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800415c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004160:	e9dd e621 	ldrd	lr, r6, [sp, #132]	; 0x84
 8004164:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004168:	2e01      	cmp	r6, #1
 800416a:	f340 826c 	ble.w	8004646 <arm_nn_vec_mat_mult_t_s8+0x506>
 800416e:	1eb4      	subs	r4, r6, #2
 8004170:	469c      	mov	ip, r3
 8004172:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8004174:	4690      	mov	r8, r2
 8004176:	f024 0301 	bic.w	r3, r4, #1
 800417a:	f1ae 0110 	sub.w	r1, lr, #16
 800417e:	4276      	negs	r6, r6
 8004180:	2201      	movs	r2, #1
 8004182:	4463      	add	r3, ip
 8004184:	f021 010f 	bic.w	r1, r1, #15
 8004188:	40b2      	lsls	r2, r6
 800418a:	960c      	str	r6, [sp, #48]	; 0x30
 800418c:	3304      	adds	r3, #4
 800418e:	ea4f 064e 	mov.w	r6, lr, lsl #1
 8004192:	3a01      	subs	r2, #1
 8004194:	9411      	str	r4, [sp, #68]	; 0x44
 8004196:	9608      	str	r6, [sp, #32]
 8004198:	f101 0610 	add.w	r6, r1, #16
 800419c:	9309      	str	r3, [sp, #36]	; 0x24
 800419e:	4603      	mov	r3, r0
 80041a0:	4664      	mov	r4, ip
 80041a2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80041a4:	4433      	add	r3, r6
 80041a6:	46ab      	mov	fp, r5
 80041a8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80041ac:	9606      	str	r6, [sp, #24]
 80041ae:	930a      	str	r3, [sp, #40]	; 0x28
 80041b0:	1053      	asrs	r3, r2, #1
 80041b2:	920d      	str	r2, [sp, #52]	; 0x34
 80041b4:	9310      	str	r3, [sp, #64]	; 0x40
 80041b6:	4643      	mov	r3, r8
 80041b8:	9103      	str	r1, [sp, #12]
 80041ba:	3308      	adds	r3, #8
 80041bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80041c4:	0fdb      	lsrs	r3, r3, #31
 80041c6:	9304      	str	r3, [sp, #16]
 80041c8:	1ca3      	adds	r3, r4, #2
 80041ca:	9305      	str	r3, [sp, #20]
 80041cc:	9b01      	ldr	r3, [sp, #4]
 80041ce:	f1be 0f0f 	cmp.w	lr, #15
 80041d2:	f853 ac08 	ldr.w	sl, [r3, #-8]
 80041d6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80041da:	f340 83f8 	ble.w	80049ce <arm_nn_vec_mat_mult_t_s8+0x88e>
 80041de:	9a02      	ldr	r2, [sp, #8]
 80041e0:	465d      	mov	r5, fp
 80041e2:	9806      	ldr	r0, [sp, #24]
 80041e4:	4616      	mov	r6, r2
 80041e6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80041ea:	eb02 0800 	add.w	r8, r2, r0
 80041ee:	eb02 090e 	add.w	r9, r2, lr
 80041f2:	6834      	ldr	r4, [r6, #0]
 80041f4:	f8dc b000 	ldr.w	fp, [ip]
 80041f8:	ea4f 2034 	mov.w	r0, r4, ror #8
 80041fc:	f856 100e 	ldr.w	r1, [r6, lr]
 8004200:	ea4f 223b 	mov.w	r2, fp, ror #8
 8004204:	fa25 f080 	sxtab16	r0, r5, r0
 8004208:	fa25 f484 	sxtab16	r4, r5, r4
 800420c:	fa27 fb8b 	sxtab16	fp, r7, fp
 8004210:	fa27 f282 	sxtab16	r2, r7, r2
 8004214:	fb2b a404 	smlad	r4, fp, r4, sl
 8004218:	fa25 fa81 	sxtab16	sl, r5, r1
 800421c:	fb22 4000 	smlad	r0, r2, r0, r4
 8004220:	ea4f 2431 	mov.w	r4, r1, ror #8
 8004224:	6871      	ldr	r1, [r6, #4]
 8004226:	fa25 f484 	sxtab16	r4, r5, r4
 800422a:	fb2b 330a 	smlad	r3, fp, sl, r3
 800422e:	fb22 3a04 	smlad	sl, r2, r4, r3
 8004232:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004236:	ea4f 2431 	mov.w	r4, r1, ror #8
 800423a:	fa27 f382 	sxtab16	r3, r7, r2
 800423e:	ea4f 2b32 	mov.w	fp, r2, ror #8
 8004242:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004246:	fa27 fb8b 	sxtab16	fp, r7, fp
 800424a:	fa25 f484 	sxtab16	r4, r5, r4
 800424e:	fa25 f181 	sxtab16	r1, r5, r1
 8004252:	fb23 0001 	smlad	r0, r3, r1, r0
 8004256:	fa25 f182 	sxtab16	r1, r5, r2
 800425a:	fb2b 0404 	smlad	r4, fp, r4, r0
 800425e:	ea4f 2232 	mov.w	r2, r2, ror #8
 8004262:	68b0      	ldr	r0, [r6, #8]
 8004264:	fa25 f282 	sxtab16	r2, r5, r2
 8004268:	fb23 a301 	smlad	r3, r3, r1, sl
 800426c:	fb2b 3202 	smlad	r2, fp, r2, r3
 8004270:	f8dc a008 	ldr.w	sl, [ip, #8]
 8004274:	ea4f 2330 	mov.w	r3, r0, ror #8
 8004278:	f8d9 b008 	ldr.w	fp, [r9, #8]
 800427c:	ea4f 213a 	mov.w	r1, sl, ror #8
 8004280:	fa27 f98a 	sxtab16	r9, r7, sl
 8004284:	fa27 f181 	sxtab16	r1, r7, r1
 8004288:	fa25 f383 	sxtab16	r3, r5, r3
 800428c:	fa25 f080 	sxtab16	r0, r5, r0
 8004290:	fb29 4a00 	smlad	sl, r9, r0, r4
 8004294:	fa25 f48b 	sxtab16	r4, r5, fp
 8004298:	fb21 a303 	smlad	r3, r1, r3, sl
 800429c:	ea4f 203b 	mov.w	r0, fp, ror #8
 80042a0:	3610      	adds	r6, #16
 80042a2:	f856 bc04 	ldr.w	fp, [r6, #-4]
 80042a6:	fa25 f080 	sxtab16	r0, r5, r0
 80042aa:	fb29 2204 	smlad	r2, r9, r4, r2
 80042ae:	fb21 2000 	smlad	r0, r1, r0, r2
 80042b2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80042b6:	eb06 090e 	add.w	r9, r6, lr
 80042ba:	ea4f 2a3b 	mov.w	sl, fp, ror #8
 80042be:	f10c 0c10 	add.w	ip, ip, #16
 80042c2:	ea4f 2431 	mov.w	r4, r1, ror #8
 80042c6:	f859 2c04 	ldr.w	r2, [r9, #-4]
 80042ca:	fa27 f484 	sxtab16	r4, r7, r4
 80042ce:	fa27 f181 	sxtab16	r1, r7, r1
 80042d2:	fa25 fa8a 	sxtab16	sl, r5, sl
 80042d6:	fa25 fb8b 	sxtab16	fp, r5, fp
 80042da:	fb21 330b 	smlad	r3, r1, fp, r3
 80042de:	fa25 fb82 	sxtab16	fp, r5, r2
 80042e2:	fb24 3a0a 	smlad	sl, r4, sl, r3
 80042e6:	ea4f 2232 	mov.w	r2, r2, ror #8
 80042ea:	fa25 f282 	sxtab16	r2, r5, r2
 80042ee:	fb21 030b 	smlad	r3, r1, fp, r0
 80042f2:	fb24 3302 	smlad	r3, r4, r2, r3
 80042f6:	4546      	cmp	r6, r8
 80042f8:	f47f af7b 	bne.w	80041f2 <arm_nn_vec_mat_mult_t_s8+0xb2>
 80042fc:	46ab      	mov	fp, r5
 80042fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004300:	9a06      	ldr	r2, [sp, #24]
 8004302:	4596      	cmp	lr, r2
 8004304:	f340 8133 	ble.w	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 8004308:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800430a:	1c54      	adds	r4, r2, #1
 800430c:	f991 0000 	ldrsb.w	r0, [r1]
 8004310:	f996 8000 	ldrsb.w	r8, [r6]
 8004314:	45a6      	cmp	lr, r4
 8004316:	4428      	add	r0, r5
 8004318:	f916 c00e 	ldrsb.w	ip, [r6, lr]
 800431c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800431e:	44a8      	add	r8, r5
 8004320:	44ac      	add	ip, r5
 8004322:	fb00 aa08 	mla	sl, r0, r8, sl
 8004326:	fb00 330c 	mla	r3, r0, ip, r3
 800432a:	f340 8120 	ble.w	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 800432e:	eb06 040e 	add.w	r4, r6, lr
 8004332:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8004336:	f996 8001 	ldrsb.w	r8, [r6, #1]
 800433a:	f994 c001 	ldrsb.w	ip, [r4, #1]
 800433e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004340:	44a8      	add	r8, r5
 8004342:	44ac      	add	ip, r5
 8004344:	4420      	add	r0, r4
 8004346:	1c94      	adds	r4, r2, #2
 8004348:	45a6      	cmp	lr, r4
 800434a:	fb00 aa08 	mla	sl, r0, r8, sl
 800434e:	fb00 330c 	mla	r3, r0, ip, r3
 8004352:	f106 0002 	add.w	r0, r6, #2
 8004356:	f340 810a 	ble.w	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 800435a:	f910 800e 	ldrsb.w	r8, [r0, lr]
 800435e:	1cd4      	adds	r4, r2, #3
 8004360:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8004364:	44a8      	add	r8, r5
 8004366:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004368:	f996 c002 	ldrsb.w	ip, [r6, #2]
 800436c:	45a6      	cmp	lr, r4
 800436e:	4428      	add	r0, r5
 8004370:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004372:	44ac      	add	ip, r5
 8004374:	fb00 3308 	mla	r3, r0, r8, r3
 8004378:	fb00 aa0c 	mla	sl, r0, ip, sl
 800437c:	f106 0003 	add.w	r0, r6, #3
 8004380:	f340 80f5 	ble.w	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 8004384:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8004388:	1d14      	adds	r4, r2, #4
 800438a:	f991 0003 	ldrsb.w	r0, [r1, #3]
 800438e:	44a8      	add	r8, r5
 8004390:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004392:	f996 c003 	ldrsb.w	ip, [r6, #3]
 8004396:	45a6      	cmp	lr, r4
 8004398:	4428      	add	r0, r5
 800439a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800439c:	44ac      	add	ip, r5
 800439e:	fb00 3308 	mla	r3, r0, r8, r3
 80043a2:	fb00 aa0c 	mla	sl, r0, ip, sl
 80043a6:	f106 0004 	add.w	r0, r6, #4
 80043aa:	f340 80e0 	ble.w	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 80043ae:	f910 800e 	ldrsb.w	r8, [r0, lr]
 80043b2:	1d54      	adds	r4, r2, #5
 80043b4:	f991 0004 	ldrsb.w	r0, [r1, #4]
 80043b8:	44a8      	add	r8, r5
 80043ba:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80043bc:	f996 c004 	ldrsb.w	ip, [r6, #4]
 80043c0:	45a6      	cmp	lr, r4
 80043c2:	4428      	add	r0, r5
 80043c4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80043c6:	44ac      	add	ip, r5
 80043c8:	fb00 3308 	mla	r3, r0, r8, r3
 80043cc:	fb00 aa0c 	mla	sl, r0, ip, sl
 80043d0:	f106 0005 	add.w	r0, r6, #5
 80043d4:	f340 80cb 	ble.w	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 80043d8:	f910 800e 	ldrsb.w	r8, [r0, lr]
 80043dc:	1d94      	adds	r4, r2, #6
 80043de:	f991 0005 	ldrsb.w	r0, [r1, #5]
 80043e2:	44a8      	add	r8, r5
 80043e4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80043e6:	f996 c005 	ldrsb.w	ip, [r6, #5]
 80043ea:	45a6      	cmp	lr, r4
 80043ec:	4428      	add	r0, r5
 80043ee:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80043f0:	44ac      	add	ip, r5
 80043f2:	fb00 3308 	mla	r3, r0, r8, r3
 80043f6:	fb00 aa0c 	mla	sl, r0, ip, sl
 80043fa:	f106 0006 	add.w	r0, r6, #6
 80043fe:	f340 80b6 	ble.w	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 8004402:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8004406:	1dd4      	adds	r4, r2, #7
 8004408:	f991 0006 	ldrsb.w	r0, [r1, #6]
 800440c:	44a8      	add	r8, r5
 800440e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004410:	f996 c006 	ldrsb.w	ip, [r6, #6]
 8004414:	45a6      	cmp	lr, r4
 8004416:	4428      	add	r0, r5
 8004418:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800441a:	44ac      	add	ip, r5
 800441c:	fb00 3308 	mla	r3, r0, r8, r3
 8004420:	fb00 aa0c 	mla	sl, r0, ip, sl
 8004424:	f106 0007 	add.w	r0, r6, #7
 8004428:	f340 80a1 	ble.w	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 800442c:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8004430:	f102 0408 	add.w	r4, r2, #8
 8004434:	f991 0007 	ldrsb.w	r0, [r1, #7]
 8004438:	44a8      	add	r8, r5
 800443a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800443c:	f996 c007 	ldrsb.w	ip, [r6, #7]
 8004440:	45a6      	cmp	lr, r4
 8004442:	4428      	add	r0, r5
 8004444:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004446:	44ac      	add	ip, r5
 8004448:	fb00 3308 	mla	r3, r0, r8, r3
 800444c:	fb00 aa0c 	mla	sl, r0, ip, sl
 8004450:	f106 0008 	add.w	r0, r6, #8
 8004454:	f340 808b 	ble.w	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 8004458:	f910 800e 	ldrsb.w	r8, [r0, lr]
 800445c:	f102 0409 	add.w	r4, r2, #9
 8004460:	f991 0008 	ldrsb.w	r0, [r1, #8]
 8004464:	44a8      	add	r8, r5
 8004466:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004468:	f996 c008 	ldrsb.w	ip, [r6, #8]
 800446c:	45a6      	cmp	lr, r4
 800446e:	4428      	add	r0, r5
 8004470:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004472:	44ac      	add	ip, r5
 8004474:	fb00 3308 	mla	r3, r0, r8, r3
 8004478:	fb00 aa0c 	mla	sl, r0, ip, sl
 800447c:	f106 0009 	add.w	r0, r6, #9
 8004480:	dd75      	ble.n	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 8004482:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8004486:	f102 040a 	add.w	r4, r2, #10
 800448a:	f991 0009 	ldrsb.w	r0, [r1, #9]
 800448e:	44a8      	add	r8, r5
 8004490:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004492:	f996 c009 	ldrsb.w	ip, [r6, #9]
 8004496:	45a6      	cmp	lr, r4
 8004498:	4428      	add	r0, r5
 800449a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800449c:	44ac      	add	ip, r5
 800449e:	fb00 3308 	mla	r3, r0, r8, r3
 80044a2:	fb00 aa0c 	mla	sl, r0, ip, sl
 80044a6:	f106 000a 	add.w	r0, r6, #10
 80044aa:	dd60      	ble.n	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 80044ac:	f910 800e 	ldrsb.w	r8, [r0, lr]
 80044b0:	f102 040b 	add.w	r4, r2, #11
 80044b4:	f991 000a 	ldrsb.w	r0, [r1, #10]
 80044b8:	44a8      	add	r8, r5
 80044ba:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80044bc:	f996 c00a 	ldrsb.w	ip, [r6, #10]
 80044c0:	45a6      	cmp	lr, r4
 80044c2:	4428      	add	r0, r5
 80044c4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80044c6:	44ac      	add	ip, r5
 80044c8:	fb00 3308 	mla	r3, r0, r8, r3
 80044cc:	fb00 aa0c 	mla	sl, r0, ip, sl
 80044d0:	f106 000b 	add.w	r0, r6, #11
 80044d4:	dd4b      	ble.n	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 80044d6:	f910 800e 	ldrsb.w	r8, [r0, lr]
 80044da:	f102 040c 	add.w	r4, r2, #12
 80044de:	f991 000b 	ldrsb.w	r0, [r1, #11]
 80044e2:	44a8      	add	r8, r5
 80044e4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80044e6:	f996 c00b 	ldrsb.w	ip, [r6, #11]
 80044ea:	45a6      	cmp	lr, r4
 80044ec:	4428      	add	r0, r5
 80044ee:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80044f0:	44ac      	add	ip, r5
 80044f2:	fb00 3308 	mla	r3, r0, r8, r3
 80044f6:	fb00 aa0c 	mla	sl, r0, ip, sl
 80044fa:	f106 000c 	add.w	r0, r6, #12
 80044fe:	dd36      	ble.n	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 8004500:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8004504:	f102 040d 	add.w	r4, r2, #13
 8004508:	f991 000c 	ldrsb.w	r0, [r1, #12]
 800450c:	44a8      	add	r8, r5
 800450e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004510:	f996 c00c 	ldrsb.w	ip, [r6, #12]
 8004514:	45a6      	cmp	lr, r4
 8004516:	4428      	add	r0, r5
 8004518:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800451a:	44ac      	add	ip, r5
 800451c:	fb00 3308 	mla	r3, r0, r8, r3
 8004520:	fb00 aa0c 	mla	sl, r0, ip, sl
 8004524:	f106 000d 	add.w	r0, r6, #13
 8004528:	dd21      	ble.n	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 800452a:	f910 c00e 	ldrsb.w	ip, [r0, lr]
 800452e:	320e      	adds	r2, #14
 8004530:	f991 000d 	ldrsb.w	r0, [r1, #13]
 8004534:	f106 080e 	add.w	r8, r6, #14
 8004538:	44ac      	add	ip, r5
 800453a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800453c:	f996 400d 	ldrsb.w	r4, [r6, #13]
 8004540:	4596      	cmp	lr, r2
 8004542:	4428      	add	r0, r5
 8004544:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004546:	442c      	add	r4, r5
 8004548:	fb00 330c 	mla	r3, r0, ip, r3
 800454c:	fb00 aa04 	mla	sl, r0, r4, sl
 8004550:	dd0d      	ble.n	800456e <arm_nn_vec_mat_mult_t_s8+0x42e>
 8004552:	f991 200e 	ldrsb.w	r2, [r1, #14]
 8004556:	f918 000e 	ldrsb.w	r0, [r8, lr]
 800455a:	f996 100e 	ldrsb.w	r1, [r6, #14]
 800455e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004560:	4428      	add	r0, r5
 8004562:	4429      	add	r1, r5
 8004564:	4422      	add	r2, r4
 8004566:	fb02 aa01 	mla	sl, r2, r1, sl
 800456a:	fb02 3300 	mla	r3, r2, r0, r3
 800456e:	9a03      	ldr	r2, [sp, #12]
 8004570:	fa0a fa02 	lsl.w	sl, sl, r2
 8004574:	9a04      	ldr	r2, [sp, #16]
 8004576:	ebb2 7fda 	cmp.w	r2, sl, lsr #31
 800457a:	f000 8218 	beq.w	80049ae <arm_nn_vec_mat_mult_t_s8+0x86e>
 800457e:	48d6      	ldr	r0, [pc, #856]	; (80048d8 <arm_nn_vec_mat_mult_t_s8+0x798>)
 8004580:	f04f 31ff 	mov.w	r1, #4294967295
 8004584:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004586:	4552      	cmp	r2, sl
 8004588:	f040 81d2 	bne.w	8004930 <arm_nn_vec_mat_mult_t_s8+0x7f0>
 800458c:	f1ba 4f00 	cmp.w	sl, #2147483648	; 0x80000000
 8004590:	f040 81ce 	bne.w	8004930 <arm_nn_vec_mat_mult_t_s8+0x7f0>
 8004594:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004596:	2a00      	cmp	r2, #0
 8004598:	f340 81ff 	ble.w	800499a <arm_nn_vec_mat_mult_t_s8+0x85a>
 800459c:	2400      	movs	r4, #0
 800459e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045a2:	4620      	mov	r0, r4
 80045a4:	4626      	mov	r6, r4
 80045a6:	9a03      	ldr	r2, [sp, #12]
 80045a8:	fa03 fc02 	lsl.w	ip, r3, r2
 80045ac:	9b04      	ldr	r3, [sp, #16]
 80045ae:	ebb3 7fdc 	cmp.w	r3, ip, lsr #31
 80045b2:	f000 8200 	beq.w	80049b6 <arm_nn_vec_mat_mult_t_s8+0x876>
 80045b6:	4ac8      	ldr	r2, [pc, #800]	; (80048d8 <arm_nn_vec_mat_mult_t_s8+0x798>)
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295
 80045bc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80045be:	4565      	cmp	r5, ip
 80045c0:	f040 81d5 	bne.w	800496e <arm_nn_vec_mat_mult_t_s8+0x82e>
 80045c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80045c8:	f040 81d1 	bne.w	800496e <arm_nn_vec_mat_mult_t_s8+0x82e>
 80045cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80045d0:	4010      	ands	r0, r2
 80045d2:	4122      	asrs	r2, r4
 80045d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045d6:	bf48      	it	mi
 80045d8:	3601      	addmi	r6, #1
 80045da:	4419      	add	r1, r3
 80045dc:	42b0      	cmp	r0, r6
 80045de:	9808      	ldr	r0, [sp, #32]
 80045e0:	bfc8      	it	gt
 80045e2:	3201      	addgt	r2, #1
 80045e4:	441a      	add	r2, r3
 80045e6:	9b02      	ldr	r3, [sp, #8]
 80045e8:	4403      	add	r3, r0
 80045ea:	9302      	str	r3, [sp, #8]
 80045ec:	9b01      	ldr	r3, [sp, #4]
 80045ee:	3308      	adds	r3, #8
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045f4:	4299      	cmp	r1, r3
 80045f6:	bfb8      	it	lt
 80045f8:	4619      	movlt	r1, r3
 80045fa:	429a      	cmp	r2, r3
 80045fc:	bfb8      	it	lt
 80045fe:	461a      	movlt	r2, r3
 8004600:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004602:	4299      	cmp	r1, r3
 8004604:	bfa8      	it	ge
 8004606:	4619      	movge	r1, r3
 8004608:	429a      	cmp	r2, r3
 800460a:	bfa8      	it	ge
 800460c:	461a      	movge	r2, r3
 800460e:	9b05      	ldr	r3, [sp, #20]
 8004610:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004614:	3302      	adds	r3, #2
 8004616:	f803 1c04 	strb.w	r1, [r3, #-4]
 800461a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800461c:	9305      	str	r3, [sp, #20]
 800461e:	429a      	cmp	r2, r3
 8004620:	f47f add4 	bne.w	80041cc <arm_nn_vec_mat_mult_t_s8+0x8c>
 8004624:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004626:	465d      	mov	r5, fp
 8004628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	9a08      	ldr	r2, [sp, #32]
 800462e:	3301      	adds	r3, #1
 8004630:	fb03 1202 	mla	r2, r3, r2, r1
 8004634:	920b      	str	r2, [sp, #44]	; 0x2c
 8004636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004638:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800463c:	920e      	str	r2, [sp, #56]	; 0x38
 800463e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004640:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004644:	930f      	str	r3, [sp, #60]	; 0x3c
 8004646:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004648:	07db      	lsls	r3, r3, #31
 800464a:	f140 816d 	bpl.w	8004928 <arm_nn_vec_mat_mult_t_s8+0x7e8>
 800464e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004650:	f1be 0f0f 	cmp.w	lr, #15
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f340 81ea 	ble.w	8004a2e <arm_nn_vec_mat_mult_t_s8+0x8ee>
 800465a:	f1ae 0210 	sub.w	r2, lr, #16
 800465e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004660:	0912      	lsrs	r2, r2, #4
 8004662:	3201      	adds	r2, #1
 8004664:	0111      	lsls	r1, r2, #4
 8004666:	4692      	mov	sl, r2
 8004668:	9a07      	ldr	r2, [sp, #28]
 800466a:	4689      	mov	r9, r1
 800466c:	eb02 0c01 	add.w	ip, r2, r1
 8004670:	6830      	ldr	r0, [r6, #0]
 8004672:	6811      	ldr	r1, [r2, #0]
 8004674:	ea4f 2830 	mov.w	r8, r0, ror #8
 8004678:	fa25 f080 	sxtab16	r0, r5, r0
 800467c:	fa25 f488 	sxtab16	r4, r5, r8
 8004680:	ea4f 2831 	mov.w	r8, r1, ror #8
 8004684:	fa27 f181 	sxtab16	r1, r7, r1
 8004688:	fa27 f888 	sxtab16	r8, r7, r8
 800468c:	fb21 3300 	smlad	r3, r1, r0, r3
 8004690:	fb28 3804 	smlad	r8, r8, r4, r3
 8004694:	6870      	ldr	r0, [r6, #4]
 8004696:	6853      	ldr	r3, [r2, #4]
 8004698:	ea4f 2430 	mov.w	r4, r0, ror #8
 800469c:	ea4f 2133 	mov.w	r1, r3, ror #8
 80046a0:	fa25 f080 	sxtab16	r0, r5, r0
 80046a4:	fa25 f484 	sxtab16	r4, r5, r4
 80046a8:	fa27 f383 	sxtab16	r3, r7, r3
 80046ac:	fa27 f181 	sxtab16	r1, r7, r1
 80046b0:	fb23 8300 	smlad	r3, r3, r0, r8
 80046b4:	fb21 3404 	smlad	r4, r1, r4, r3
 80046b8:	68b0      	ldr	r0, [r6, #8]
 80046ba:	6891      	ldr	r1, [r2, #8]
 80046bc:	ea4f 2830 	mov.w	r8, r0, ror #8
 80046c0:	ea4f 2331 	mov.w	r3, r1, ror #8
 80046c4:	fa25 f080 	sxtab16	r0, r5, r0
 80046c8:	fa25 f888 	sxtab16	r8, r5, r8
 80046cc:	fa27 f181 	sxtab16	r1, r7, r1
 80046d0:	fa27 f383 	sxtab16	r3, r7, r3
 80046d4:	fb21 4100 	smlad	r1, r1, r0, r4
 80046d8:	fb23 1108 	smlad	r1, r3, r8, r1
 80046dc:	68f0      	ldr	r0, [r6, #12]
 80046de:	3210      	adds	r2, #16
 80046e0:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80046e4:	3610      	adds	r6, #16
 80046e6:	ea4f 2830 	mov.w	r8, r0, ror #8
 80046ea:	ea4f 2433 	mov.w	r4, r3, ror #8
 80046ee:	fa25 f080 	sxtab16	r0, r5, r0
 80046f2:	fa25 f888 	sxtab16	r8, r5, r8
 80046f6:	fa27 f383 	sxtab16	r3, r7, r3
 80046fa:	fa27 f484 	sxtab16	r4, r7, r4
 80046fe:	fb23 1300 	smlad	r3, r3, r0, r1
 8004702:	fb24 3308 	smlad	r3, r4, r8, r3
 8004706:	4562      	cmp	r2, ip
 8004708:	d1b2      	bne.n	8004670 <arm_nn_vec_mat_mult_t_s8+0x530>
 800470a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800470c:	9207      	str	r2, [sp, #28]
 800470e:	4652      	mov	r2, sl
 8004710:	4449      	add	r1, r9
 8004712:	0112      	lsls	r2, r2, #4
 8004714:	910b      	str	r1, [sp, #44]	; 0x2c
 8004716:	4596      	cmp	lr, r2
 8004718:	f340 80e0 	ble.w	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 800471c:	9d07      	ldr	r5, [sp, #28]
 800471e:	1c51      	adds	r1, r2, #1
 8004720:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8004722:	f995 0000 	ldrsb.w	r0, [r5]
 8004726:	458e      	cmp	lr, r1
 8004728:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800472a:	4438      	add	r0, r7
 800472c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800472e:	f996 4000 	ldrsb.w	r4, [r6]
 8004732:	443c      	add	r4, r7
 8004734:	fb04 3300 	mla	r3, r4, r0, r3
 8004738:	f340 80d0 	ble.w	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 800473c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800473e:	1c91      	adds	r1, r2, #2
 8004740:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8004744:	f996 4001 	ldrsb.w	r4, [r6, #1]
 8004748:	458e      	cmp	lr, r1
 800474a:	4438      	add	r0, r7
 800474c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800474e:	443c      	add	r4, r7
 8004750:	fb04 3300 	mla	r3, r4, r0, r3
 8004754:	f340 80c2 	ble.w	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 8004758:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800475a:	1cd1      	adds	r1, r2, #3
 800475c:	f995 0002 	ldrsb.w	r0, [r5, #2]
 8004760:	f996 4002 	ldrsb.w	r4, [r6, #2]
 8004764:	458e      	cmp	lr, r1
 8004766:	4438      	add	r0, r7
 8004768:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800476a:	443c      	add	r4, r7
 800476c:	fb04 3300 	mla	r3, r4, r0, r3
 8004770:	f340 80b4 	ble.w	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 8004774:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8004776:	1d11      	adds	r1, r2, #4
 8004778:	f995 0003 	ldrsb.w	r0, [r5, #3]
 800477c:	f996 4003 	ldrsb.w	r4, [r6, #3]
 8004780:	458e      	cmp	lr, r1
 8004782:	4438      	add	r0, r7
 8004784:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004786:	443c      	add	r4, r7
 8004788:	fb04 3300 	mla	r3, r4, r0, r3
 800478c:	f340 80a6 	ble.w	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 8004790:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8004792:	1d51      	adds	r1, r2, #5
 8004794:	f995 0004 	ldrsb.w	r0, [r5, #4]
 8004798:	f996 4004 	ldrsb.w	r4, [r6, #4]
 800479c:	458e      	cmp	lr, r1
 800479e:	4438      	add	r0, r7
 80047a0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80047a2:	443c      	add	r4, r7
 80047a4:	fb04 3300 	mla	r3, r4, r0, r3
 80047a8:	f340 8098 	ble.w	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 80047ac:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80047ae:	1d91      	adds	r1, r2, #6
 80047b0:	f995 0005 	ldrsb.w	r0, [r5, #5]
 80047b4:	f996 4005 	ldrsb.w	r4, [r6, #5]
 80047b8:	458e      	cmp	lr, r1
 80047ba:	4438      	add	r0, r7
 80047bc:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80047be:	443c      	add	r4, r7
 80047c0:	fb04 3300 	mla	r3, r4, r0, r3
 80047c4:	f340 808a 	ble.w	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 80047c8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80047ca:	1dd1      	adds	r1, r2, #7
 80047cc:	f995 0006 	ldrsb.w	r0, [r5, #6]
 80047d0:	f996 4006 	ldrsb.w	r4, [r6, #6]
 80047d4:	458e      	cmp	lr, r1
 80047d6:	4438      	add	r0, r7
 80047d8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80047da:	443c      	add	r4, r7
 80047dc:	fb04 3300 	mla	r3, r4, r0, r3
 80047e0:	dd7c      	ble.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 80047e2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80047e4:	f102 0108 	add.w	r1, r2, #8
 80047e8:	f995 0007 	ldrsb.w	r0, [r5, #7]
 80047ec:	f996 4007 	ldrsb.w	r4, [r6, #7]
 80047f0:	458e      	cmp	lr, r1
 80047f2:	4438      	add	r0, r7
 80047f4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80047f6:	443c      	add	r4, r7
 80047f8:	fb04 3300 	mla	r3, r4, r0, r3
 80047fc:	dd6e      	ble.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 80047fe:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8004800:	f102 0109 	add.w	r1, r2, #9
 8004804:	f995 0008 	ldrsb.w	r0, [r5, #8]
 8004808:	f996 4008 	ldrsb.w	r4, [r6, #8]
 800480c:	458e      	cmp	lr, r1
 800480e:	4438      	add	r0, r7
 8004810:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004812:	443c      	add	r4, r7
 8004814:	fb04 3300 	mla	r3, r4, r0, r3
 8004818:	dd60      	ble.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 800481a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800481c:	f102 010a 	add.w	r1, r2, #10
 8004820:	f995 0009 	ldrsb.w	r0, [r5, #9]
 8004824:	f996 4009 	ldrsb.w	r4, [r6, #9]
 8004828:	458e      	cmp	lr, r1
 800482a:	4438      	add	r0, r7
 800482c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800482e:	443c      	add	r4, r7
 8004830:	fb04 3300 	mla	r3, r4, r0, r3
 8004834:	dd52      	ble.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 8004836:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8004838:	f102 010b 	add.w	r1, r2, #11
 800483c:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8004840:	f996 400a 	ldrsb.w	r4, [r6, #10]
 8004844:	458e      	cmp	lr, r1
 8004846:	4438      	add	r0, r7
 8004848:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800484a:	443c      	add	r4, r7
 800484c:	fb04 3300 	mla	r3, r4, r0, r3
 8004850:	dd44      	ble.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 8004852:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8004854:	f102 010c 	add.w	r1, r2, #12
 8004858:	f995 000b 	ldrsb.w	r0, [r5, #11]
 800485c:	f996 400b 	ldrsb.w	r4, [r6, #11]
 8004860:	458e      	cmp	lr, r1
 8004862:	4438      	add	r0, r7
 8004864:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004866:	443c      	add	r4, r7
 8004868:	fb04 3300 	mla	r3, r4, r0, r3
 800486c:	dd36      	ble.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 800486e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8004870:	f102 010d 	add.w	r1, r2, #13
 8004874:	f995 000c 	ldrsb.w	r0, [r5, #12]
 8004878:	f996 400c 	ldrsb.w	r4, [r6, #12]
 800487c:	458e      	cmp	lr, r1
 800487e:	4438      	add	r0, r7
 8004880:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004882:	443c      	add	r4, r7
 8004884:	fb04 3300 	mla	r3, r4, r0, r3
 8004888:	dd28      	ble.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 800488a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800488c:	f102 010e 	add.w	r1, r2, #14
 8004890:	f995 000d 	ldrsb.w	r0, [r5, #13]
 8004894:	f996 400d 	ldrsb.w	r4, [r6, #13]
 8004898:	458e      	cmp	lr, r1
 800489a:	4438      	add	r0, r7
 800489c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800489e:	443c      	add	r4, r7
 80048a0:	fb04 3300 	mla	r3, r4, r0, r3
 80048a4:	dd1a      	ble.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 80048a6:	f995 100e 	ldrsb.w	r1, [r5, #14]
 80048aa:	462c      	mov	r4, r5
 80048ac:	f996 000e 	ldrsb.w	r0, [r6, #14]
 80048b0:	320f      	adds	r2, #15
 80048b2:	4635      	mov	r5, r6
 80048b4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80048b6:	4438      	add	r0, r7
 80048b8:	4596      	cmp	lr, r2
 80048ba:	4431      	add	r1, r6
 80048bc:	fb00 3301 	mla	r3, r0, r1, r3
 80048c0:	dd0c      	ble.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 80048c2:	f995 200f 	ldrsb.w	r2, [r5, #15]
 80048c6:	f994 100f 	ldrsb.w	r1, [r4, #15]
 80048ca:	981c      	ldr	r0, [sp, #112]	; 0x70
 80048cc:	443a      	add	r2, r7
 80048ce:	4401      	add	r1, r0
 80048d0:	fb01 3302 	mla	r3, r1, r2, r3
 80048d4:	e002      	b.n	80048dc <arm_nn_vec_mat_mult_t_s8+0x79c>
 80048d6:	bf00      	nop
 80048d8:	c0000001 	.word	0xc0000001
 80048dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048de:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 80048e2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80048e4:	fa03 f101 	lsl.w	r1, r3, r1
 80048e8:	0fd2      	lsrs	r2, r2, #31
 80048ea:	ebb2 7fd1 	cmp.w	r2, r1, lsr #31
 80048ee:	f000 80a0 	beq.w	8004a32 <arm_nn_vec_mat_mult_t_s8+0x8f2>
 80048f2:	4a52      	ldr	r2, [pc, #328]	; (8004a3c <arm_nn_vec_mat_mult_t_s8+0x8fc>)
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80048fa:	4288      	cmp	r0, r1
 80048fc:	d16b      	bne.n	80049d6 <arm_nn_vec_mat_mult_t_s8+0x896>
 80048fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8004902:	d168      	bne.n	80049d6 <arm_nn_vec_mat_mult_t_s8+0x896>
 8004904:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004906:	2b00      	cmp	r3, #0
 8004908:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800490c:	f340 808d 	ble.w	8004a2a <arm_nn_vec_mat_mult_t_s8+0x8ea>
 8004910:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004912:	4413      	add	r3, r2
 8004914:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004916:	4293      	cmp	r3, r2
 8004918:	bfb8      	it	lt
 800491a:	4613      	movlt	r3, r2
 800491c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800491e:	4293      	cmp	r3, r2
 8004920:	bfa8      	it	ge
 8004922:	4613      	movge	r3, r2
 8004924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004926:	7013      	strb	r3, [r2, #0]
 8004928:	2000      	movs	r0, #0
 800492a:	b013      	add	sp, #76	; 0x4c
 800492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004930:	fbc2 010a 	smlal	r0, r1, r2, sl
 8004934:	2800      	cmp	r0, #0
 8004936:	f171 0200 	sbcs.w	r2, r1, #0
 800493a:	da06      	bge.n	800494a <arm_nn_vec_mat_mult_t_s8+0x80a>
 800493c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8004940:	2500      	movs	r5, #0
 8004942:	1824      	adds	r4, r4, r0
 8004944:	414d      	adcs	r5, r1
 8004946:	4620      	mov	r0, r4
 8004948:	4629      	mov	r1, r5
 800494a:	0fc2      	lsrs	r2, r0, #31
 800494c:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
 8004950:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004952:	2a00      	cmp	r2, #0
 8004954:	dd23      	ble.n	800499e <arm_nn_vec_mat_mult_t_s8+0x85e>
 8004956:	2900      	cmp	r1, #0
 8004958:	da35      	bge.n	80049c6 <arm_nn_vec_mat_mult_t_s8+0x886>
 800495a:	2600      	movs	r6, #0
 800495c:	4632      	mov	r2, r6
 800495e:	4630      	mov	r0, r6
 8004960:	4634      	mov	r4, r6
 8004962:	f106 0c01 	add.w	ip, r6, #1
 8004966:	4594      	cmp	ip, r2
 8004968:	bfb8      	it	lt
 800496a:	3101      	addlt	r1, #1
 800496c:	e61b      	b.n	80045a6 <arm_nn_vec_mat_mult_t_s8+0x466>
 800496e:	fbc5 230c 	smlal	r2, r3, r5, ip
 8004972:	4699      	mov	r9, r3
 8004974:	2a00      	cmp	r2, #0
 8004976:	4690      	mov	r8, r2
 8004978:	f179 0300 	sbcs.w	r3, r9, #0
 800497c:	da08      	bge.n	8004990 <arm_nn_vec_mat_mult_t_s8+0x850>
 800497e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004982:	2300      	movs	r3, #0
 8004984:	eb12 0208 	adds.w	r2, r2, r8
 8004988:	eb43 0309 	adc.w	r3, r3, r9
 800498c:	4690      	mov	r8, r2
 800498e:	4699      	mov	r9, r3
 8004990:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8004994:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 8004998:	e61a      	b.n	80045d0 <arm_nn_vec_mat_mult_t_s8+0x490>
 800499a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800499e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80049a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80049a2:	ea01 0200 	and.w	r2, r1, r0
 80049a6:	4121      	asrs	r1, r4
 80049a8:	d509      	bpl.n	80049be <arm_nn_vec_mat_mult_t_s8+0x87e>
 80049aa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80049ac:	e7d9      	b.n	8004962 <arm_nn_vec_mat_mult_t_s8+0x822>
 80049ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049b2:	2100      	movs	r1, #0
 80049b4:	e5e6      	b.n	8004584 <arm_nn_vec_mat_mult_t_s8+0x444>
 80049b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049ba:	2300      	movs	r3, #0
 80049bc:	e5fe      	b.n	80045bc <arm_nn_vec_mat_mult_t_s8+0x47c>
 80049be:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80049c2:	4666      	mov	r6, ip
 80049c4:	e7cf      	b.n	8004966 <arm_nn_vec_mat_mult_t_s8+0x826>
 80049c6:	2400      	movs	r4, #0
 80049c8:	4620      	mov	r0, r4
 80049ca:	4626      	mov	r6, r4
 80049cc:	e5eb      	b.n	80045a6 <arm_nn_vec_mat_mult_t_s8+0x466>
 80049ce:	9e02      	ldr	r6, [sp, #8]
 80049d0:	2200      	movs	r2, #0
 80049d2:	9907      	ldr	r1, [sp, #28]
 80049d4:	e495      	b.n	8004302 <arm_nn_vec_mat_mult_t_s8+0x1c2>
 80049d6:	fbc0 2301 	smlal	r2, r3, r0, r1
 80049da:	461d      	mov	r5, r3
 80049dc:	2a00      	cmp	r2, #0
 80049de:	4614      	mov	r4, r2
 80049e0:	f175 0300 	sbcs.w	r3, r5, #0
 80049e4:	db14      	blt.n	8004a10 <arm_nn_vec_mat_mult_t_s8+0x8d0>
 80049e6:	0fe2      	lsrs	r2, r4, #31
 80049e8:	ea42 0345 	orr.w	r3, r2, r5, lsl #1
 80049ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049ee:	2a00      	cmp	r2, #0
 80049f0:	dc8e      	bgt.n	8004910 <arm_nn_vec_mat_mult_t_s8+0x7d0>
 80049f2:	4251      	negs	r1, r2
 80049f4:	2201      	movs	r2, #1
 80049f6:	408a      	lsls	r2, r1
 80049f8:	3a01      	subs	r2, #1
 80049fa:	ea02 0003 	and.w	r0, r2, r3
 80049fe:	410b      	asrs	r3, r1
 8004a00:	ea4f 0262 	mov.w	r2, r2, asr #1
 8004a04:	bf48      	it	mi
 8004a06:	3201      	addmi	r2, #1
 8004a08:	4290      	cmp	r0, r2
 8004a0a:	bfc8      	it	gt
 8004a0c:	3301      	addgt	r3, #1
 8004a0e:	e77f      	b.n	8004910 <arm_nn_vec_mat_mult_t_s8+0x7d0>
 8004a10:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8004a14:	2100      	movs	r1, #0
 8004a16:	1824      	adds	r4, r4, r0
 8004a18:	414d      	adcs	r5, r1
 8004a1a:	0fe2      	lsrs	r2, r4, #31
 8004a1c:	ea42 0345 	orr.w	r3, r2, r5, lsl #1
 8004a20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	f73f af74 	bgt.w	8004910 <arm_nn_vec_mat_mult_t_s8+0x7d0>
 8004a28:	e7e3      	b.n	80049f2 <arm_nn_vec_mat_mult_t_s8+0x8b2>
 8004a2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a2c:	e7e1      	b.n	80049f2 <arm_nn_vec_mat_mult_t_s8+0x8b2>
 8004a2e:	2200      	movs	r2, #0
 8004a30:	e671      	b.n	8004716 <arm_nn_vec_mat_mult_t_s8+0x5d6>
 8004a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a36:	2300      	movs	r3, #0
 8004a38:	e75e      	b.n	80048f8 <arm_nn_vec_mat_mult_t_s8+0x7b8>
 8004a3a:	bf00      	nop
 8004a3c:	c0000001 	.word	0xc0000001

08004a40 <align_factor_cmsisnn>:
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d068      	beq.n	8004b16 <align_factor_cmsisnn+0xd6>
 8004a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	ed2d 8b04 	vpush	{d8-d9}
 8004a4c:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8004a50:	461e      	mov	r6, r3
 8004a52:	4615      	mov	r5, r2
 8004a54:	4682      	mov	sl, r0
 8004a56:	008c      	lsls	r4, r1, #2
 8004a58:	f04f 0900 	mov.w	r9, #0
 8004a5c:	eddf 9a2e 	vldr	s19, [pc, #184]	; 8004b18 <align_factor_cmsisnn+0xd8>
 8004a60:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8004a64:	f06f 0816 	mvn.w	r8, #22
 8004a68:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004a6c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8004a70:	edda 7a00 	vldr	s15, [sl]
 8004a74:	ee69 7a27 	vmul.f32	s15, s18, s15
 8004a78:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d429      	bmi.n	8004ad6 <align_factor_cmsisnn+0x96>
 8004a82:	dd46      	ble.n	8004b12 <align_factor_cmsisnn+0xd2>
 8004a84:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004a88:	f04f 31ff 	mov.w	r1, #4294967295
 8004a8c:	e005      	b.n	8004a9a <align_factor_cmsisnn+0x5a>
 8004a8e:	3901      	subs	r1, #1
 8004a90:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004a94:	f111 0f1f 	cmn.w	r1, #31
 8004a98:	d031      	beq.n	8004afe <align_factor_cmsisnn+0xbe>
 8004a9a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa2:	dcf4      	bgt.n	8004a8e <align_factor_cmsisnn+0x4e>
 8004aa4:	4249      	negs	r1, r1
 8004aa6:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004aaa:	f846 1009 	str.w	r1, [r6, r9]
 8004aae:	ee17 0a90 	vmov	r0, s15
 8004ab2:	f7fc f8b1 	bl	8000c18 <__aeabi_f2lz>
 8004ab6:	eb05 0309 	add.w	r3, r5, r9
 8004aba:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004abe:	bf18      	it	ne
 8004ac0:	ea87 70e1 	eorne.w	r0, r7, r1, asr #31
 8004ac4:	f109 0904 	add.w	r9, r9, #4
 8004ac8:	6018      	str	r0, [r3, #0]
 8004aca:	454c      	cmp	r4, r9
 8004acc:	d1d0      	bne.n	8004a70 <align_factor_cmsisnn+0x30>
 8004ace:	ecbd 8b04 	vpop	{d8-d9}
 8004ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad6:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ade:	d518      	bpl.n	8004b12 <align_factor_cmsisnn+0xd2>
 8004ae0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	e004      	b.n	8004af2 <align_factor_cmsisnn+0xb2>
 8004ae8:	3101      	adds	r1, #1
 8004aea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004aee:	2918      	cmp	r1, #24
 8004af0:	d009      	beq.n	8004b06 <align_factor_cmsisnn+0xc6>
 8004af2:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afa:	d4f5      	bmi.n	8004ae8 <align_factor_cmsisnn+0xa8>
 8004afc:	e7d2      	b.n	8004aa4 <align_factor_cmsisnn+0x64>
 8004afe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b02:	211e      	movs	r1, #30
 8004b04:	e7cf      	b.n	8004aa6 <align_factor_cmsisnn+0x66>
 8004b06:	f846 8009 	str.w	r8, [r6, r9]
 8004b0a:	eb05 0309 	add.w	r3, r5, r9
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e7d8      	b.n	8004ac4 <align_factor_cmsisnn+0x84>
 8004b12:	2100      	movs	r1, #0
 8004b14:	e7c7      	b.n	8004aa6 <align_factor_cmsisnn+0x66>
 8004b16:	4770      	bx	lr
 8004b18:	4f000000 	.word	0x4f000000

08004b1c <ai_array_to_buffer_fmt>:
 8004b1c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d02e      	beq.n	8004b82 <ai_array_to_buffer_fmt+0x66>
 8004b24:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8004b28:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <ai_array_to_buffer_fmt+0x78>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00e      	beq.n	8004b4c <ai_array_to_buffer_fmt+0x30>
 8004b2e:	dd11      	ble.n	8004b54 <ai_array_to_buffer_fmt+0x38>
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <ai_array_to_buffer_fmt+0x7c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00a      	beq.n	8004b4c <ai_array_to_buffer_fmt+0x30>
 8004b36:	dd18      	ble.n	8004b6a <ai_array_to_buffer_fmt+0x4e>
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <ai_array_to_buffer_fmt+0x80>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d006      	beq.n	8004b4c <ai_array_to_buffer_fmt+0x30>
 8004b3e:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <ai_array_to_buffer_fmt+0x84>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <ai_array_to_buffer_fmt+0x30>
 8004b44:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <ai_array_to_buffer_fmt+0x88>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d000      	beq.n	8004b4c <ai_array_to_buffer_fmt+0x30>
 8004b4a:	2340      	movs	r3, #64	; 0x40
 8004b4c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004b50:	4318      	orrs	r0, r3
 8004b52:	4770      	bx	lr
 8004b54:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <ai_array_to_buffer_fmt+0x8c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d0f8      	beq.n	8004b4c <ai_array_to_buffer_fmt+0x30>
 8004b5a:	dd06      	ble.n	8004b6a <ai_array_to_buffer_fmt+0x4e>
 8004b5c:	4a13      	ldr	r2, [pc, #76]	; (8004bac <ai_array_to_buffer_fmt+0x90>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d0f4      	beq.n	8004b4c <ai_array_to_buffer_fmt+0x30>
 8004b62:	320f      	adds	r2, #15
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d0f1      	beq.n	8004b4c <ai_array_to_buffer_fmt+0x30>
 8004b68:	e7ef      	b.n	8004b4a <ai_array_to_buffer_fmt+0x2e>
 8004b6a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d0ec      	beq.n	8004b4c <ai_array_to_buffer_fmt+0x30>
 8004b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d1e7      	bne.n	8004b4a <ai_array_to_buffer_fmt+0x2e>
 8004b7a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004b7e:	4318      	orrs	r0, r3
 8004b80:	4770      	bx	lr
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <ai_array_to_buffer_fmt+0x94>)
 8004b84:	4003      	ands	r3, r0
 8004b86:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8e:	4318      	orrs	r0, r3
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	00060440 	.word	0x00060440
 8004b98:	00840447 	.word	0x00840447
 8004b9c:	0084084f 	.word	0x0084084f
 8004ba0:	01821040 	.word	0x01821040
 8004ba4:	00840840 	.word	0x00840840
 8004ba8:	00040447 	.word	0x00040447
 8004bac:	00040840 	.word	0x00040840
 8004bb0:	00803fff 	.word	0x00803fff

08004bb4 <ai_array_get_byte_size>:
 8004bb4:	b1e1      	cbz	r1, 8004bf0 <ai_array_get_byte_size+0x3c>
 8004bb6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004bba:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8004bbe:	b410      	push	{r4}
 8004bc0:	f3c0 3482 	ubfx	r4, r0, #14, #3
 8004bc4:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8004bc8:	4423      	add	r3, r4
 8004bca:	2804      	cmp	r0, #4
 8004bcc:	fb01 f103 	mul.w	r1, r1, r3
 8004bd0:	f101 0107 	add.w	r1, r1, #7
 8004bd4:	f021 0107 	bic.w	r1, r1, #7
 8004bd8:	fa21 f102 	lsr.w	r1, r1, r2
 8004bdc:	d00a      	beq.n	8004bf4 <ai_array_get_byte_size+0x40>
 8004bde:	2808      	cmp	r0, #8
 8004be0:	d101      	bne.n	8004be6 <ai_array_get_byte_size+0x32>
 8004be2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8004be6:	3107      	adds	r1, #7
 8004be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bec:	08c8      	lsrs	r0, r1, #3
 8004bee:	4770      	bx	lr
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	4770      	bx	lr
 8004bf4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8004bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bfc:	3107      	adds	r1, #7
 8004bfe:	08c8      	lsrs	r0, r1, #3
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop

08004c04 <__errno>:
 8004c04:	4b01      	ldr	r3, [pc, #4]	; (8004c0c <__errno+0x8>)
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	200004b8 	.word	0x200004b8

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4d0d      	ldr	r5, [pc, #52]	; (8004c48 <__libc_init_array+0x38>)
 8004c14:	4c0d      	ldr	r4, [pc, #52]	; (8004c4c <__libc_init_array+0x3c>)
 8004c16:	1b64      	subs	r4, r4, r5
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	42a6      	cmp	r6, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	4d0b      	ldr	r5, [pc, #44]	; (8004c50 <__libc_init_array+0x40>)
 8004c22:	4c0c      	ldr	r4, [pc, #48]	; (8004c54 <__libc_init_array+0x44>)
 8004c24:	f002 ff42 	bl	8007aac <_init>
 8004c28:	1b64      	subs	r4, r4, r5
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	42a6      	cmp	r6, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c38:	4798      	blx	r3
 8004c3a:	3601      	adds	r6, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c42:	4798      	blx	r3
 8004c44:	3601      	adds	r6, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	08008264 	.word	0x08008264
 8004c4c:	08008264 	.word	0x08008264
 8004c50:	08008264 	.word	0x08008264
 8004c54:	08008268 	.word	0x08008268

08004c58 <malloc>:
 8004c58:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <malloc+0xc>)
 8004c5a:	4601      	mov	r1, r0
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	f000 b885 	b.w	8004d6c <_malloc_r>
 8004c62:	bf00      	nop
 8004c64:	200004b8 	.word	0x200004b8

08004c68 <memcpy>:
 8004c68:	440a      	add	r2, r1
 8004c6a:	4291      	cmp	r1, r2
 8004c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c70:	d100      	bne.n	8004c74 <memcpy+0xc>
 8004c72:	4770      	bx	lr
 8004c74:	b510      	push	{r4, lr}
 8004c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c7e:	4291      	cmp	r1, r2
 8004c80:	d1f9      	bne.n	8004c76 <memcpy+0xe>
 8004c82:	bd10      	pop	{r4, pc}

08004c84 <memset>:
 8004c84:	4402      	add	r2, r0
 8004c86:	4603      	mov	r3, r0
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d100      	bne.n	8004c8e <memset+0xa>
 8004c8c:	4770      	bx	lr
 8004c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c92:	e7f9      	b.n	8004c88 <memset+0x4>

08004c94 <_free_r>:
 8004c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c96:	2900      	cmp	r1, #0
 8004c98:	d044      	beq.n	8004d24 <_free_r+0x90>
 8004c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c9e:	9001      	str	r0, [sp, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ca6:	bfb8      	it	lt
 8004ca8:	18e4      	addlt	r4, r4, r3
 8004caa:	f001 fbeb 	bl	8006484 <__malloc_lock>
 8004cae:	4a1e      	ldr	r2, [pc, #120]	; (8004d28 <_free_r+0x94>)
 8004cb0:	9801      	ldr	r0, [sp, #4]
 8004cb2:	6813      	ldr	r3, [r2, #0]
 8004cb4:	b933      	cbnz	r3, 8004cc4 <_free_r+0x30>
 8004cb6:	6063      	str	r3, [r4, #4]
 8004cb8:	6014      	str	r4, [r2, #0]
 8004cba:	b003      	add	sp, #12
 8004cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cc0:	f001 bbe6 	b.w	8006490 <__malloc_unlock>
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	d908      	bls.n	8004cda <_free_r+0x46>
 8004cc8:	6825      	ldr	r5, [r4, #0]
 8004cca:	1961      	adds	r1, r4, r5
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	bf01      	itttt	eq
 8004cd0:	6819      	ldreq	r1, [r3, #0]
 8004cd2:	685b      	ldreq	r3, [r3, #4]
 8004cd4:	1949      	addeq	r1, r1, r5
 8004cd6:	6021      	streq	r1, [r4, #0]
 8004cd8:	e7ed      	b.n	8004cb6 <_free_r+0x22>
 8004cda:	461a      	mov	r2, r3
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	b10b      	cbz	r3, 8004ce4 <_free_r+0x50>
 8004ce0:	42a3      	cmp	r3, r4
 8004ce2:	d9fa      	bls.n	8004cda <_free_r+0x46>
 8004ce4:	6811      	ldr	r1, [r2, #0]
 8004ce6:	1855      	adds	r5, r2, r1
 8004ce8:	42a5      	cmp	r5, r4
 8004cea:	d10b      	bne.n	8004d04 <_free_r+0x70>
 8004cec:	6824      	ldr	r4, [r4, #0]
 8004cee:	4421      	add	r1, r4
 8004cf0:	1854      	adds	r4, r2, r1
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	d1e0      	bne.n	8004cba <_free_r+0x26>
 8004cf8:	681c      	ldr	r4, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	6053      	str	r3, [r2, #4]
 8004cfe:	4421      	add	r1, r4
 8004d00:	6011      	str	r1, [r2, #0]
 8004d02:	e7da      	b.n	8004cba <_free_r+0x26>
 8004d04:	d902      	bls.n	8004d0c <_free_r+0x78>
 8004d06:	230c      	movs	r3, #12
 8004d08:	6003      	str	r3, [r0, #0]
 8004d0a:	e7d6      	b.n	8004cba <_free_r+0x26>
 8004d0c:	6825      	ldr	r5, [r4, #0]
 8004d0e:	1961      	adds	r1, r4, r5
 8004d10:	428b      	cmp	r3, r1
 8004d12:	bf04      	itt	eq
 8004d14:	6819      	ldreq	r1, [r3, #0]
 8004d16:	685b      	ldreq	r3, [r3, #4]
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	bf04      	itt	eq
 8004d1c:	1949      	addeq	r1, r1, r5
 8004d1e:	6021      	streq	r1, [r4, #0]
 8004d20:	6054      	str	r4, [r2, #4]
 8004d22:	e7ca      	b.n	8004cba <_free_r+0x26>
 8004d24:	b003      	add	sp, #12
 8004d26:	bd30      	pop	{r4, r5, pc}
 8004d28:	20000810 	.word	0x20000810

08004d2c <sbrk_aligned>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	4e0e      	ldr	r6, [pc, #56]	; (8004d68 <sbrk_aligned+0x3c>)
 8004d30:	460c      	mov	r4, r1
 8004d32:	6831      	ldr	r1, [r6, #0]
 8004d34:	4605      	mov	r5, r0
 8004d36:	b911      	cbnz	r1, 8004d3e <sbrk_aligned+0x12>
 8004d38:	f000 fcf6 	bl	8005728 <_sbrk_r>
 8004d3c:	6030      	str	r0, [r6, #0]
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 fcf1 	bl	8005728 <_sbrk_r>
 8004d46:	1c43      	adds	r3, r0, #1
 8004d48:	d00a      	beq.n	8004d60 <sbrk_aligned+0x34>
 8004d4a:	1cc4      	adds	r4, r0, #3
 8004d4c:	f024 0403 	bic.w	r4, r4, #3
 8004d50:	42a0      	cmp	r0, r4
 8004d52:	d007      	beq.n	8004d64 <sbrk_aligned+0x38>
 8004d54:	1a21      	subs	r1, r4, r0
 8004d56:	4628      	mov	r0, r5
 8004d58:	f000 fce6 	bl	8005728 <_sbrk_r>
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d101      	bne.n	8004d64 <sbrk_aligned+0x38>
 8004d60:	f04f 34ff 	mov.w	r4, #4294967295
 8004d64:	4620      	mov	r0, r4
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	20000814 	.word	0x20000814

08004d6c <_malloc_r>:
 8004d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d70:	1ccd      	adds	r5, r1, #3
 8004d72:	f025 0503 	bic.w	r5, r5, #3
 8004d76:	3508      	adds	r5, #8
 8004d78:	2d0c      	cmp	r5, #12
 8004d7a:	bf38      	it	cc
 8004d7c:	250c      	movcc	r5, #12
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	4607      	mov	r7, r0
 8004d82:	db01      	blt.n	8004d88 <_malloc_r+0x1c>
 8004d84:	42a9      	cmp	r1, r5
 8004d86:	d905      	bls.n	8004d94 <_malloc_r+0x28>
 8004d88:	230c      	movs	r3, #12
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	4630      	mov	r0, r6
 8004d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d94:	4e2e      	ldr	r6, [pc, #184]	; (8004e50 <_malloc_r+0xe4>)
 8004d96:	f001 fb75 	bl	8006484 <__malloc_lock>
 8004d9a:	6833      	ldr	r3, [r6, #0]
 8004d9c:	461c      	mov	r4, r3
 8004d9e:	bb34      	cbnz	r4, 8004dee <_malloc_r+0x82>
 8004da0:	4629      	mov	r1, r5
 8004da2:	4638      	mov	r0, r7
 8004da4:	f7ff ffc2 	bl	8004d2c <sbrk_aligned>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	4604      	mov	r4, r0
 8004dac:	d14d      	bne.n	8004e4a <_malloc_r+0xde>
 8004dae:	6834      	ldr	r4, [r6, #0]
 8004db0:	4626      	mov	r6, r4
 8004db2:	2e00      	cmp	r6, #0
 8004db4:	d140      	bne.n	8004e38 <_malloc_r+0xcc>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	4631      	mov	r1, r6
 8004dba:	4638      	mov	r0, r7
 8004dbc:	eb04 0803 	add.w	r8, r4, r3
 8004dc0:	f000 fcb2 	bl	8005728 <_sbrk_r>
 8004dc4:	4580      	cmp	r8, r0
 8004dc6:	d13a      	bne.n	8004e3e <_malloc_r+0xd2>
 8004dc8:	6821      	ldr	r1, [r4, #0]
 8004dca:	3503      	adds	r5, #3
 8004dcc:	1a6d      	subs	r5, r5, r1
 8004dce:	f025 0503 	bic.w	r5, r5, #3
 8004dd2:	3508      	adds	r5, #8
 8004dd4:	2d0c      	cmp	r5, #12
 8004dd6:	bf38      	it	cc
 8004dd8:	250c      	movcc	r5, #12
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4638      	mov	r0, r7
 8004dde:	f7ff ffa5 	bl	8004d2c <sbrk_aligned>
 8004de2:	3001      	adds	r0, #1
 8004de4:	d02b      	beq.n	8004e3e <_malloc_r+0xd2>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	442b      	add	r3, r5
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	e00e      	b.n	8004e0c <_malloc_r+0xa0>
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	1b52      	subs	r2, r2, r5
 8004df2:	d41e      	bmi.n	8004e32 <_malloc_r+0xc6>
 8004df4:	2a0b      	cmp	r2, #11
 8004df6:	d916      	bls.n	8004e26 <_malloc_r+0xba>
 8004df8:	1961      	adds	r1, r4, r5
 8004dfa:	42a3      	cmp	r3, r4
 8004dfc:	6025      	str	r5, [r4, #0]
 8004dfe:	bf18      	it	ne
 8004e00:	6059      	strne	r1, [r3, #4]
 8004e02:	6863      	ldr	r3, [r4, #4]
 8004e04:	bf08      	it	eq
 8004e06:	6031      	streq	r1, [r6, #0]
 8004e08:	5162      	str	r2, [r4, r5]
 8004e0a:	604b      	str	r3, [r1, #4]
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f104 060b 	add.w	r6, r4, #11
 8004e12:	f001 fb3d 	bl	8006490 <__malloc_unlock>
 8004e16:	f026 0607 	bic.w	r6, r6, #7
 8004e1a:	1d23      	adds	r3, r4, #4
 8004e1c:	1af2      	subs	r2, r6, r3
 8004e1e:	d0b6      	beq.n	8004d8e <_malloc_r+0x22>
 8004e20:	1b9b      	subs	r3, r3, r6
 8004e22:	50a3      	str	r3, [r4, r2]
 8004e24:	e7b3      	b.n	8004d8e <_malloc_r+0x22>
 8004e26:	6862      	ldr	r2, [r4, #4]
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	bf0c      	ite	eq
 8004e2c:	6032      	streq	r2, [r6, #0]
 8004e2e:	605a      	strne	r2, [r3, #4]
 8004e30:	e7ec      	b.n	8004e0c <_malloc_r+0xa0>
 8004e32:	4623      	mov	r3, r4
 8004e34:	6864      	ldr	r4, [r4, #4]
 8004e36:	e7b2      	b.n	8004d9e <_malloc_r+0x32>
 8004e38:	4634      	mov	r4, r6
 8004e3a:	6876      	ldr	r6, [r6, #4]
 8004e3c:	e7b9      	b.n	8004db2 <_malloc_r+0x46>
 8004e3e:	230c      	movs	r3, #12
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	4638      	mov	r0, r7
 8004e44:	f001 fb24 	bl	8006490 <__malloc_unlock>
 8004e48:	e7a1      	b.n	8004d8e <_malloc_r+0x22>
 8004e4a:	6025      	str	r5, [r4, #0]
 8004e4c:	e7de      	b.n	8004e0c <_malloc_r+0xa0>
 8004e4e:	bf00      	nop
 8004e50:	20000810 	.word	0x20000810

08004e54 <__cvt>:
 8004e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	ec55 4b10 	vmov	r4, r5, d0
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	460e      	mov	r6, r1
 8004e60:	4619      	mov	r1, r3
 8004e62:	462b      	mov	r3, r5
 8004e64:	bfbb      	ittet	lt
 8004e66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e6a:	461d      	movlt	r5, r3
 8004e6c:	2300      	movge	r3, #0
 8004e6e:	232d      	movlt	r3, #45	; 0x2d
 8004e70:	700b      	strb	r3, [r1, #0]
 8004e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e78:	4691      	mov	r9, r2
 8004e7a:	f023 0820 	bic.w	r8, r3, #32
 8004e7e:	bfbc      	itt	lt
 8004e80:	4622      	movlt	r2, r4
 8004e82:	4614      	movlt	r4, r2
 8004e84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e88:	d005      	beq.n	8004e96 <__cvt+0x42>
 8004e8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e8e:	d100      	bne.n	8004e92 <__cvt+0x3e>
 8004e90:	3601      	adds	r6, #1
 8004e92:	2102      	movs	r1, #2
 8004e94:	e000      	b.n	8004e98 <__cvt+0x44>
 8004e96:	2103      	movs	r1, #3
 8004e98:	ab03      	add	r3, sp, #12
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	ab02      	add	r3, sp, #8
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	ec45 4b10 	vmov	d0, r4, r5
 8004ea4:	4653      	mov	r3, sl
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	f000 fcfa 	bl	80058a0 <_dtoa_r>
 8004eac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	d102      	bne.n	8004eba <__cvt+0x66>
 8004eb4:	f019 0f01 	tst.w	r9, #1
 8004eb8:	d022      	beq.n	8004f00 <__cvt+0xac>
 8004eba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ebe:	eb07 0906 	add.w	r9, r7, r6
 8004ec2:	d110      	bne.n	8004ee6 <__cvt+0x92>
 8004ec4:	783b      	ldrb	r3, [r7, #0]
 8004ec6:	2b30      	cmp	r3, #48	; 0x30
 8004ec8:	d10a      	bne.n	8004ee0 <__cvt+0x8c>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f7fb fe19 	bl	8000b08 <__aeabi_dcmpeq>
 8004ed6:	b918      	cbnz	r0, 8004ee0 <__cvt+0x8c>
 8004ed8:	f1c6 0601 	rsb	r6, r6, #1
 8004edc:	f8ca 6000 	str.w	r6, [sl]
 8004ee0:	f8da 3000 	ldr.w	r3, [sl]
 8004ee4:	4499      	add	r9, r3
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4620      	mov	r0, r4
 8004eec:	4629      	mov	r1, r5
 8004eee:	f7fb fe0b 	bl	8000b08 <__aeabi_dcmpeq>
 8004ef2:	b108      	cbz	r0, 8004ef8 <__cvt+0xa4>
 8004ef4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ef8:	2230      	movs	r2, #48	; 0x30
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	454b      	cmp	r3, r9
 8004efe:	d307      	bcc.n	8004f10 <__cvt+0xbc>
 8004f00:	9b03      	ldr	r3, [sp, #12]
 8004f02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f04:	1bdb      	subs	r3, r3, r7
 8004f06:	4638      	mov	r0, r7
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	b004      	add	sp, #16
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	1c59      	adds	r1, r3, #1
 8004f12:	9103      	str	r1, [sp, #12]
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e7f0      	b.n	8004efa <__cvt+0xa6>

08004f18 <__exponent>:
 8004f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	bfb8      	it	lt
 8004f20:	4249      	neglt	r1, r1
 8004f22:	f803 2b02 	strb.w	r2, [r3], #2
 8004f26:	bfb4      	ite	lt
 8004f28:	222d      	movlt	r2, #45	; 0x2d
 8004f2a:	222b      	movge	r2, #43	; 0x2b
 8004f2c:	2909      	cmp	r1, #9
 8004f2e:	7042      	strb	r2, [r0, #1]
 8004f30:	dd2a      	ble.n	8004f88 <__exponent+0x70>
 8004f32:	f10d 0407 	add.w	r4, sp, #7
 8004f36:	46a4      	mov	ip, r4
 8004f38:	270a      	movs	r7, #10
 8004f3a:	46a6      	mov	lr, r4
 8004f3c:	460a      	mov	r2, r1
 8004f3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f42:	fb07 1516 	mls	r5, r7, r6, r1
 8004f46:	3530      	adds	r5, #48	; 0x30
 8004f48:	2a63      	cmp	r2, #99	; 0x63
 8004f4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f52:	4631      	mov	r1, r6
 8004f54:	dcf1      	bgt.n	8004f3a <__exponent+0x22>
 8004f56:	3130      	adds	r1, #48	; 0x30
 8004f58:	f1ae 0502 	sub.w	r5, lr, #2
 8004f5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f60:	1c44      	adds	r4, r0, #1
 8004f62:	4629      	mov	r1, r5
 8004f64:	4561      	cmp	r1, ip
 8004f66:	d30a      	bcc.n	8004f7e <__exponent+0x66>
 8004f68:	f10d 0209 	add.w	r2, sp, #9
 8004f6c:	eba2 020e 	sub.w	r2, r2, lr
 8004f70:	4565      	cmp	r5, ip
 8004f72:	bf88      	it	hi
 8004f74:	2200      	movhi	r2, #0
 8004f76:	4413      	add	r3, r2
 8004f78:	1a18      	subs	r0, r3, r0
 8004f7a:	b003      	add	sp, #12
 8004f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f86:	e7ed      	b.n	8004f64 <__exponent+0x4c>
 8004f88:	2330      	movs	r3, #48	; 0x30
 8004f8a:	3130      	adds	r1, #48	; 0x30
 8004f8c:	7083      	strb	r3, [r0, #2]
 8004f8e:	70c1      	strb	r1, [r0, #3]
 8004f90:	1d03      	adds	r3, r0, #4
 8004f92:	e7f1      	b.n	8004f78 <__exponent+0x60>

08004f94 <_printf_float>:
 8004f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	ed2d 8b02 	vpush	{d8}
 8004f9c:	b08d      	sub	sp, #52	; 0x34
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fa4:	4616      	mov	r6, r2
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	4605      	mov	r5, r0
 8004faa:	f001 fa67 	bl	800647c <_localeconv_r>
 8004fae:	f8d0 a000 	ldr.w	sl, [r0]
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	f7fb f92c 	bl	8000210 <strlen>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	930a      	str	r3, [sp, #40]	; 0x28
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	9305      	str	r3, [sp, #20]
 8004fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fc8:	3307      	adds	r3, #7
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	f103 0208 	add.w	r2, r3, #8
 8004fd2:	f8c8 2000 	str.w	r2, [r8]
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fe6:	9307      	str	r3, [sp, #28]
 8004fe8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fec:	ee08 0a10 	vmov	s16, r0
 8004ff0:	4b9f      	ldr	r3, [pc, #636]	; (8005270 <_printf_float+0x2dc>)
 8004ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffa:	f7fb fdb7 	bl	8000b6c <__aeabi_dcmpun>
 8004ffe:	bb88      	cbnz	r0, 8005064 <_printf_float+0xd0>
 8005000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005004:	4b9a      	ldr	r3, [pc, #616]	; (8005270 <_printf_float+0x2dc>)
 8005006:	f04f 32ff 	mov.w	r2, #4294967295
 800500a:	f7fb fd91 	bl	8000b30 <__aeabi_dcmple>
 800500e:	bb48      	cbnz	r0, 8005064 <_printf_float+0xd0>
 8005010:	2200      	movs	r2, #0
 8005012:	2300      	movs	r3, #0
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb fd80 	bl	8000b1c <__aeabi_dcmplt>
 800501c:	b110      	cbz	r0, 8005024 <_printf_float+0x90>
 800501e:	232d      	movs	r3, #45	; 0x2d
 8005020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005024:	4b93      	ldr	r3, [pc, #588]	; (8005274 <_printf_float+0x2e0>)
 8005026:	4894      	ldr	r0, [pc, #592]	; (8005278 <_printf_float+0x2e4>)
 8005028:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800502c:	bf94      	ite	ls
 800502e:	4698      	movls	r8, r3
 8005030:	4680      	movhi	r8, r0
 8005032:	2303      	movs	r3, #3
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	9b05      	ldr	r3, [sp, #20]
 8005038:	f023 0204 	bic.w	r2, r3, #4
 800503c:	6022      	str	r2, [r4, #0]
 800503e:	f04f 0900 	mov.w	r9, #0
 8005042:	9700      	str	r7, [sp, #0]
 8005044:	4633      	mov	r3, r6
 8005046:	aa0b      	add	r2, sp, #44	; 0x2c
 8005048:	4621      	mov	r1, r4
 800504a:	4628      	mov	r0, r5
 800504c:	f000 f9d8 	bl	8005400 <_printf_common>
 8005050:	3001      	adds	r0, #1
 8005052:	f040 8090 	bne.w	8005176 <_printf_float+0x1e2>
 8005056:	f04f 30ff 	mov.w	r0, #4294967295
 800505a:	b00d      	add	sp, #52	; 0x34
 800505c:	ecbd 8b02 	vpop	{d8}
 8005060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	4640      	mov	r0, r8
 800506a:	4649      	mov	r1, r9
 800506c:	f7fb fd7e 	bl	8000b6c <__aeabi_dcmpun>
 8005070:	b140      	cbz	r0, 8005084 <_printf_float+0xf0>
 8005072:	464b      	mov	r3, r9
 8005074:	2b00      	cmp	r3, #0
 8005076:	bfbc      	itt	lt
 8005078:	232d      	movlt	r3, #45	; 0x2d
 800507a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800507e:	487f      	ldr	r0, [pc, #508]	; (800527c <_printf_float+0x2e8>)
 8005080:	4b7f      	ldr	r3, [pc, #508]	; (8005280 <_printf_float+0x2ec>)
 8005082:	e7d1      	b.n	8005028 <_printf_float+0x94>
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800508a:	9206      	str	r2, [sp, #24]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	d13f      	bne.n	8005110 <_printf_float+0x17c>
 8005090:	2306      	movs	r3, #6
 8005092:	6063      	str	r3, [r4, #4]
 8005094:	9b05      	ldr	r3, [sp, #20]
 8005096:	6861      	ldr	r1, [r4, #4]
 8005098:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800509c:	2300      	movs	r3, #0
 800509e:	9303      	str	r3, [sp, #12]
 80050a0:	ab0a      	add	r3, sp, #40	; 0x28
 80050a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050a6:	ab09      	add	r3, sp, #36	; 0x24
 80050a8:	ec49 8b10 	vmov	d0, r8, r9
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	6022      	str	r2, [r4, #0]
 80050b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050b4:	4628      	mov	r0, r5
 80050b6:	f7ff fecd 	bl	8004e54 <__cvt>
 80050ba:	9b06      	ldr	r3, [sp, #24]
 80050bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050be:	2b47      	cmp	r3, #71	; 0x47
 80050c0:	4680      	mov	r8, r0
 80050c2:	d108      	bne.n	80050d6 <_printf_float+0x142>
 80050c4:	1cc8      	adds	r0, r1, #3
 80050c6:	db02      	blt.n	80050ce <_printf_float+0x13a>
 80050c8:	6863      	ldr	r3, [r4, #4]
 80050ca:	4299      	cmp	r1, r3
 80050cc:	dd41      	ble.n	8005152 <_printf_float+0x1be>
 80050ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80050d2:	fa5f fb8b 	uxtb.w	fp, fp
 80050d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050da:	d820      	bhi.n	800511e <_printf_float+0x18a>
 80050dc:	3901      	subs	r1, #1
 80050de:	465a      	mov	r2, fp
 80050e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050e4:	9109      	str	r1, [sp, #36]	; 0x24
 80050e6:	f7ff ff17 	bl	8004f18 <__exponent>
 80050ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ec:	1813      	adds	r3, r2, r0
 80050ee:	2a01      	cmp	r2, #1
 80050f0:	4681      	mov	r9, r0
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	dc02      	bgt.n	80050fc <_printf_float+0x168>
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	07d2      	lsls	r2, r2, #31
 80050fa:	d501      	bpl.n	8005100 <_printf_float+0x16c>
 80050fc:	3301      	adds	r3, #1
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005104:	2b00      	cmp	r3, #0
 8005106:	d09c      	beq.n	8005042 <_printf_float+0xae>
 8005108:	232d      	movs	r3, #45	; 0x2d
 800510a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510e:	e798      	b.n	8005042 <_printf_float+0xae>
 8005110:	9a06      	ldr	r2, [sp, #24]
 8005112:	2a47      	cmp	r2, #71	; 0x47
 8005114:	d1be      	bne.n	8005094 <_printf_float+0x100>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1bc      	bne.n	8005094 <_printf_float+0x100>
 800511a:	2301      	movs	r3, #1
 800511c:	e7b9      	b.n	8005092 <_printf_float+0xfe>
 800511e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005122:	d118      	bne.n	8005156 <_printf_float+0x1c2>
 8005124:	2900      	cmp	r1, #0
 8005126:	6863      	ldr	r3, [r4, #4]
 8005128:	dd0b      	ble.n	8005142 <_printf_float+0x1ae>
 800512a:	6121      	str	r1, [r4, #16]
 800512c:	b913      	cbnz	r3, 8005134 <_printf_float+0x1a0>
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	07d0      	lsls	r0, r2, #31
 8005132:	d502      	bpl.n	800513a <_printf_float+0x1a6>
 8005134:	3301      	adds	r3, #1
 8005136:	440b      	add	r3, r1
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	65a1      	str	r1, [r4, #88]	; 0x58
 800513c:	f04f 0900 	mov.w	r9, #0
 8005140:	e7de      	b.n	8005100 <_printf_float+0x16c>
 8005142:	b913      	cbnz	r3, 800514a <_printf_float+0x1b6>
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	07d2      	lsls	r2, r2, #31
 8005148:	d501      	bpl.n	800514e <_printf_float+0x1ba>
 800514a:	3302      	adds	r3, #2
 800514c:	e7f4      	b.n	8005138 <_printf_float+0x1a4>
 800514e:	2301      	movs	r3, #1
 8005150:	e7f2      	b.n	8005138 <_printf_float+0x1a4>
 8005152:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005158:	4299      	cmp	r1, r3
 800515a:	db05      	blt.n	8005168 <_printf_float+0x1d4>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	6121      	str	r1, [r4, #16]
 8005160:	07d8      	lsls	r0, r3, #31
 8005162:	d5ea      	bpl.n	800513a <_printf_float+0x1a6>
 8005164:	1c4b      	adds	r3, r1, #1
 8005166:	e7e7      	b.n	8005138 <_printf_float+0x1a4>
 8005168:	2900      	cmp	r1, #0
 800516a:	bfd4      	ite	le
 800516c:	f1c1 0202 	rsble	r2, r1, #2
 8005170:	2201      	movgt	r2, #1
 8005172:	4413      	add	r3, r2
 8005174:	e7e0      	b.n	8005138 <_printf_float+0x1a4>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	055a      	lsls	r2, r3, #21
 800517a:	d407      	bmi.n	800518c <_printf_float+0x1f8>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	4642      	mov	r2, r8
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	47b8      	blx	r7
 8005186:	3001      	adds	r0, #1
 8005188:	d12c      	bne.n	80051e4 <_printf_float+0x250>
 800518a:	e764      	b.n	8005056 <_printf_float+0xc2>
 800518c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005190:	f240 80e0 	bls.w	8005354 <_printf_float+0x3c0>
 8005194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005198:	2200      	movs	r2, #0
 800519a:	2300      	movs	r3, #0
 800519c:	f7fb fcb4 	bl	8000b08 <__aeabi_dcmpeq>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d034      	beq.n	800520e <_printf_float+0x27a>
 80051a4:	4a37      	ldr	r2, [pc, #220]	; (8005284 <_printf_float+0x2f0>)
 80051a6:	2301      	movs	r3, #1
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	f43f af51 	beq.w	8005056 <_printf_float+0xc2>
 80051b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b8:	429a      	cmp	r2, r3
 80051ba:	db02      	blt.n	80051c2 <_printf_float+0x22e>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	07d8      	lsls	r0, r3, #31
 80051c0:	d510      	bpl.n	80051e4 <_printf_float+0x250>
 80051c2:	ee18 3a10 	vmov	r3, s16
 80051c6:	4652      	mov	r2, sl
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	47b8      	blx	r7
 80051ce:	3001      	adds	r0, #1
 80051d0:	f43f af41 	beq.w	8005056 <_printf_float+0xc2>
 80051d4:	f04f 0800 	mov.w	r8, #0
 80051d8:	f104 091a 	add.w	r9, r4, #26
 80051dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051de:	3b01      	subs	r3, #1
 80051e0:	4543      	cmp	r3, r8
 80051e2:	dc09      	bgt.n	80051f8 <_printf_float+0x264>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	079b      	lsls	r3, r3, #30
 80051e8:	f100 8105 	bmi.w	80053f6 <_printf_float+0x462>
 80051ec:	68e0      	ldr	r0, [r4, #12]
 80051ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051f0:	4298      	cmp	r0, r3
 80051f2:	bfb8      	it	lt
 80051f4:	4618      	movlt	r0, r3
 80051f6:	e730      	b.n	800505a <_printf_float+0xc6>
 80051f8:	2301      	movs	r3, #1
 80051fa:	464a      	mov	r2, r9
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	f43f af27 	beq.w	8005056 <_printf_float+0xc2>
 8005208:	f108 0801 	add.w	r8, r8, #1
 800520c:	e7e6      	b.n	80051dc <_printf_float+0x248>
 800520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	dc39      	bgt.n	8005288 <_printf_float+0x2f4>
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <_printf_float+0x2f0>)
 8005216:	2301      	movs	r3, #1
 8005218:	4631      	mov	r1, r6
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f af19 	beq.w	8005056 <_printf_float+0xc2>
 8005224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005228:	4313      	orrs	r3, r2
 800522a:	d102      	bne.n	8005232 <_printf_float+0x29e>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	07d9      	lsls	r1, r3, #31
 8005230:	d5d8      	bpl.n	80051e4 <_printf_float+0x250>
 8005232:	ee18 3a10 	vmov	r3, s16
 8005236:	4652      	mov	r2, sl
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f af09 	beq.w	8005056 <_printf_float+0xc2>
 8005244:	f04f 0900 	mov.w	r9, #0
 8005248:	f104 0a1a 	add.w	sl, r4, #26
 800524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524e:	425b      	negs	r3, r3
 8005250:	454b      	cmp	r3, r9
 8005252:	dc01      	bgt.n	8005258 <_printf_float+0x2c4>
 8005254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005256:	e792      	b.n	800517e <_printf_float+0x1ea>
 8005258:	2301      	movs	r3, #1
 800525a:	4652      	mov	r2, sl
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	f43f aef7 	beq.w	8005056 <_printf_float+0xc2>
 8005268:	f109 0901 	add.w	r9, r9, #1
 800526c:	e7ee      	b.n	800524c <_printf_float+0x2b8>
 800526e:	bf00      	nop
 8005270:	7fefffff 	.word	0x7fefffff
 8005274:	08007e88 	.word	0x08007e88
 8005278:	08007e8c 	.word	0x08007e8c
 800527c:	08007e94 	.word	0x08007e94
 8005280:	08007e90 	.word	0x08007e90
 8005284:	08007e98 	.word	0x08007e98
 8005288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800528a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800528c:	429a      	cmp	r2, r3
 800528e:	bfa8      	it	ge
 8005290:	461a      	movge	r2, r3
 8005292:	2a00      	cmp	r2, #0
 8005294:	4691      	mov	r9, r2
 8005296:	dc37      	bgt.n	8005308 <_printf_float+0x374>
 8005298:	f04f 0b00 	mov.w	fp, #0
 800529c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052a0:	f104 021a 	add.w	r2, r4, #26
 80052a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052a6:	9305      	str	r3, [sp, #20]
 80052a8:	eba3 0309 	sub.w	r3, r3, r9
 80052ac:	455b      	cmp	r3, fp
 80052ae:	dc33      	bgt.n	8005318 <_printf_float+0x384>
 80052b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052b4:	429a      	cmp	r2, r3
 80052b6:	db3b      	blt.n	8005330 <_printf_float+0x39c>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	07da      	lsls	r2, r3, #31
 80052bc:	d438      	bmi.n	8005330 <_printf_float+0x39c>
 80052be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c0:	9a05      	ldr	r2, [sp, #20]
 80052c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052c4:	1a9a      	subs	r2, r3, r2
 80052c6:	eba3 0901 	sub.w	r9, r3, r1
 80052ca:	4591      	cmp	r9, r2
 80052cc:	bfa8      	it	ge
 80052ce:	4691      	movge	r9, r2
 80052d0:	f1b9 0f00 	cmp.w	r9, #0
 80052d4:	dc35      	bgt.n	8005342 <_printf_float+0x3ae>
 80052d6:	f04f 0800 	mov.w	r8, #0
 80052da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052de:	f104 0a1a 	add.w	sl, r4, #26
 80052e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	eba3 0309 	sub.w	r3, r3, r9
 80052ec:	4543      	cmp	r3, r8
 80052ee:	f77f af79 	ble.w	80051e4 <_printf_float+0x250>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4652      	mov	r2, sl
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f aeaa 	beq.w	8005056 <_printf_float+0xc2>
 8005302:	f108 0801 	add.w	r8, r8, #1
 8005306:	e7ec      	b.n	80052e2 <_printf_float+0x34e>
 8005308:	4613      	mov	r3, r2
 800530a:	4631      	mov	r1, r6
 800530c:	4642      	mov	r2, r8
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	d1c0      	bne.n	8005298 <_printf_float+0x304>
 8005316:	e69e      	b.n	8005056 <_printf_float+0xc2>
 8005318:	2301      	movs	r3, #1
 800531a:	4631      	mov	r1, r6
 800531c:	4628      	mov	r0, r5
 800531e:	9205      	str	r2, [sp, #20]
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f ae97 	beq.w	8005056 <_printf_float+0xc2>
 8005328:	9a05      	ldr	r2, [sp, #20]
 800532a:	f10b 0b01 	add.w	fp, fp, #1
 800532e:	e7b9      	b.n	80052a4 <_printf_float+0x310>
 8005330:	ee18 3a10 	vmov	r3, s16
 8005334:	4652      	mov	r2, sl
 8005336:	4631      	mov	r1, r6
 8005338:	4628      	mov	r0, r5
 800533a:	47b8      	blx	r7
 800533c:	3001      	adds	r0, #1
 800533e:	d1be      	bne.n	80052be <_printf_float+0x32a>
 8005340:	e689      	b.n	8005056 <_printf_float+0xc2>
 8005342:	9a05      	ldr	r2, [sp, #20]
 8005344:	464b      	mov	r3, r9
 8005346:	4442      	add	r2, r8
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	d1c1      	bne.n	80052d6 <_printf_float+0x342>
 8005352:	e680      	b.n	8005056 <_printf_float+0xc2>
 8005354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005356:	2a01      	cmp	r2, #1
 8005358:	dc01      	bgt.n	800535e <_printf_float+0x3ca>
 800535a:	07db      	lsls	r3, r3, #31
 800535c:	d538      	bpl.n	80053d0 <_printf_float+0x43c>
 800535e:	2301      	movs	r3, #1
 8005360:	4642      	mov	r2, r8
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae74 	beq.w	8005056 <_printf_float+0xc2>
 800536e:	ee18 3a10 	vmov	r3, s16
 8005372:	4652      	mov	r2, sl
 8005374:	4631      	mov	r1, r6
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	f43f ae6b 	beq.w	8005056 <_printf_float+0xc2>
 8005380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005384:	2200      	movs	r2, #0
 8005386:	2300      	movs	r3, #0
 8005388:	f7fb fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 800538c:	b9d8      	cbnz	r0, 80053c6 <_printf_float+0x432>
 800538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005390:	f108 0201 	add.w	r2, r8, #1
 8005394:	3b01      	subs	r3, #1
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	d10e      	bne.n	80053be <_printf_float+0x42a>
 80053a0:	e659      	b.n	8005056 <_printf_float+0xc2>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4631      	mov	r1, r6
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b8      	blx	r7
 80053ac:	3001      	adds	r0, #1
 80053ae:	f43f ae52 	beq.w	8005056 <_printf_float+0xc2>
 80053b2:	f108 0801 	add.w	r8, r8, #1
 80053b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b8:	3b01      	subs	r3, #1
 80053ba:	4543      	cmp	r3, r8
 80053bc:	dcf1      	bgt.n	80053a2 <_printf_float+0x40e>
 80053be:	464b      	mov	r3, r9
 80053c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053c4:	e6dc      	b.n	8005180 <_printf_float+0x1ec>
 80053c6:	f04f 0800 	mov.w	r8, #0
 80053ca:	f104 0a1a 	add.w	sl, r4, #26
 80053ce:	e7f2      	b.n	80053b6 <_printf_float+0x422>
 80053d0:	2301      	movs	r3, #1
 80053d2:	4642      	mov	r2, r8
 80053d4:	e7df      	b.n	8005396 <_printf_float+0x402>
 80053d6:	2301      	movs	r3, #1
 80053d8:	464a      	mov	r2, r9
 80053da:	4631      	mov	r1, r6
 80053dc:	4628      	mov	r0, r5
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	f43f ae38 	beq.w	8005056 <_printf_float+0xc2>
 80053e6:	f108 0801 	add.w	r8, r8, #1
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ee:	1a5b      	subs	r3, r3, r1
 80053f0:	4543      	cmp	r3, r8
 80053f2:	dcf0      	bgt.n	80053d6 <_printf_float+0x442>
 80053f4:	e6fa      	b.n	80051ec <_printf_float+0x258>
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	f104 0919 	add.w	r9, r4, #25
 80053fe:	e7f4      	b.n	80053ea <_printf_float+0x456>

08005400 <_printf_common>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	4616      	mov	r6, r2
 8005406:	4699      	mov	r9, r3
 8005408:	688a      	ldr	r2, [r1, #8]
 800540a:	690b      	ldr	r3, [r1, #16]
 800540c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005410:	4293      	cmp	r3, r2
 8005412:	bfb8      	it	lt
 8005414:	4613      	movlt	r3, r2
 8005416:	6033      	str	r3, [r6, #0]
 8005418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800541c:	4607      	mov	r7, r0
 800541e:	460c      	mov	r4, r1
 8005420:	b10a      	cbz	r2, 8005426 <_printf_common+0x26>
 8005422:	3301      	adds	r3, #1
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	0699      	lsls	r1, r3, #26
 800542a:	bf42      	ittt	mi
 800542c:	6833      	ldrmi	r3, [r6, #0]
 800542e:	3302      	addmi	r3, #2
 8005430:	6033      	strmi	r3, [r6, #0]
 8005432:	6825      	ldr	r5, [r4, #0]
 8005434:	f015 0506 	ands.w	r5, r5, #6
 8005438:	d106      	bne.n	8005448 <_printf_common+0x48>
 800543a:	f104 0a19 	add.w	sl, r4, #25
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	6832      	ldr	r2, [r6, #0]
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	42ab      	cmp	r3, r5
 8005446:	dc26      	bgt.n	8005496 <_printf_common+0x96>
 8005448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800544c:	1e13      	subs	r3, r2, #0
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	bf18      	it	ne
 8005452:	2301      	movne	r3, #1
 8005454:	0692      	lsls	r2, r2, #26
 8005456:	d42b      	bmi.n	80054b0 <_printf_common+0xb0>
 8005458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800545c:	4649      	mov	r1, r9
 800545e:	4638      	mov	r0, r7
 8005460:	47c0      	blx	r8
 8005462:	3001      	adds	r0, #1
 8005464:	d01e      	beq.n	80054a4 <_printf_common+0xa4>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	68e5      	ldr	r5, [r4, #12]
 800546a:	6832      	ldr	r2, [r6, #0]
 800546c:	f003 0306 	and.w	r3, r3, #6
 8005470:	2b04      	cmp	r3, #4
 8005472:	bf08      	it	eq
 8005474:	1aad      	subeq	r5, r5, r2
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	6922      	ldr	r2, [r4, #16]
 800547a:	bf0c      	ite	eq
 800547c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005480:	2500      	movne	r5, #0
 8005482:	4293      	cmp	r3, r2
 8005484:	bfc4      	itt	gt
 8005486:	1a9b      	subgt	r3, r3, r2
 8005488:	18ed      	addgt	r5, r5, r3
 800548a:	2600      	movs	r6, #0
 800548c:	341a      	adds	r4, #26
 800548e:	42b5      	cmp	r5, r6
 8005490:	d11a      	bne.n	80054c8 <_printf_common+0xc8>
 8005492:	2000      	movs	r0, #0
 8005494:	e008      	b.n	80054a8 <_printf_common+0xa8>
 8005496:	2301      	movs	r3, #1
 8005498:	4652      	mov	r2, sl
 800549a:	4649      	mov	r1, r9
 800549c:	4638      	mov	r0, r7
 800549e:	47c0      	blx	r8
 80054a0:	3001      	adds	r0, #1
 80054a2:	d103      	bne.n	80054ac <_printf_common+0xac>
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ac:	3501      	adds	r5, #1
 80054ae:	e7c6      	b.n	800543e <_printf_common+0x3e>
 80054b0:	18e1      	adds	r1, r4, r3
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	2030      	movs	r0, #48	; 0x30
 80054b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ba:	4422      	add	r2, r4
 80054bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c4:	3302      	adds	r3, #2
 80054c6:	e7c7      	b.n	8005458 <_printf_common+0x58>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4622      	mov	r2, r4
 80054cc:	4649      	mov	r1, r9
 80054ce:	4638      	mov	r0, r7
 80054d0:	47c0      	blx	r8
 80054d2:	3001      	adds	r0, #1
 80054d4:	d0e6      	beq.n	80054a4 <_printf_common+0xa4>
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7d9      	b.n	800548e <_printf_common+0x8e>
	...

080054dc <_printf_i>:
 80054dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	7e0f      	ldrb	r7, [r1, #24]
 80054e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e4:	2f78      	cmp	r7, #120	; 0x78
 80054e6:	4691      	mov	r9, r2
 80054e8:	4680      	mov	r8, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	469a      	mov	sl, r3
 80054ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054f2:	d807      	bhi.n	8005504 <_printf_i+0x28>
 80054f4:	2f62      	cmp	r7, #98	; 0x62
 80054f6:	d80a      	bhi.n	800550e <_printf_i+0x32>
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	f000 80d8 	beq.w	80056ae <_printf_i+0x1d2>
 80054fe:	2f58      	cmp	r7, #88	; 0x58
 8005500:	f000 80a3 	beq.w	800564a <_printf_i+0x16e>
 8005504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800550c:	e03a      	b.n	8005584 <_printf_i+0xa8>
 800550e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005512:	2b15      	cmp	r3, #21
 8005514:	d8f6      	bhi.n	8005504 <_printf_i+0x28>
 8005516:	a101      	add	r1, pc, #4	; (adr r1, 800551c <_printf_i+0x40>)
 8005518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800551c:	08005575 	.word	0x08005575
 8005520:	08005589 	.word	0x08005589
 8005524:	08005505 	.word	0x08005505
 8005528:	08005505 	.word	0x08005505
 800552c:	08005505 	.word	0x08005505
 8005530:	08005505 	.word	0x08005505
 8005534:	08005589 	.word	0x08005589
 8005538:	08005505 	.word	0x08005505
 800553c:	08005505 	.word	0x08005505
 8005540:	08005505 	.word	0x08005505
 8005544:	08005505 	.word	0x08005505
 8005548:	08005695 	.word	0x08005695
 800554c:	080055b9 	.word	0x080055b9
 8005550:	08005677 	.word	0x08005677
 8005554:	08005505 	.word	0x08005505
 8005558:	08005505 	.word	0x08005505
 800555c:	080056b7 	.word	0x080056b7
 8005560:	08005505 	.word	0x08005505
 8005564:	080055b9 	.word	0x080055b9
 8005568:	08005505 	.word	0x08005505
 800556c:	08005505 	.word	0x08005505
 8005570:	0800567f 	.word	0x0800567f
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	602a      	str	r2, [r5, #0]
 800557c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005584:	2301      	movs	r3, #1
 8005586:	e0a3      	b.n	80056d0 <_printf_i+0x1f4>
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	6829      	ldr	r1, [r5, #0]
 800558c:	0606      	lsls	r6, r0, #24
 800558e:	f101 0304 	add.w	r3, r1, #4
 8005592:	d50a      	bpl.n	80055aa <_printf_i+0xce>
 8005594:	680e      	ldr	r6, [r1, #0]
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	2e00      	cmp	r6, #0
 800559a:	da03      	bge.n	80055a4 <_printf_i+0xc8>
 800559c:	232d      	movs	r3, #45	; 0x2d
 800559e:	4276      	negs	r6, r6
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a4:	485e      	ldr	r0, [pc, #376]	; (8005720 <_printf_i+0x244>)
 80055a6:	230a      	movs	r3, #10
 80055a8:	e019      	b.n	80055de <_printf_i+0x102>
 80055aa:	680e      	ldr	r6, [r1, #0]
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b2:	bf18      	it	ne
 80055b4:	b236      	sxthne	r6, r6
 80055b6:	e7ef      	b.n	8005598 <_printf_i+0xbc>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	6820      	ldr	r0, [r4, #0]
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	6029      	str	r1, [r5, #0]
 80055c0:	0601      	lsls	r1, r0, #24
 80055c2:	d501      	bpl.n	80055c8 <_printf_i+0xec>
 80055c4:	681e      	ldr	r6, [r3, #0]
 80055c6:	e002      	b.n	80055ce <_printf_i+0xf2>
 80055c8:	0646      	lsls	r6, r0, #25
 80055ca:	d5fb      	bpl.n	80055c4 <_printf_i+0xe8>
 80055cc:	881e      	ldrh	r6, [r3, #0]
 80055ce:	4854      	ldr	r0, [pc, #336]	; (8005720 <_printf_i+0x244>)
 80055d0:	2f6f      	cmp	r7, #111	; 0x6f
 80055d2:	bf0c      	ite	eq
 80055d4:	2308      	moveq	r3, #8
 80055d6:	230a      	movne	r3, #10
 80055d8:	2100      	movs	r1, #0
 80055da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055de:	6865      	ldr	r5, [r4, #4]
 80055e0:	60a5      	str	r5, [r4, #8]
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	bfa2      	ittt	ge
 80055e6:	6821      	ldrge	r1, [r4, #0]
 80055e8:	f021 0104 	bicge.w	r1, r1, #4
 80055ec:	6021      	strge	r1, [r4, #0]
 80055ee:	b90e      	cbnz	r6, 80055f4 <_printf_i+0x118>
 80055f0:	2d00      	cmp	r5, #0
 80055f2:	d04d      	beq.n	8005690 <_printf_i+0x1b4>
 80055f4:	4615      	mov	r5, r2
 80055f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80055fa:	fb03 6711 	mls	r7, r3, r1, r6
 80055fe:	5dc7      	ldrb	r7, [r0, r7]
 8005600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005604:	4637      	mov	r7, r6
 8005606:	42bb      	cmp	r3, r7
 8005608:	460e      	mov	r6, r1
 800560a:	d9f4      	bls.n	80055f6 <_printf_i+0x11a>
 800560c:	2b08      	cmp	r3, #8
 800560e:	d10b      	bne.n	8005628 <_printf_i+0x14c>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	07de      	lsls	r6, r3, #31
 8005614:	d508      	bpl.n	8005628 <_printf_i+0x14c>
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	6861      	ldr	r1, [r4, #4]
 800561a:	4299      	cmp	r1, r3
 800561c:	bfde      	ittt	le
 800561e:	2330      	movle	r3, #48	; 0x30
 8005620:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005624:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005628:	1b52      	subs	r2, r2, r5
 800562a:	6122      	str	r2, [r4, #16]
 800562c:	f8cd a000 	str.w	sl, [sp]
 8005630:	464b      	mov	r3, r9
 8005632:	aa03      	add	r2, sp, #12
 8005634:	4621      	mov	r1, r4
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fee2 	bl	8005400 <_printf_common>
 800563c:	3001      	adds	r0, #1
 800563e:	d14c      	bne.n	80056da <_printf_i+0x1fe>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	b004      	add	sp, #16
 8005646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564a:	4835      	ldr	r0, [pc, #212]	; (8005720 <_printf_i+0x244>)
 800564c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005650:	6829      	ldr	r1, [r5, #0]
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	f851 6b04 	ldr.w	r6, [r1], #4
 8005658:	6029      	str	r1, [r5, #0]
 800565a:	061d      	lsls	r5, r3, #24
 800565c:	d514      	bpl.n	8005688 <_printf_i+0x1ac>
 800565e:	07df      	lsls	r7, r3, #31
 8005660:	bf44      	itt	mi
 8005662:	f043 0320 	orrmi.w	r3, r3, #32
 8005666:	6023      	strmi	r3, [r4, #0]
 8005668:	b91e      	cbnz	r6, 8005672 <_printf_i+0x196>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	f023 0320 	bic.w	r3, r3, #32
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	2310      	movs	r3, #16
 8005674:	e7b0      	b.n	80055d8 <_printf_i+0xfc>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f043 0320 	orr.w	r3, r3, #32
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	2378      	movs	r3, #120	; 0x78
 8005680:	4828      	ldr	r0, [pc, #160]	; (8005724 <_printf_i+0x248>)
 8005682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005686:	e7e3      	b.n	8005650 <_printf_i+0x174>
 8005688:	0659      	lsls	r1, r3, #25
 800568a:	bf48      	it	mi
 800568c:	b2b6      	uxthmi	r6, r6
 800568e:	e7e6      	b.n	800565e <_printf_i+0x182>
 8005690:	4615      	mov	r5, r2
 8005692:	e7bb      	b.n	800560c <_printf_i+0x130>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	6826      	ldr	r6, [r4, #0]
 8005698:	6961      	ldr	r1, [r4, #20]
 800569a:	1d18      	adds	r0, r3, #4
 800569c:	6028      	str	r0, [r5, #0]
 800569e:	0635      	lsls	r5, r6, #24
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	d501      	bpl.n	80056a8 <_printf_i+0x1cc>
 80056a4:	6019      	str	r1, [r3, #0]
 80056a6:	e002      	b.n	80056ae <_printf_i+0x1d2>
 80056a8:	0670      	lsls	r0, r6, #25
 80056aa:	d5fb      	bpl.n	80056a4 <_printf_i+0x1c8>
 80056ac:	8019      	strh	r1, [r3, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	4615      	mov	r5, r2
 80056b4:	e7ba      	b.n	800562c <_printf_i+0x150>
 80056b6:	682b      	ldr	r3, [r5, #0]
 80056b8:	1d1a      	adds	r2, r3, #4
 80056ba:	602a      	str	r2, [r5, #0]
 80056bc:	681d      	ldr	r5, [r3, #0]
 80056be:	6862      	ldr	r2, [r4, #4]
 80056c0:	2100      	movs	r1, #0
 80056c2:	4628      	mov	r0, r5
 80056c4:	f7fa fdac 	bl	8000220 <memchr>
 80056c8:	b108      	cbz	r0, 80056ce <_printf_i+0x1f2>
 80056ca:	1b40      	subs	r0, r0, r5
 80056cc:	6060      	str	r0, [r4, #4]
 80056ce:	6863      	ldr	r3, [r4, #4]
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	2300      	movs	r3, #0
 80056d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d8:	e7a8      	b.n	800562c <_printf_i+0x150>
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	462a      	mov	r2, r5
 80056de:	4649      	mov	r1, r9
 80056e0:	4640      	mov	r0, r8
 80056e2:	47d0      	blx	sl
 80056e4:	3001      	adds	r0, #1
 80056e6:	d0ab      	beq.n	8005640 <_printf_i+0x164>
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	079b      	lsls	r3, r3, #30
 80056ec:	d413      	bmi.n	8005716 <_printf_i+0x23a>
 80056ee:	68e0      	ldr	r0, [r4, #12]
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	4298      	cmp	r0, r3
 80056f4:	bfb8      	it	lt
 80056f6:	4618      	movlt	r0, r3
 80056f8:	e7a4      	b.n	8005644 <_printf_i+0x168>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4632      	mov	r2, r6
 80056fe:	4649      	mov	r1, r9
 8005700:	4640      	mov	r0, r8
 8005702:	47d0      	blx	sl
 8005704:	3001      	adds	r0, #1
 8005706:	d09b      	beq.n	8005640 <_printf_i+0x164>
 8005708:	3501      	adds	r5, #1
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	9903      	ldr	r1, [sp, #12]
 800570e:	1a5b      	subs	r3, r3, r1
 8005710:	42ab      	cmp	r3, r5
 8005712:	dcf2      	bgt.n	80056fa <_printf_i+0x21e>
 8005714:	e7eb      	b.n	80056ee <_printf_i+0x212>
 8005716:	2500      	movs	r5, #0
 8005718:	f104 0619 	add.w	r6, r4, #25
 800571c:	e7f5      	b.n	800570a <_printf_i+0x22e>
 800571e:	bf00      	nop
 8005720:	08007e9a 	.word	0x08007e9a
 8005724:	08007eab 	.word	0x08007eab

08005728 <_sbrk_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4d06      	ldr	r5, [pc, #24]	; (8005744 <_sbrk_r+0x1c>)
 800572c:	2300      	movs	r3, #0
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	f7fb fede 	bl	80014f4 <_sbrk>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_sbrk_r+0x1a>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_sbrk_r+0x1a>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	20000818 	.word	0x20000818

08005748 <siprintf>:
 8005748:	b40e      	push	{r1, r2, r3}
 800574a:	b500      	push	{lr}
 800574c:	b09c      	sub	sp, #112	; 0x70
 800574e:	ab1d      	add	r3, sp, #116	; 0x74
 8005750:	9002      	str	r0, [sp, #8]
 8005752:	9006      	str	r0, [sp, #24]
 8005754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005758:	4809      	ldr	r0, [pc, #36]	; (8005780 <siprintf+0x38>)
 800575a:	9107      	str	r1, [sp, #28]
 800575c:	9104      	str	r1, [sp, #16]
 800575e:	4909      	ldr	r1, [pc, #36]	; (8005784 <siprintf+0x3c>)
 8005760:	f853 2b04 	ldr.w	r2, [r3], #4
 8005764:	9105      	str	r1, [sp, #20]
 8005766:	6800      	ldr	r0, [r0, #0]
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	a902      	add	r1, sp, #8
 800576c:	f001 faba 	bl	8006ce4 <_svfiprintf_r>
 8005770:	9b02      	ldr	r3, [sp, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	b01c      	add	sp, #112	; 0x70
 8005778:	f85d eb04 	ldr.w	lr, [sp], #4
 800577c:	b003      	add	sp, #12
 800577e:	4770      	bx	lr
 8005780:	200004b8 	.word	0x200004b8
 8005784:	ffff0208 	.word	0xffff0208

08005788 <quorem>:
 8005788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	6903      	ldr	r3, [r0, #16]
 800578e:	690c      	ldr	r4, [r1, #16]
 8005790:	42a3      	cmp	r3, r4
 8005792:	4607      	mov	r7, r0
 8005794:	f2c0 8081 	blt.w	800589a <quorem+0x112>
 8005798:	3c01      	subs	r4, #1
 800579a:	f101 0814 	add.w	r8, r1, #20
 800579e:	f100 0514 	add.w	r5, r0, #20
 80057a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057b0:	3301      	adds	r3, #1
 80057b2:	429a      	cmp	r2, r3
 80057b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80057c0:	d331      	bcc.n	8005826 <quorem+0x9e>
 80057c2:	f04f 0e00 	mov.w	lr, #0
 80057c6:	4640      	mov	r0, r8
 80057c8:	46ac      	mov	ip, r5
 80057ca:	46f2      	mov	sl, lr
 80057cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80057d0:	b293      	uxth	r3, r2
 80057d2:	fb06 e303 	mla	r3, r6, r3, lr
 80057d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80057da:	b29b      	uxth	r3, r3
 80057dc:	ebaa 0303 	sub.w	r3, sl, r3
 80057e0:	f8dc a000 	ldr.w	sl, [ip]
 80057e4:	0c12      	lsrs	r2, r2, #16
 80057e6:	fa13 f38a 	uxtah	r3, r3, sl
 80057ea:	fb06 e202 	mla	r2, r6, r2, lr
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	9b00      	ldr	r3, [sp, #0]
 80057f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057f6:	b292      	uxth	r2, r2
 80057f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80057fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005800:	f8bd 3000 	ldrh.w	r3, [sp]
 8005804:	4581      	cmp	r9, r0
 8005806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800580a:	f84c 3b04 	str.w	r3, [ip], #4
 800580e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005812:	d2db      	bcs.n	80057cc <quorem+0x44>
 8005814:	f855 300b 	ldr.w	r3, [r5, fp]
 8005818:	b92b      	cbnz	r3, 8005826 <quorem+0x9e>
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	3b04      	subs	r3, #4
 800581e:	429d      	cmp	r5, r3
 8005820:	461a      	mov	r2, r3
 8005822:	d32e      	bcc.n	8005882 <quorem+0xfa>
 8005824:	613c      	str	r4, [r7, #16]
 8005826:	4638      	mov	r0, r7
 8005828:	f001 f8ba 	bl	80069a0 <__mcmp>
 800582c:	2800      	cmp	r0, #0
 800582e:	db24      	blt.n	800587a <quorem+0xf2>
 8005830:	3601      	adds	r6, #1
 8005832:	4628      	mov	r0, r5
 8005834:	f04f 0c00 	mov.w	ip, #0
 8005838:	f858 2b04 	ldr.w	r2, [r8], #4
 800583c:	f8d0 e000 	ldr.w	lr, [r0]
 8005840:	b293      	uxth	r3, r2
 8005842:	ebac 0303 	sub.w	r3, ip, r3
 8005846:	0c12      	lsrs	r2, r2, #16
 8005848:	fa13 f38e 	uxtah	r3, r3, lr
 800584c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800585a:	45c1      	cmp	r9, r8
 800585c:	f840 3b04 	str.w	r3, [r0], #4
 8005860:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005864:	d2e8      	bcs.n	8005838 <quorem+0xb0>
 8005866:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800586a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800586e:	b922      	cbnz	r2, 800587a <quorem+0xf2>
 8005870:	3b04      	subs	r3, #4
 8005872:	429d      	cmp	r5, r3
 8005874:	461a      	mov	r2, r3
 8005876:	d30a      	bcc.n	800588e <quorem+0x106>
 8005878:	613c      	str	r4, [r7, #16]
 800587a:	4630      	mov	r0, r6
 800587c:	b003      	add	sp, #12
 800587e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	3b04      	subs	r3, #4
 8005886:	2a00      	cmp	r2, #0
 8005888:	d1cc      	bne.n	8005824 <quorem+0x9c>
 800588a:	3c01      	subs	r4, #1
 800588c:	e7c7      	b.n	800581e <quorem+0x96>
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	3b04      	subs	r3, #4
 8005892:	2a00      	cmp	r2, #0
 8005894:	d1f0      	bne.n	8005878 <quorem+0xf0>
 8005896:	3c01      	subs	r4, #1
 8005898:	e7eb      	b.n	8005872 <quorem+0xea>
 800589a:	2000      	movs	r0, #0
 800589c:	e7ee      	b.n	800587c <quorem+0xf4>
	...

080058a0 <_dtoa_r>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	ed2d 8b04 	vpush	{d8-d9}
 80058a8:	ec57 6b10 	vmov	r6, r7, d0
 80058ac:	b093      	sub	sp, #76	; 0x4c
 80058ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80058b4:	9106      	str	r1, [sp, #24]
 80058b6:	ee10 aa10 	vmov	sl, s0
 80058ba:	4604      	mov	r4, r0
 80058bc:	9209      	str	r2, [sp, #36]	; 0x24
 80058be:	930c      	str	r3, [sp, #48]	; 0x30
 80058c0:	46bb      	mov	fp, r7
 80058c2:	b975      	cbnz	r5, 80058e2 <_dtoa_r+0x42>
 80058c4:	2010      	movs	r0, #16
 80058c6:	f7ff f9c7 	bl	8004c58 <malloc>
 80058ca:	4602      	mov	r2, r0
 80058cc:	6260      	str	r0, [r4, #36]	; 0x24
 80058ce:	b920      	cbnz	r0, 80058da <_dtoa_r+0x3a>
 80058d0:	4ba7      	ldr	r3, [pc, #668]	; (8005b70 <_dtoa_r+0x2d0>)
 80058d2:	21ea      	movs	r1, #234	; 0xea
 80058d4:	48a7      	ldr	r0, [pc, #668]	; (8005b74 <_dtoa_r+0x2d4>)
 80058d6:	f001 fb05 	bl	8006ee4 <__assert_func>
 80058da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058de:	6005      	str	r5, [r0, #0]
 80058e0:	60c5      	str	r5, [r0, #12]
 80058e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e4:	6819      	ldr	r1, [r3, #0]
 80058e6:	b151      	cbz	r1, 80058fe <_dtoa_r+0x5e>
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	604a      	str	r2, [r1, #4]
 80058ec:	2301      	movs	r3, #1
 80058ee:	4093      	lsls	r3, r2
 80058f0:	608b      	str	r3, [r1, #8]
 80058f2:	4620      	mov	r0, r4
 80058f4:	f000 fe12 	bl	800651c <_Bfree>
 80058f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	1e3b      	subs	r3, r7, #0
 8005900:	bfaa      	itet	ge
 8005902:	2300      	movge	r3, #0
 8005904:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005908:	f8c8 3000 	strge.w	r3, [r8]
 800590c:	4b9a      	ldr	r3, [pc, #616]	; (8005b78 <_dtoa_r+0x2d8>)
 800590e:	bfbc      	itt	lt
 8005910:	2201      	movlt	r2, #1
 8005912:	f8c8 2000 	strlt.w	r2, [r8]
 8005916:	ea33 030b 	bics.w	r3, r3, fp
 800591a:	d11b      	bne.n	8005954 <_dtoa_r+0xb4>
 800591c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800591e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005928:	4333      	orrs	r3, r6
 800592a:	f000 8592 	beq.w	8006452 <_dtoa_r+0xbb2>
 800592e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005930:	b963      	cbnz	r3, 800594c <_dtoa_r+0xac>
 8005932:	4b92      	ldr	r3, [pc, #584]	; (8005b7c <_dtoa_r+0x2dc>)
 8005934:	e022      	b.n	800597c <_dtoa_r+0xdc>
 8005936:	4b92      	ldr	r3, [pc, #584]	; (8005b80 <_dtoa_r+0x2e0>)
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	3308      	adds	r3, #8
 800593c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	9801      	ldr	r0, [sp, #4]
 8005942:	b013      	add	sp, #76	; 0x4c
 8005944:	ecbd 8b04 	vpop	{d8-d9}
 8005948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594c:	4b8b      	ldr	r3, [pc, #556]	; (8005b7c <_dtoa_r+0x2dc>)
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	3303      	adds	r3, #3
 8005952:	e7f3      	b.n	800593c <_dtoa_r+0x9c>
 8005954:	2200      	movs	r2, #0
 8005956:	2300      	movs	r3, #0
 8005958:	4650      	mov	r0, sl
 800595a:	4659      	mov	r1, fp
 800595c:	f7fb f8d4 	bl	8000b08 <__aeabi_dcmpeq>
 8005960:	ec4b ab19 	vmov	d9, sl, fp
 8005964:	4680      	mov	r8, r0
 8005966:	b158      	cbz	r0, 8005980 <_dtoa_r+0xe0>
 8005968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800596a:	2301      	movs	r3, #1
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 856b 	beq.w	800644c <_dtoa_r+0xbac>
 8005976:	4883      	ldr	r0, [pc, #524]	; (8005b84 <_dtoa_r+0x2e4>)
 8005978:	6018      	str	r0, [r3, #0]
 800597a:	1e43      	subs	r3, r0, #1
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	e7df      	b.n	8005940 <_dtoa_r+0xa0>
 8005980:	ec4b ab10 	vmov	d0, sl, fp
 8005984:	aa10      	add	r2, sp, #64	; 0x40
 8005986:	a911      	add	r1, sp, #68	; 0x44
 8005988:	4620      	mov	r0, r4
 800598a:	f001 f8af 	bl	8006aec <__d2b>
 800598e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005992:	ee08 0a10 	vmov	s16, r0
 8005996:	2d00      	cmp	r5, #0
 8005998:	f000 8084 	beq.w	8005aa4 <_dtoa_r+0x204>
 800599c:	ee19 3a90 	vmov	r3, s19
 80059a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80059a8:	4656      	mov	r6, sl
 80059aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80059ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80059b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80059b6:	4b74      	ldr	r3, [pc, #464]	; (8005b88 <_dtoa_r+0x2e8>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	4630      	mov	r0, r6
 80059bc:	4639      	mov	r1, r7
 80059be:	f7fa fc83 	bl	80002c8 <__aeabi_dsub>
 80059c2:	a365      	add	r3, pc, #404	; (adr r3, 8005b58 <_dtoa_r+0x2b8>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fe36 	bl	8000638 <__aeabi_dmul>
 80059cc:	a364      	add	r3, pc, #400	; (adr r3, 8005b60 <_dtoa_r+0x2c0>)
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f7fa fc7b 	bl	80002cc <__adddf3>
 80059d6:	4606      	mov	r6, r0
 80059d8:	4628      	mov	r0, r5
 80059da:	460f      	mov	r7, r1
 80059dc:	f7fa fdc2 	bl	8000564 <__aeabi_i2d>
 80059e0:	a361      	add	r3, pc, #388	; (adr r3, 8005b68 <_dtoa_r+0x2c8>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	f7fa fe27 	bl	8000638 <__aeabi_dmul>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4630      	mov	r0, r6
 80059f0:	4639      	mov	r1, r7
 80059f2:	f7fa fc6b 	bl	80002cc <__adddf3>
 80059f6:	4606      	mov	r6, r0
 80059f8:	460f      	mov	r7, r1
 80059fa:	f7fb f8cd 	bl	8000b98 <__aeabi_d2iz>
 80059fe:	2200      	movs	r2, #0
 8005a00:	9000      	str	r0, [sp, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	4630      	mov	r0, r6
 8005a06:	4639      	mov	r1, r7
 8005a08:	f7fb f888 	bl	8000b1c <__aeabi_dcmplt>
 8005a0c:	b150      	cbz	r0, 8005a24 <_dtoa_r+0x184>
 8005a0e:	9800      	ldr	r0, [sp, #0]
 8005a10:	f7fa fda8 	bl	8000564 <__aeabi_i2d>
 8005a14:	4632      	mov	r2, r6
 8005a16:	463b      	mov	r3, r7
 8005a18:	f7fb f876 	bl	8000b08 <__aeabi_dcmpeq>
 8005a1c:	b910      	cbnz	r0, 8005a24 <_dtoa_r+0x184>
 8005a1e:	9b00      	ldr	r3, [sp, #0]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	9b00      	ldr	r3, [sp, #0]
 8005a26:	2b16      	cmp	r3, #22
 8005a28:	d85a      	bhi.n	8005ae0 <_dtoa_r+0x240>
 8005a2a:	9a00      	ldr	r2, [sp, #0]
 8005a2c:	4b57      	ldr	r3, [pc, #348]	; (8005b8c <_dtoa_r+0x2ec>)
 8005a2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	ec51 0b19 	vmov	r0, r1, d9
 8005a3a:	f7fb f86f 	bl	8000b1c <__aeabi_dcmplt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d050      	beq.n	8005ae4 <_dtoa_r+0x244>
 8005a42:	9b00      	ldr	r3, [sp, #0]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a4e:	1b5d      	subs	r5, r3, r5
 8005a50:	1e6b      	subs	r3, r5, #1
 8005a52:	9305      	str	r3, [sp, #20]
 8005a54:	bf45      	ittet	mi
 8005a56:	f1c5 0301 	rsbmi	r3, r5, #1
 8005a5a:	9304      	strmi	r3, [sp, #16]
 8005a5c:	2300      	movpl	r3, #0
 8005a5e:	2300      	movmi	r3, #0
 8005a60:	bf4c      	ite	mi
 8005a62:	9305      	strmi	r3, [sp, #20]
 8005a64:	9304      	strpl	r3, [sp, #16]
 8005a66:	9b00      	ldr	r3, [sp, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	db3d      	blt.n	8005ae8 <_dtoa_r+0x248>
 8005a6c:	9b05      	ldr	r3, [sp, #20]
 8005a6e:	9a00      	ldr	r2, [sp, #0]
 8005a70:	920a      	str	r2, [sp, #40]	; 0x28
 8005a72:	4413      	add	r3, r2
 8005a74:	9305      	str	r3, [sp, #20]
 8005a76:	2300      	movs	r3, #0
 8005a78:	9307      	str	r3, [sp, #28]
 8005a7a:	9b06      	ldr	r3, [sp, #24]
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	f200 8089 	bhi.w	8005b94 <_dtoa_r+0x2f4>
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	bfc4      	itt	gt
 8005a86:	3b04      	subgt	r3, #4
 8005a88:	9306      	strgt	r3, [sp, #24]
 8005a8a:	9b06      	ldr	r3, [sp, #24]
 8005a8c:	f1a3 0302 	sub.w	r3, r3, #2
 8005a90:	bfcc      	ite	gt
 8005a92:	2500      	movgt	r5, #0
 8005a94:	2501      	movle	r5, #1
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	f200 8087 	bhi.w	8005baa <_dtoa_r+0x30a>
 8005a9c:	e8df f003 	tbb	[pc, r3]
 8005aa0:	59383a2d 	.word	0x59383a2d
 8005aa4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005aa8:	441d      	add	r5, r3
 8005aaa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	bfc1      	itttt	gt
 8005ab2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ab6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005aba:	fa0b f303 	lslgt.w	r3, fp, r3
 8005abe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ac2:	bfda      	itte	le
 8005ac4:	f1c3 0320 	rsble	r3, r3, #32
 8005ac8:	fa06 f003 	lslle.w	r0, r6, r3
 8005acc:	4318      	orrgt	r0, r3
 8005ace:	f7fa fd39 	bl	8000544 <__aeabi_ui2d>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ada:	3d01      	subs	r5, #1
 8005adc:	930e      	str	r3, [sp, #56]	; 0x38
 8005ade:	e76a      	b.n	80059b6 <_dtoa_r+0x116>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e7b2      	b.n	8005a4a <_dtoa_r+0x1aa>
 8005ae4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ae6:	e7b1      	b.n	8005a4c <_dtoa_r+0x1ac>
 8005ae8:	9b04      	ldr	r3, [sp, #16]
 8005aea:	9a00      	ldr	r2, [sp, #0]
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	9304      	str	r3, [sp, #16]
 8005af0:	4253      	negs	r3, r2
 8005af2:	9307      	str	r3, [sp, #28]
 8005af4:	2300      	movs	r3, #0
 8005af6:	930a      	str	r3, [sp, #40]	; 0x28
 8005af8:	e7bf      	b.n	8005a7a <_dtoa_r+0x1da>
 8005afa:	2300      	movs	r3, #0
 8005afc:	9308      	str	r3, [sp, #32]
 8005afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	dc55      	bgt.n	8005bb0 <_dtoa_r+0x310>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b0e:	e00c      	b.n	8005b2a <_dtoa_r+0x28a>
 8005b10:	2301      	movs	r3, #1
 8005b12:	e7f3      	b.n	8005afc <_dtoa_r+0x25c>
 8005b14:	2300      	movs	r3, #0
 8005b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b18:	9308      	str	r3, [sp, #32]
 8005b1a:	9b00      	ldr	r3, [sp, #0]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	9302      	str	r3, [sp, #8]
 8005b20:	3301      	adds	r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	bfb8      	it	lt
 8005b28:	2301      	movlt	r3, #1
 8005b2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	6042      	str	r2, [r0, #4]
 8005b30:	2204      	movs	r2, #4
 8005b32:	f102 0614 	add.w	r6, r2, #20
 8005b36:	429e      	cmp	r6, r3
 8005b38:	6841      	ldr	r1, [r0, #4]
 8005b3a:	d93d      	bls.n	8005bb8 <_dtoa_r+0x318>
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 fcad 	bl	800649c <_Balloc>
 8005b42:	9001      	str	r0, [sp, #4]
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d13b      	bne.n	8005bc0 <_dtoa_r+0x320>
 8005b48:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <_dtoa_r+0x2f0>)
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b50:	e6c0      	b.n	80058d4 <_dtoa_r+0x34>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e7df      	b.n	8005b16 <_dtoa_r+0x276>
 8005b56:	bf00      	nop
 8005b58:	636f4361 	.word	0x636f4361
 8005b5c:	3fd287a7 	.word	0x3fd287a7
 8005b60:	8b60c8b3 	.word	0x8b60c8b3
 8005b64:	3fc68a28 	.word	0x3fc68a28
 8005b68:	509f79fb 	.word	0x509f79fb
 8005b6c:	3fd34413 	.word	0x3fd34413
 8005b70:	08007ec9 	.word	0x08007ec9
 8005b74:	08007ee0 	.word	0x08007ee0
 8005b78:	7ff00000 	.word	0x7ff00000
 8005b7c:	08007ec5 	.word	0x08007ec5
 8005b80:	08007ebc 	.word	0x08007ebc
 8005b84:	08007e99 	.word	0x08007e99
 8005b88:	3ff80000 	.word	0x3ff80000
 8005b8c:	08007fd0 	.word	0x08007fd0
 8005b90:	08007f3b 	.word	0x08007f3b
 8005b94:	2501      	movs	r5, #1
 8005b96:	2300      	movs	r3, #0
 8005b98:	9306      	str	r3, [sp, #24]
 8005b9a:	9508      	str	r5, [sp, #32]
 8005b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2312      	movs	r3, #18
 8005ba8:	e7b0      	b.n	8005b0c <_dtoa_r+0x26c>
 8005baa:	2301      	movs	r3, #1
 8005bac:	9308      	str	r3, [sp, #32]
 8005bae:	e7f5      	b.n	8005b9c <_dtoa_r+0x2fc>
 8005bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005bb6:	e7b8      	b.n	8005b2a <_dtoa_r+0x28a>
 8005bb8:	3101      	adds	r1, #1
 8005bba:	6041      	str	r1, [r0, #4]
 8005bbc:	0052      	lsls	r2, r2, #1
 8005bbe:	e7b8      	b.n	8005b32 <_dtoa_r+0x292>
 8005bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bc2:	9a01      	ldr	r2, [sp, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	9b03      	ldr	r3, [sp, #12]
 8005bc8:	2b0e      	cmp	r3, #14
 8005bca:	f200 809d 	bhi.w	8005d08 <_dtoa_r+0x468>
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	f000 809a 	beq.w	8005d08 <_dtoa_r+0x468>
 8005bd4:	9b00      	ldr	r3, [sp, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	dd32      	ble.n	8005c40 <_dtoa_r+0x3a0>
 8005bda:	4ab7      	ldr	r2, [pc, #732]	; (8005eb8 <_dtoa_r+0x618>)
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005be8:	9b00      	ldr	r3, [sp, #0]
 8005bea:	05d8      	lsls	r0, r3, #23
 8005bec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005bf0:	d516      	bpl.n	8005c20 <_dtoa_r+0x380>
 8005bf2:	4bb2      	ldr	r3, [pc, #712]	; (8005ebc <_dtoa_r+0x61c>)
 8005bf4:	ec51 0b19 	vmov	r0, r1, d9
 8005bf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bfc:	f7fa fe46 	bl	800088c <__aeabi_ddiv>
 8005c00:	f007 070f 	and.w	r7, r7, #15
 8005c04:	4682      	mov	sl, r0
 8005c06:	468b      	mov	fp, r1
 8005c08:	2503      	movs	r5, #3
 8005c0a:	4eac      	ldr	r6, [pc, #688]	; (8005ebc <_dtoa_r+0x61c>)
 8005c0c:	b957      	cbnz	r7, 8005c24 <_dtoa_r+0x384>
 8005c0e:	4642      	mov	r2, r8
 8005c10:	464b      	mov	r3, r9
 8005c12:	4650      	mov	r0, sl
 8005c14:	4659      	mov	r1, fp
 8005c16:	f7fa fe39 	bl	800088c <__aeabi_ddiv>
 8005c1a:	4682      	mov	sl, r0
 8005c1c:	468b      	mov	fp, r1
 8005c1e:	e028      	b.n	8005c72 <_dtoa_r+0x3d2>
 8005c20:	2502      	movs	r5, #2
 8005c22:	e7f2      	b.n	8005c0a <_dtoa_r+0x36a>
 8005c24:	07f9      	lsls	r1, r7, #31
 8005c26:	d508      	bpl.n	8005c3a <_dtoa_r+0x39a>
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c30:	f7fa fd02 	bl	8000638 <__aeabi_dmul>
 8005c34:	3501      	adds	r5, #1
 8005c36:	4680      	mov	r8, r0
 8005c38:	4689      	mov	r9, r1
 8005c3a:	107f      	asrs	r7, r7, #1
 8005c3c:	3608      	adds	r6, #8
 8005c3e:	e7e5      	b.n	8005c0c <_dtoa_r+0x36c>
 8005c40:	f000 809b 	beq.w	8005d7a <_dtoa_r+0x4da>
 8005c44:	9b00      	ldr	r3, [sp, #0]
 8005c46:	4f9d      	ldr	r7, [pc, #628]	; (8005ebc <_dtoa_r+0x61c>)
 8005c48:	425e      	negs	r6, r3
 8005c4a:	4b9b      	ldr	r3, [pc, #620]	; (8005eb8 <_dtoa_r+0x618>)
 8005c4c:	f006 020f 	and.w	r2, r6, #15
 8005c50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	ec51 0b19 	vmov	r0, r1, d9
 8005c5c:	f7fa fcec 	bl	8000638 <__aeabi_dmul>
 8005c60:	1136      	asrs	r6, r6, #4
 8005c62:	4682      	mov	sl, r0
 8005c64:	468b      	mov	fp, r1
 8005c66:	2300      	movs	r3, #0
 8005c68:	2502      	movs	r5, #2
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	d17a      	bne.n	8005d64 <_dtoa_r+0x4c4>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1d3      	bne.n	8005c1a <_dtoa_r+0x37a>
 8005c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8082 	beq.w	8005d7e <_dtoa_r+0x4de>
 8005c7a:	4b91      	ldr	r3, [pc, #580]	; (8005ec0 <_dtoa_r+0x620>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4650      	mov	r0, sl
 8005c80:	4659      	mov	r1, fp
 8005c82:	f7fa ff4b 	bl	8000b1c <__aeabi_dcmplt>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d079      	beq.n	8005d7e <_dtoa_r+0x4de>
 8005c8a:	9b03      	ldr	r3, [sp, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d076      	beq.n	8005d7e <_dtoa_r+0x4de>
 8005c90:	9b02      	ldr	r3, [sp, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	dd36      	ble.n	8005d04 <_dtoa_r+0x464>
 8005c96:	9b00      	ldr	r3, [sp, #0]
 8005c98:	4650      	mov	r0, sl
 8005c9a:	4659      	mov	r1, fp
 8005c9c:	1e5f      	subs	r7, r3, #1
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	4b88      	ldr	r3, [pc, #544]	; (8005ec4 <_dtoa_r+0x624>)
 8005ca2:	f7fa fcc9 	bl	8000638 <__aeabi_dmul>
 8005ca6:	9e02      	ldr	r6, [sp, #8]
 8005ca8:	4682      	mov	sl, r0
 8005caa:	468b      	mov	fp, r1
 8005cac:	3501      	adds	r5, #1
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f7fa fc58 	bl	8000564 <__aeabi_i2d>
 8005cb4:	4652      	mov	r2, sl
 8005cb6:	465b      	mov	r3, fp
 8005cb8:	f7fa fcbe 	bl	8000638 <__aeabi_dmul>
 8005cbc:	4b82      	ldr	r3, [pc, #520]	; (8005ec8 <_dtoa_r+0x628>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f7fa fb04 	bl	80002cc <__adddf3>
 8005cc4:	46d0      	mov	r8, sl
 8005cc6:	46d9      	mov	r9, fp
 8005cc8:	4682      	mov	sl, r0
 8005cca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	d158      	bne.n	8005d84 <_dtoa_r+0x4e4>
 8005cd2:	4b7e      	ldr	r3, [pc, #504]	; (8005ecc <_dtoa_r+0x62c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	4649      	mov	r1, r9
 8005cda:	f7fa faf5 	bl	80002c8 <__aeabi_dsub>
 8005cde:	4652      	mov	r2, sl
 8005ce0:	465b      	mov	r3, fp
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	4689      	mov	r9, r1
 8005ce6:	f7fa ff37 	bl	8000b58 <__aeabi_dcmpgt>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f040 8295 	bne.w	800621a <_dtoa_r+0x97a>
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	f7fa ff0f 	bl	8000b1c <__aeabi_dcmplt>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	f040 8289 	bne.w	8006216 <_dtoa_r+0x976>
 8005d04:	ec5b ab19 	vmov	sl, fp, d9
 8005d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f2c0 8148 	blt.w	8005fa0 <_dtoa_r+0x700>
 8005d10:	9a00      	ldr	r2, [sp, #0]
 8005d12:	2a0e      	cmp	r2, #14
 8005d14:	f300 8144 	bgt.w	8005fa0 <_dtoa_r+0x700>
 8005d18:	4b67      	ldr	r3, [pc, #412]	; (8005eb8 <_dtoa_r+0x618>)
 8005d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f280 80d5 	bge.w	8005ed4 <_dtoa_r+0x634>
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f300 80d1 	bgt.w	8005ed4 <_dtoa_r+0x634>
 8005d32:	f040 826f 	bne.w	8006214 <_dtoa_r+0x974>
 8005d36:	4b65      	ldr	r3, [pc, #404]	; (8005ecc <_dtoa_r+0x62c>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	f7fa fc7b 	bl	8000638 <__aeabi_dmul>
 8005d42:	4652      	mov	r2, sl
 8005d44:	465b      	mov	r3, fp
 8005d46:	f7fa fefd 	bl	8000b44 <__aeabi_dcmpge>
 8005d4a:	9e03      	ldr	r6, [sp, #12]
 8005d4c:	4637      	mov	r7, r6
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	f040 8245 	bne.w	80061de <_dtoa_r+0x93e>
 8005d54:	9d01      	ldr	r5, [sp, #4]
 8005d56:	2331      	movs	r3, #49	; 0x31
 8005d58:	f805 3b01 	strb.w	r3, [r5], #1
 8005d5c:	9b00      	ldr	r3, [sp, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	e240      	b.n	80061e6 <_dtoa_r+0x946>
 8005d64:	07f2      	lsls	r2, r6, #31
 8005d66:	d505      	bpl.n	8005d74 <_dtoa_r+0x4d4>
 8005d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d6c:	f7fa fc64 	bl	8000638 <__aeabi_dmul>
 8005d70:	3501      	adds	r5, #1
 8005d72:	2301      	movs	r3, #1
 8005d74:	1076      	asrs	r6, r6, #1
 8005d76:	3708      	adds	r7, #8
 8005d78:	e777      	b.n	8005c6a <_dtoa_r+0x3ca>
 8005d7a:	2502      	movs	r5, #2
 8005d7c:	e779      	b.n	8005c72 <_dtoa_r+0x3d2>
 8005d7e:	9f00      	ldr	r7, [sp, #0]
 8005d80:	9e03      	ldr	r6, [sp, #12]
 8005d82:	e794      	b.n	8005cae <_dtoa_r+0x40e>
 8005d84:	9901      	ldr	r1, [sp, #4]
 8005d86:	4b4c      	ldr	r3, [pc, #304]	; (8005eb8 <_dtoa_r+0x618>)
 8005d88:	4431      	add	r1, r6
 8005d8a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d8c:	9908      	ldr	r1, [sp, #32]
 8005d8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d96:	2900      	cmp	r1, #0
 8005d98:	d043      	beq.n	8005e22 <_dtoa_r+0x582>
 8005d9a:	494d      	ldr	r1, [pc, #308]	; (8005ed0 <_dtoa_r+0x630>)
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f7fa fd75 	bl	800088c <__aeabi_ddiv>
 8005da2:	4652      	mov	r2, sl
 8005da4:	465b      	mov	r3, fp
 8005da6:	f7fa fa8f 	bl	80002c8 <__aeabi_dsub>
 8005daa:	9d01      	ldr	r5, [sp, #4]
 8005dac:	4682      	mov	sl, r0
 8005dae:	468b      	mov	fp, r1
 8005db0:	4649      	mov	r1, r9
 8005db2:	4640      	mov	r0, r8
 8005db4:	f7fa fef0 	bl	8000b98 <__aeabi_d2iz>
 8005db8:	4606      	mov	r6, r0
 8005dba:	f7fa fbd3 	bl	8000564 <__aeabi_i2d>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	f7fa fa7f 	bl	80002c8 <__aeabi_dsub>
 8005dca:	3630      	adds	r6, #48	; 0x30
 8005dcc:	f805 6b01 	strb.w	r6, [r5], #1
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	465b      	mov	r3, fp
 8005dd4:	4680      	mov	r8, r0
 8005dd6:	4689      	mov	r9, r1
 8005dd8:	f7fa fea0 	bl	8000b1c <__aeabi_dcmplt>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d163      	bne.n	8005ea8 <_dtoa_r+0x608>
 8005de0:	4642      	mov	r2, r8
 8005de2:	464b      	mov	r3, r9
 8005de4:	4936      	ldr	r1, [pc, #216]	; (8005ec0 <_dtoa_r+0x620>)
 8005de6:	2000      	movs	r0, #0
 8005de8:	f7fa fa6e 	bl	80002c8 <__aeabi_dsub>
 8005dec:	4652      	mov	r2, sl
 8005dee:	465b      	mov	r3, fp
 8005df0:	f7fa fe94 	bl	8000b1c <__aeabi_dcmplt>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	f040 80b5 	bne.w	8005f64 <_dtoa_r+0x6c4>
 8005dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dfc:	429d      	cmp	r5, r3
 8005dfe:	d081      	beq.n	8005d04 <_dtoa_r+0x464>
 8005e00:	4b30      	ldr	r3, [pc, #192]	; (8005ec4 <_dtoa_r+0x624>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	4650      	mov	r0, sl
 8005e06:	4659      	mov	r1, fp
 8005e08:	f7fa fc16 	bl	8000638 <__aeabi_dmul>
 8005e0c:	4b2d      	ldr	r3, [pc, #180]	; (8005ec4 <_dtoa_r+0x624>)
 8005e0e:	4682      	mov	sl, r0
 8005e10:	468b      	mov	fp, r1
 8005e12:	4640      	mov	r0, r8
 8005e14:	4649      	mov	r1, r9
 8005e16:	2200      	movs	r2, #0
 8005e18:	f7fa fc0e 	bl	8000638 <__aeabi_dmul>
 8005e1c:	4680      	mov	r8, r0
 8005e1e:	4689      	mov	r9, r1
 8005e20:	e7c6      	b.n	8005db0 <_dtoa_r+0x510>
 8005e22:	4650      	mov	r0, sl
 8005e24:	4659      	mov	r1, fp
 8005e26:	f7fa fc07 	bl	8000638 <__aeabi_dmul>
 8005e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e2c:	9d01      	ldr	r5, [sp, #4]
 8005e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e30:	4682      	mov	sl, r0
 8005e32:	468b      	mov	fp, r1
 8005e34:	4649      	mov	r1, r9
 8005e36:	4640      	mov	r0, r8
 8005e38:	f7fa feae 	bl	8000b98 <__aeabi_d2iz>
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	f7fa fb91 	bl	8000564 <__aeabi_i2d>
 8005e42:	3630      	adds	r6, #48	; 0x30
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4640      	mov	r0, r8
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	f7fa fa3c 	bl	80002c8 <__aeabi_dsub>
 8005e50:	f805 6b01 	strb.w	r6, [r5], #1
 8005e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e56:	429d      	cmp	r5, r3
 8005e58:	4680      	mov	r8, r0
 8005e5a:	4689      	mov	r9, r1
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	d124      	bne.n	8005eac <_dtoa_r+0x60c>
 8005e62:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <_dtoa_r+0x630>)
 8005e64:	4650      	mov	r0, sl
 8005e66:	4659      	mov	r1, fp
 8005e68:	f7fa fa30 	bl	80002cc <__adddf3>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4640      	mov	r0, r8
 8005e72:	4649      	mov	r1, r9
 8005e74:	f7fa fe70 	bl	8000b58 <__aeabi_dcmpgt>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d173      	bne.n	8005f64 <_dtoa_r+0x6c4>
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	465b      	mov	r3, fp
 8005e80:	4913      	ldr	r1, [pc, #76]	; (8005ed0 <_dtoa_r+0x630>)
 8005e82:	2000      	movs	r0, #0
 8005e84:	f7fa fa20 	bl	80002c8 <__aeabi_dsub>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	4649      	mov	r1, r9
 8005e90:	f7fa fe44 	bl	8000b1c <__aeabi_dcmplt>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	f43f af35 	beq.w	8005d04 <_dtoa_r+0x464>
 8005e9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e9c:	1e6b      	subs	r3, r5, #1
 8005e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ea0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ea4:	2b30      	cmp	r3, #48	; 0x30
 8005ea6:	d0f8      	beq.n	8005e9a <_dtoa_r+0x5fa>
 8005ea8:	9700      	str	r7, [sp, #0]
 8005eaa:	e049      	b.n	8005f40 <_dtoa_r+0x6a0>
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <_dtoa_r+0x624>)
 8005eae:	f7fa fbc3 	bl	8000638 <__aeabi_dmul>
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	4689      	mov	r9, r1
 8005eb6:	e7bd      	b.n	8005e34 <_dtoa_r+0x594>
 8005eb8:	08007fd0 	.word	0x08007fd0
 8005ebc:	08007fa8 	.word	0x08007fa8
 8005ec0:	3ff00000 	.word	0x3ff00000
 8005ec4:	40240000 	.word	0x40240000
 8005ec8:	401c0000 	.word	0x401c0000
 8005ecc:	40140000 	.word	0x40140000
 8005ed0:	3fe00000 	.word	0x3fe00000
 8005ed4:	9d01      	ldr	r5, [sp, #4]
 8005ed6:	4656      	mov	r6, sl
 8005ed8:	465f      	mov	r7, fp
 8005eda:	4642      	mov	r2, r8
 8005edc:	464b      	mov	r3, r9
 8005ede:	4630      	mov	r0, r6
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	f7fa fcd3 	bl	800088c <__aeabi_ddiv>
 8005ee6:	f7fa fe57 	bl	8000b98 <__aeabi_d2iz>
 8005eea:	4682      	mov	sl, r0
 8005eec:	f7fa fb3a 	bl	8000564 <__aeabi_i2d>
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	f7fa fba0 	bl	8000638 <__aeabi_dmul>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4630      	mov	r0, r6
 8005efe:	4639      	mov	r1, r7
 8005f00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f04:	f7fa f9e0 	bl	80002c8 <__aeabi_dsub>
 8005f08:	f805 6b01 	strb.w	r6, [r5], #1
 8005f0c:	9e01      	ldr	r6, [sp, #4]
 8005f0e:	9f03      	ldr	r7, [sp, #12]
 8005f10:	1bae      	subs	r6, r5, r6
 8005f12:	42b7      	cmp	r7, r6
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	d135      	bne.n	8005f86 <_dtoa_r+0x6e6>
 8005f1a:	f7fa f9d7 	bl	80002cc <__adddf3>
 8005f1e:	4642      	mov	r2, r8
 8005f20:	464b      	mov	r3, r9
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	f7fa fe17 	bl	8000b58 <__aeabi_dcmpgt>
 8005f2a:	b9d0      	cbnz	r0, 8005f62 <_dtoa_r+0x6c2>
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	4630      	mov	r0, r6
 8005f32:	4639      	mov	r1, r7
 8005f34:	f7fa fde8 	bl	8000b08 <__aeabi_dcmpeq>
 8005f38:	b110      	cbz	r0, 8005f40 <_dtoa_r+0x6a0>
 8005f3a:	f01a 0f01 	tst.w	sl, #1
 8005f3e:	d110      	bne.n	8005f62 <_dtoa_r+0x6c2>
 8005f40:	4620      	mov	r0, r4
 8005f42:	ee18 1a10 	vmov	r1, s16
 8005f46:	f000 fae9 	bl	800651c <_Bfree>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9800      	ldr	r0, [sp, #0]
 8005f4e:	702b      	strb	r3, [r5, #0]
 8005f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f52:	3001      	adds	r0, #1
 8005f54:	6018      	str	r0, [r3, #0]
 8005f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f43f acf1 	beq.w	8005940 <_dtoa_r+0xa0>
 8005f5e:	601d      	str	r5, [r3, #0]
 8005f60:	e4ee      	b.n	8005940 <_dtoa_r+0xa0>
 8005f62:	9f00      	ldr	r7, [sp, #0]
 8005f64:	462b      	mov	r3, r5
 8005f66:	461d      	mov	r5, r3
 8005f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f6c:	2a39      	cmp	r2, #57	; 0x39
 8005f6e:	d106      	bne.n	8005f7e <_dtoa_r+0x6de>
 8005f70:	9a01      	ldr	r2, [sp, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d1f7      	bne.n	8005f66 <_dtoa_r+0x6c6>
 8005f76:	9901      	ldr	r1, [sp, #4]
 8005f78:	2230      	movs	r2, #48	; 0x30
 8005f7a:	3701      	adds	r7, #1
 8005f7c:	700a      	strb	r2, [r1, #0]
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	3201      	adds	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	e790      	b.n	8005ea8 <_dtoa_r+0x608>
 8005f86:	4ba6      	ldr	r3, [pc, #664]	; (8006220 <_dtoa_r+0x980>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f7fa fb55 	bl	8000638 <__aeabi_dmul>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2300      	movs	r3, #0
 8005f92:	4606      	mov	r6, r0
 8005f94:	460f      	mov	r7, r1
 8005f96:	f7fa fdb7 	bl	8000b08 <__aeabi_dcmpeq>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d09d      	beq.n	8005eda <_dtoa_r+0x63a>
 8005f9e:	e7cf      	b.n	8005f40 <_dtoa_r+0x6a0>
 8005fa0:	9a08      	ldr	r2, [sp, #32]
 8005fa2:	2a00      	cmp	r2, #0
 8005fa4:	f000 80d7 	beq.w	8006156 <_dtoa_r+0x8b6>
 8005fa8:	9a06      	ldr	r2, [sp, #24]
 8005faa:	2a01      	cmp	r2, #1
 8005fac:	f300 80ba 	bgt.w	8006124 <_dtoa_r+0x884>
 8005fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	f000 80b2 	beq.w	800611c <_dtoa_r+0x87c>
 8005fb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005fbc:	9e07      	ldr	r6, [sp, #28]
 8005fbe:	9d04      	ldr	r5, [sp, #16]
 8005fc0:	9a04      	ldr	r2, [sp, #16]
 8005fc2:	441a      	add	r2, r3
 8005fc4:	9204      	str	r2, [sp, #16]
 8005fc6:	9a05      	ldr	r2, [sp, #20]
 8005fc8:	2101      	movs	r1, #1
 8005fca:	441a      	add	r2, r3
 8005fcc:	4620      	mov	r0, r4
 8005fce:	9205      	str	r2, [sp, #20]
 8005fd0:	f000 fb5c 	bl	800668c <__i2b>
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	2d00      	cmp	r5, #0
 8005fd8:	dd0c      	ble.n	8005ff4 <_dtoa_r+0x754>
 8005fda:	9b05      	ldr	r3, [sp, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	dd09      	ble.n	8005ff4 <_dtoa_r+0x754>
 8005fe0:	42ab      	cmp	r3, r5
 8005fe2:	9a04      	ldr	r2, [sp, #16]
 8005fe4:	bfa8      	it	ge
 8005fe6:	462b      	movge	r3, r5
 8005fe8:	1ad2      	subs	r2, r2, r3
 8005fea:	9204      	str	r2, [sp, #16]
 8005fec:	9a05      	ldr	r2, [sp, #20]
 8005fee:	1aed      	subs	r5, r5, r3
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	9305      	str	r3, [sp, #20]
 8005ff4:	9b07      	ldr	r3, [sp, #28]
 8005ff6:	b31b      	cbz	r3, 8006040 <_dtoa_r+0x7a0>
 8005ff8:	9b08      	ldr	r3, [sp, #32]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 80af 	beq.w	800615e <_dtoa_r+0x8be>
 8006000:	2e00      	cmp	r6, #0
 8006002:	dd13      	ble.n	800602c <_dtoa_r+0x78c>
 8006004:	4639      	mov	r1, r7
 8006006:	4632      	mov	r2, r6
 8006008:	4620      	mov	r0, r4
 800600a:	f000 fbff 	bl	800680c <__pow5mult>
 800600e:	ee18 2a10 	vmov	r2, s16
 8006012:	4601      	mov	r1, r0
 8006014:	4607      	mov	r7, r0
 8006016:	4620      	mov	r0, r4
 8006018:	f000 fb4e 	bl	80066b8 <__multiply>
 800601c:	ee18 1a10 	vmov	r1, s16
 8006020:	4680      	mov	r8, r0
 8006022:	4620      	mov	r0, r4
 8006024:	f000 fa7a 	bl	800651c <_Bfree>
 8006028:	ee08 8a10 	vmov	s16, r8
 800602c:	9b07      	ldr	r3, [sp, #28]
 800602e:	1b9a      	subs	r2, r3, r6
 8006030:	d006      	beq.n	8006040 <_dtoa_r+0x7a0>
 8006032:	ee18 1a10 	vmov	r1, s16
 8006036:	4620      	mov	r0, r4
 8006038:	f000 fbe8 	bl	800680c <__pow5mult>
 800603c:	ee08 0a10 	vmov	s16, r0
 8006040:	2101      	movs	r1, #1
 8006042:	4620      	mov	r0, r4
 8006044:	f000 fb22 	bl	800668c <__i2b>
 8006048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	4606      	mov	r6, r0
 800604e:	f340 8088 	ble.w	8006162 <_dtoa_r+0x8c2>
 8006052:	461a      	mov	r2, r3
 8006054:	4601      	mov	r1, r0
 8006056:	4620      	mov	r0, r4
 8006058:	f000 fbd8 	bl	800680c <__pow5mult>
 800605c:	9b06      	ldr	r3, [sp, #24]
 800605e:	2b01      	cmp	r3, #1
 8006060:	4606      	mov	r6, r0
 8006062:	f340 8081 	ble.w	8006168 <_dtoa_r+0x8c8>
 8006066:	f04f 0800 	mov.w	r8, #0
 800606a:	6933      	ldr	r3, [r6, #16]
 800606c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006070:	6918      	ldr	r0, [r3, #16]
 8006072:	f000 fabb 	bl	80065ec <__hi0bits>
 8006076:	f1c0 0020 	rsb	r0, r0, #32
 800607a:	9b05      	ldr	r3, [sp, #20]
 800607c:	4418      	add	r0, r3
 800607e:	f010 001f 	ands.w	r0, r0, #31
 8006082:	f000 8092 	beq.w	80061aa <_dtoa_r+0x90a>
 8006086:	f1c0 0320 	rsb	r3, r0, #32
 800608a:	2b04      	cmp	r3, #4
 800608c:	f340 808a 	ble.w	80061a4 <_dtoa_r+0x904>
 8006090:	f1c0 001c 	rsb	r0, r0, #28
 8006094:	9b04      	ldr	r3, [sp, #16]
 8006096:	4403      	add	r3, r0
 8006098:	9304      	str	r3, [sp, #16]
 800609a:	9b05      	ldr	r3, [sp, #20]
 800609c:	4403      	add	r3, r0
 800609e:	4405      	add	r5, r0
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	dd07      	ble.n	80060b8 <_dtoa_r+0x818>
 80060a8:	ee18 1a10 	vmov	r1, s16
 80060ac:	461a      	mov	r2, r3
 80060ae:	4620      	mov	r0, r4
 80060b0:	f000 fc06 	bl	80068c0 <__lshift>
 80060b4:	ee08 0a10 	vmov	s16, r0
 80060b8:	9b05      	ldr	r3, [sp, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dd05      	ble.n	80060ca <_dtoa_r+0x82a>
 80060be:	4631      	mov	r1, r6
 80060c0:	461a      	mov	r2, r3
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 fbfc 	bl	80068c0 <__lshift>
 80060c8:	4606      	mov	r6, r0
 80060ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d06e      	beq.n	80061ae <_dtoa_r+0x90e>
 80060d0:	ee18 0a10 	vmov	r0, s16
 80060d4:	4631      	mov	r1, r6
 80060d6:	f000 fc63 	bl	80069a0 <__mcmp>
 80060da:	2800      	cmp	r0, #0
 80060dc:	da67      	bge.n	80061ae <_dtoa_r+0x90e>
 80060de:	9b00      	ldr	r3, [sp, #0]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	ee18 1a10 	vmov	r1, s16
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	220a      	movs	r2, #10
 80060ea:	2300      	movs	r3, #0
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fa37 	bl	8006560 <__multadd>
 80060f2:	9b08      	ldr	r3, [sp, #32]
 80060f4:	ee08 0a10 	vmov	s16, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 81b1 	beq.w	8006460 <_dtoa_r+0xbc0>
 80060fe:	2300      	movs	r3, #0
 8006100:	4639      	mov	r1, r7
 8006102:	220a      	movs	r2, #10
 8006104:	4620      	mov	r0, r4
 8006106:	f000 fa2b 	bl	8006560 <__multadd>
 800610a:	9b02      	ldr	r3, [sp, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	4607      	mov	r7, r0
 8006110:	f300 808e 	bgt.w	8006230 <_dtoa_r+0x990>
 8006114:	9b06      	ldr	r3, [sp, #24]
 8006116:	2b02      	cmp	r3, #2
 8006118:	dc51      	bgt.n	80061be <_dtoa_r+0x91e>
 800611a:	e089      	b.n	8006230 <_dtoa_r+0x990>
 800611c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800611e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006122:	e74b      	b.n	8005fbc <_dtoa_r+0x71c>
 8006124:	9b03      	ldr	r3, [sp, #12]
 8006126:	1e5e      	subs	r6, r3, #1
 8006128:	9b07      	ldr	r3, [sp, #28]
 800612a:	42b3      	cmp	r3, r6
 800612c:	bfbf      	itttt	lt
 800612e:	9b07      	ldrlt	r3, [sp, #28]
 8006130:	9607      	strlt	r6, [sp, #28]
 8006132:	1af2      	sublt	r2, r6, r3
 8006134:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006136:	bfb6      	itet	lt
 8006138:	189b      	addlt	r3, r3, r2
 800613a:	1b9e      	subge	r6, r3, r6
 800613c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	bfb8      	it	lt
 8006142:	2600      	movlt	r6, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	bfb7      	itett	lt
 8006148:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800614c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006150:	1a9d      	sublt	r5, r3, r2
 8006152:	2300      	movlt	r3, #0
 8006154:	e734      	b.n	8005fc0 <_dtoa_r+0x720>
 8006156:	9e07      	ldr	r6, [sp, #28]
 8006158:	9d04      	ldr	r5, [sp, #16]
 800615a:	9f08      	ldr	r7, [sp, #32]
 800615c:	e73b      	b.n	8005fd6 <_dtoa_r+0x736>
 800615e:	9a07      	ldr	r2, [sp, #28]
 8006160:	e767      	b.n	8006032 <_dtoa_r+0x792>
 8006162:	9b06      	ldr	r3, [sp, #24]
 8006164:	2b01      	cmp	r3, #1
 8006166:	dc18      	bgt.n	800619a <_dtoa_r+0x8fa>
 8006168:	f1ba 0f00 	cmp.w	sl, #0
 800616c:	d115      	bne.n	800619a <_dtoa_r+0x8fa>
 800616e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006172:	b993      	cbnz	r3, 800619a <_dtoa_r+0x8fa>
 8006174:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006178:	0d1b      	lsrs	r3, r3, #20
 800617a:	051b      	lsls	r3, r3, #20
 800617c:	b183      	cbz	r3, 80061a0 <_dtoa_r+0x900>
 800617e:	9b04      	ldr	r3, [sp, #16]
 8006180:	3301      	adds	r3, #1
 8006182:	9304      	str	r3, [sp, #16]
 8006184:	9b05      	ldr	r3, [sp, #20]
 8006186:	3301      	adds	r3, #1
 8006188:	9305      	str	r3, [sp, #20]
 800618a:	f04f 0801 	mov.w	r8, #1
 800618e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006190:	2b00      	cmp	r3, #0
 8006192:	f47f af6a 	bne.w	800606a <_dtoa_r+0x7ca>
 8006196:	2001      	movs	r0, #1
 8006198:	e76f      	b.n	800607a <_dtoa_r+0x7da>
 800619a:	f04f 0800 	mov.w	r8, #0
 800619e:	e7f6      	b.n	800618e <_dtoa_r+0x8ee>
 80061a0:	4698      	mov	r8, r3
 80061a2:	e7f4      	b.n	800618e <_dtoa_r+0x8ee>
 80061a4:	f43f af7d 	beq.w	80060a2 <_dtoa_r+0x802>
 80061a8:	4618      	mov	r0, r3
 80061aa:	301c      	adds	r0, #28
 80061ac:	e772      	b.n	8006094 <_dtoa_r+0x7f4>
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	dc37      	bgt.n	8006224 <_dtoa_r+0x984>
 80061b4:	9b06      	ldr	r3, [sp, #24]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	dd34      	ble.n	8006224 <_dtoa_r+0x984>
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	9302      	str	r3, [sp, #8]
 80061be:	9b02      	ldr	r3, [sp, #8]
 80061c0:	b96b      	cbnz	r3, 80061de <_dtoa_r+0x93e>
 80061c2:	4631      	mov	r1, r6
 80061c4:	2205      	movs	r2, #5
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 f9ca 	bl	8006560 <__multadd>
 80061cc:	4601      	mov	r1, r0
 80061ce:	4606      	mov	r6, r0
 80061d0:	ee18 0a10 	vmov	r0, s16
 80061d4:	f000 fbe4 	bl	80069a0 <__mcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f73f adbb 	bgt.w	8005d54 <_dtoa_r+0x4b4>
 80061de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e0:	9d01      	ldr	r5, [sp, #4]
 80061e2:	43db      	mvns	r3, r3
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	f04f 0800 	mov.w	r8, #0
 80061ea:	4631      	mov	r1, r6
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 f995 	bl	800651c <_Bfree>
 80061f2:	2f00      	cmp	r7, #0
 80061f4:	f43f aea4 	beq.w	8005f40 <_dtoa_r+0x6a0>
 80061f8:	f1b8 0f00 	cmp.w	r8, #0
 80061fc:	d005      	beq.n	800620a <_dtoa_r+0x96a>
 80061fe:	45b8      	cmp	r8, r7
 8006200:	d003      	beq.n	800620a <_dtoa_r+0x96a>
 8006202:	4641      	mov	r1, r8
 8006204:	4620      	mov	r0, r4
 8006206:	f000 f989 	bl	800651c <_Bfree>
 800620a:	4639      	mov	r1, r7
 800620c:	4620      	mov	r0, r4
 800620e:	f000 f985 	bl	800651c <_Bfree>
 8006212:	e695      	b.n	8005f40 <_dtoa_r+0x6a0>
 8006214:	2600      	movs	r6, #0
 8006216:	4637      	mov	r7, r6
 8006218:	e7e1      	b.n	80061de <_dtoa_r+0x93e>
 800621a:	9700      	str	r7, [sp, #0]
 800621c:	4637      	mov	r7, r6
 800621e:	e599      	b.n	8005d54 <_dtoa_r+0x4b4>
 8006220:	40240000 	.word	0x40240000
 8006224:	9b08      	ldr	r3, [sp, #32]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80ca 	beq.w	80063c0 <_dtoa_r+0xb20>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	9302      	str	r3, [sp, #8]
 8006230:	2d00      	cmp	r5, #0
 8006232:	dd05      	ble.n	8006240 <_dtoa_r+0x9a0>
 8006234:	4639      	mov	r1, r7
 8006236:	462a      	mov	r2, r5
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fb41 	bl	80068c0 <__lshift>
 800623e:	4607      	mov	r7, r0
 8006240:	f1b8 0f00 	cmp.w	r8, #0
 8006244:	d05b      	beq.n	80062fe <_dtoa_r+0xa5e>
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f927 	bl	800649c <_Balloc>
 800624e:	4605      	mov	r5, r0
 8006250:	b928      	cbnz	r0, 800625e <_dtoa_r+0x9be>
 8006252:	4b87      	ldr	r3, [pc, #540]	; (8006470 <_dtoa_r+0xbd0>)
 8006254:	4602      	mov	r2, r0
 8006256:	f240 21ea 	movw	r1, #746	; 0x2ea
 800625a:	f7ff bb3b 	b.w	80058d4 <_dtoa_r+0x34>
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	3202      	adds	r2, #2
 8006262:	0092      	lsls	r2, r2, #2
 8006264:	f107 010c 	add.w	r1, r7, #12
 8006268:	300c      	adds	r0, #12
 800626a:	f7fe fcfd 	bl	8004c68 <memcpy>
 800626e:	2201      	movs	r2, #1
 8006270:	4629      	mov	r1, r5
 8006272:	4620      	mov	r0, r4
 8006274:	f000 fb24 	bl	80068c0 <__lshift>
 8006278:	9b01      	ldr	r3, [sp, #4]
 800627a:	f103 0901 	add.w	r9, r3, #1
 800627e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006282:	4413      	add	r3, r2
 8006284:	9305      	str	r3, [sp, #20]
 8006286:	f00a 0301 	and.w	r3, sl, #1
 800628a:	46b8      	mov	r8, r7
 800628c:	9304      	str	r3, [sp, #16]
 800628e:	4607      	mov	r7, r0
 8006290:	4631      	mov	r1, r6
 8006292:	ee18 0a10 	vmov	r0, s16
 8006296:	f7ff fa77 	bl	8005788 <quorem>
 800629a:	4641      	mov	r1, r8
 800629c:	9002      	str	r0, [sp, #8]
 800629e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80062a2:	ee18 0a10 	vmov	r0, s16
 80062a6:	f000 fb7b 	bl	80069a0 <__mcmp>
 80062aa:	463a      	mov	r2, r7
 80062ac:	9003      	str	r0, [sp, #12]
 80062ae:	4631      	mov	r1, r6
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fb91 	bl	80069d8 <__mdiff>
 80062b6:	68c2      	ldr	r2, [r0, #12]
 80062b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80062bc:	4605      	mov	r5, r0
 80062be:	bb02      	cbnz	r2, 8006302 <_dtoa_r+0xa62>
 80062c0:	4601      	mov	r1, r0
 80062c2:	ee18 0a10 	vmov	r0, s16
 80062c6:	f000 fb6b 	bl	80069a0 <__mcmp>
 80062ca:	4602      	mov	r2, r0
 80062cc:	4629      	mov	r1, r5
 80062ce:	4620      	mov	r0, r4
 80062d0:	9207      	str	r2, [sp, #28]
 80062d2:	f000 f923 	bl	800651c <_Bfree>
 80062d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80062da:	ea43 0102 	orr.w	r1, r3, r2
 80062de:	9b04      	ldr	r3, [sp, #16]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	464d      	mov	r5, r9
 80062e4:	d10f      	bne.n	8006306 <_dtoa_r+0xa66>
 80062e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062ea:	d02a      	beq.n	8006342 <_dtoa_r+0xaa2>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	dd02      	ble.n	80062f8 <_dtoa_r+0xa58>
 80062f2:	9b02      	ldr	r3, [sp, #8]
 80062f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80062f8:	f88b a000 	strb.w	sl, [fp]
 80062fc:	e775      	b.n	80061ea <_dtoa_r+0x94a>
 80062fe:	4638      	mov	r0, r7
 8006300:	e7ba      	b.n	8006278 <_dtoa_r+0x9d8>
 8006302:	2201      	movs	r2, #1
 8006304:	e7e2      	b.n	80062cc <_dtoa_r+0xa2c>
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	db04      	blt.n	8006316 <_dtoa_r+0xa76>
 800630c:	9906      	ldr	r1, [sp, #24]
 800630e:	430b      	orrs	r3, r1
 8006310:	9904      	ldr	r1, [sp, #16]
 8006312:	430b      	orrs	r3, r1
 8006314:	d122      	bne.n	800635c <_dtoa_r+0xabc>
 8006316:	2a00      	cmp	r2, #0
 8006318:	ddee      	ble.n	80062f8 <_dtoa_r+0xa58>
 800631a:	ee18 1a10 	vmov	r1, s16
 800631e:	2201      	movs	r2, #1
 8006320:	4620      	mov	r0, r4
 8006322:	f000 facd 	bl	80068c0 <__lshift>
 8006326:	4631      	mov	r1, r6
 8006328:	ee08 0a10 	vmov	s16, r0
 800632c:	f000 fb38 	bl	80069a0 <__mcmp>
 8006330:	2800      	cmp	r0, #0
 8006332:	dc03      	bgt.n	800633c <_dtoa_r+0xa9c>
 8006334:	d1e0      	bne.n	80062f8 <_dtoa_r+0xa58>
 8006336:	f01a 0f01 	tst.w	sl, #1
 800633a:	d0dd      	beq.n	80062f8 <_dtoa_r+0xa58>
 800633c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006340:	d1d7      	bne.n	80062f2 <_dtoa_r+0xa52>
 8006342:	2339      	movs	r3, #57	; 0x39
 8006344:	f88b 3000 	strb.w	r3, [fp]
 8006348:	462b      	mov	r3, r5
 800634a:	461d      	mov	r5, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006352:	2a39      	cmp	r2, #57	; 0x39
 8006354:	d071      	beq.n	800643a <_dtoa_r+0xb9a>
 8006356:	3201      	adds	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e746      	b.n	80061ea <_dtoa_r+0x94a>
 800635c:	2a00      	cmp	r2, #0
 800635e:	dd07      	ble.n	8006370 <_dtoa_r+0xad0>
 8006360:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006364:	d0ed      	beq.n	8006342 <_dtoa_r+0xaa2>
 8006366:	f10a 0301 	add.w	r3, sl, #1
 800636a:	f88b 3000 	strb.w	r3, [fp]
 800636e:	e73c      	b.n	80061ea <_dtoa_r+0x94a>
 8006370:	9b05      	ldr	r3, [sp, #20]
 8006372:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006376:	4599      	cmp	r9, r3
 8006378:	d047      	beq.n	800640a <_dtoa_r+0xb6a>
 800637a:	ee18 1a10 	vmov	r1, s16
 800637e:	2300      	movs	r3, #0
 8006380:	220a      	movs	r2, #10
 8006382:	4620      	mov	r0, r4
 8006384:	f000 f8ec 	bl	8006560 <__multadd>
 8006388:	45b8      	cmp	r8, r7
 800638a:	ee08 0a10 	vmov	s16, r0
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	f04f 020a 	mov.w	r2, #10
 8006396:	4641      	mov	r1, r8
 8006398:	4620      	mov	r0, r4
 800639a:	d106      	bne.n	80063aa <_dtoa_r+0xb0a>
 800639c:	f000 f8e0 	bl	8006560 <__multadd>
 80063a0:	4680      	mov	r8, r0
 80063a2:	4607      	mov	r7, r0
 80063a4:	f109 0901 	add.w	r9, r9, #1
 80063a8:	e772      	b.n	8006290 <_dtoa_r+0x9f0>
 80063aa:	f000 f8d9 	bl	8006560 <__multadd>
 80063ae:	4639      	mov	r1, r7
 80063b0:	4680      	mov	r8, r0
 80063b2:	2300      	movs	r3, #0
 80063b4:	220a      	movs	r2, #10
 80063b6:	4620      	mov	r0, r4
 80063b8:	f000 f8d2 	bl	8006560 <__multadd>
 80063bc:	4607      	mov	r7, r0
 80063be:	e7f1      	b.n	80063a4 <_dtoa_r+0xb04>
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	9302      	str	r3, [sp, #8]
 80063c4:	9d01      	ldr	r5, [sp, #4]
 80063c6:	ee18 0a10 	vmov	r0, s16
 80063ca:	4631      	mov	r1, r6
 80063cc:	f7ff f9dc 	bl	8005788 <quorem>
 80063d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	f805 ab01 	strb.w	sl, [r5], #1
 80063da:	1aea      	subs	r2, r5, r3
 80063dc:	9b02      	ldr	r3, [sp, #8]
 80063de:	4293      	cmp	r3, r2
 80063e0:	dd09      	ble.n	80063f6 <_dtoa_r+0xb56>
 80063e2:	ee18 1a10 	vmov	r1, s16
 80063e6:	2300      	movs	r3, #0
 80063e8:	220a      	movs	r2, #10
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 f8b8 	bl	8006560 <__multadd>
 80063f0:	ee08 0a10 	vmov	s16, r0
 80063f4:	e7e7      	b.n	80063c6 <_dtoa_r+0xb26>
 80063f6:	9b02      	ldr	r3, [sp, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bfc8      	it	gt
 80063fc:	461d      	movgt	r5, r3
 80063fe:	9b01      	ldr	r3, [sp, #4]
 8006400:	bfd8      	it	le
 8006402:	2501      	movle	r5, #1
 8006404:	441d      	add	r5, r3
 8006406:	f04f 0800 	mov.w	r8, #0
 800640a:	ee18 1a10 	vmov	r1, s16
 800640e:	2201      	movs	r2, #1
 8006410:	4620      	mov	r0, r4
 8006412:	f000 fa55 	bl	80068c0 <__lshift>
 8006416:	4631      	mov	r1, r6
 8006418:	ee08 0a10 	vmov	s16, r0
 800641c:	f000 fac0 	bl	80069a0 <__mcmp>
 8006420:	2800      	cmp	r0, #0
 8006422:	dc91      	bgt.n	8006348 <_dtoa_r+0xaa8>
 8006424:	d102      	bne.n	800642c <_dtoa_r+0xb8c>
 8006426:	f01a 0f01 	tst.w	sl, #1
 800642a:	d18d      	bne.n	8006348 <_dtoa_r+0xaa8>
 800642c:	462b      	mov	r3, r5
 800642e:	461d      	mov	r5, r3
 8006430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006434:	2a30      	cmp	r2, #48	; 0x30
 8006436:	d0fa      	beq.n	800642e <_dtoa_r+0xb8e>
 8006438:	e6d7      	b.n	80061ea <_dtoa_r+0x94a>
 800643a:	9a01      	ldr	r2, [sp, #4]
 800643c:	429a      	cmp	r2, r3
 800643e:	d184      	bne.n	800634a <_dtoa_r+0xaaa>
 8006440:	9b00      	ldr	r3, [sp, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	2331      	movs	r3, #49	; 0x31
 8006448:	7013      	strb	r3, [r2, #0]
 800644a:	e6ce      	b.n	80061ea <_dtoa_r+0x94a>
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <_dtoa_r+0xbd4>)
 800644e:	f7ff ba95 	b.w	800597c <_dtoa_r+0xdc>
 8006452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006454:	2b00      	cmp	r3, #0
 8006456:	f47f aa6e 	bne.w	8005936 <_dtoa_r+0x96>
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <_dtoa_r+0xbd8>)
 800645c:	f7ff ba8e 	b.w	800597c <_dtoa_r+0xdc>
 8006460:	9b02      	ldr	r3, [sp, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	dcae      	bgt.n	80063c4 <_dtoa_r+0xb24>
 8006466:	9b06      	ldr	r3, [sp, #24]
 8006468:	2b02      	cmp	r3, #2
 800646a:	f73f aea8 	bgt.w	80061be <_dtoa_r+0x91e>
 800646e:	e7a9      	b.n	80063c4 <_dtoa_r+0xb24>
 8006470:	08007f3b 	.word	0x08007f3b
 8006474:	08007e98 	.word	0x08007e98
 8006478:	08007ebc 	.word	0x08007ebc

0800647c <_localeconv_r>:
 800647c:	4800      	ldr	r0, [pc, #0]	; (8006480 <_localeconv_r+0x4>)
 800647e:	4770      	bx	lr
 8006480:	2000060c 	.word	0x2000060c

08006484 <__malloc_lock>:
 8006484:	4801      	ldr	r0, [pc, #4]	; (800648c <__malloc_lock+0x8>)
 8006486:	f000 bd5e 	b.w	8006f46 <__retarget_lock_acquire_recursive>
 800648a:	bf00      	nop
 800648c:	2000081c 	.word	0x2000081c

08006490 <__malloc_unlock>:
 8006490:	4801      	ldr	r0, [pc, #4]	; (8006498 <__malloc_unlock+0x8>)
 8006492:	f000 bd59 	b.w	8006f48 <__retarget_lock_release_recursive>
 8006496:	bf00      	nop
 8006498:	2000081c 	.word	0x2000081c

0800649c <_Balloc>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064a0:	4604      	mov	r4, r0
 80064a2:	460d      	mov	r5, r1
 80064a4:	b976      	cbnz	r6, 80064c4 <_Balloc+0x28>
 80064a6:	2010      	movs	r0, #16
 80064a8:	f7fe fbd6 	bl	8004c58 <malloc>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6260      	str	r0, [r4, #36]	; 0x24
 80064b0:	b920      	cbnz	r0, 80064bc <_Balloc+0x20>
 80064b2:	4b18      	ldr	r3, [pc, #96]	; (8006514 <_Balloc+0x78>)
 80064b4:	4818      	ldr	r0, [pc, #96]	; (8006518 <_Balloc+0x7c>)
 80064b6:	2166      	movs	r1, #102	; 0x66
 80064b8:	f000 fd14 	bl	8006ee4 <__assert_func>
 80064bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c0:	6006      	str	r6, [r0, #0]
 80064c2:	60c6      	str	r6, [r0, #12]
 80064c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064c6:	68f3      	ldr	r3, [r6, #12]
 80064c8:	b183      	cbz	r3, 80064ec <_Balloc+0x50>
 80064ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064d2:	b9b8      	cbnz	r0, 8006504 <_Balloc+0x68>
 80064d4:	2101      	movs	r1, #1
 80064d6:	fa01 f605 	lsl.w	r6, r1, r5
 80064da:	1d72      	adds	r2, r6, #5
 80064dc:	0092      	lsls	r2, r2, #2
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 fb60 	bl	8006ba4 <_calloc_r>
 80064e4:	b160      	cbz	r0, 8006500 <_Balloc+0x64>
 80064e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064ea:	e00e      	b.n	800650a <_Balloc+0x6e>
 80064ec:	2221      	movs	r2, #33	; 0x21
 80064ee:	2104      	movs	r1, #4
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fb57 	bl	8006ba4 <_calloc_r>
 80064f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f8:	60f0      	str	r0, [r6, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e4      	bne.n	80064ca <_Balloc+0x2e>
 8006500:	2000      	movs	r0, #0
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	6802      	ldr	r2, [r0, #0]
 8006506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800650a:	2300      	movs	r3, #0
 800650c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006510:	e7f7      	b.n	8006502 <_Balloc+0x66>
 8006512:	bf00      	nop
 8006514:	08007ec9 	.word	0x08007ec9
 8006518:	08007f4c 	.word	0x08007f4c

0800651c <_Bfree>:
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006520:	4605      	mov	r5, r0
 8006522:	460c      	mov	r4, r1
 8006524:	b976      	cbnz	r6, 8006544 <_Bfree+0x28>
 8006526:	2010      	movs	r0, #16
 8006528:	f7fe fb96 	bl	8004c58 <malloc>
 800652c:	4602      	mov	r2, r0
 800652e:	6268      	str	r0, [r5, #36]	; 0x24
 8006530:	b920      	cbnz	r0, 800653c <_Bfree+0x20>
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <_Bfree+0x3c>)
 8006534:	4809      	ldr	r0, [pc, #36]	; (800655c <_Bfree+0x40>)
 8006536:	218a      	movs	r1, #138	; 0x8a
 8006538:	f000 fcd4 	bl	8006ee4 <__assert_func>
 800653c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006540:	6006      	str	r6, [r0, #0]
 8006542:	60c6      	str	r6, [r0, #12]
 8006544:	b13c      	cbz	r4, 8006556 <_Bfree+0x3a>
 8006546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006548:	6862      	ldr	r2, [r4, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006550:	6021      	str	r1, [r4, #0]
 8006552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	08007ec9 	.word	0x08007ec9
 800655c:	08007f4c 	.word	0x08007f4c

08006560 <__multadd>:
 8006560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006564:	690d      	ldr	r5, [r1, #16]
 8006566:	4607      	mov	r7, r0
 8006568:	460c      	mov	r4, r1
 800656a:	461e      	mov	r6, r3
 800656c:	f101 0c14 	add.w	ip, r1, #20
 8006570:	2000      	movs	r0, #0
 8006572:	f8dc 3000 	ldr.w	r3, [ip]
 8006576:	b299      	uxth	r1, r3
 8006578:	fb02 6101 	mla	r1, r2, r1, r6
 800657c:	0c1e      	lsrs	r6, r3, #16
 800657e:	0c0b      	lsrs	r3, r1, #16
 8006580:	fb02 3306 	mla	r3, r2, r6, r3
 8006584:	b289      	uxth	r1, r1
 8006586:	3001      	adds	r0, #1
 8006588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800658c:	4285      	cmp	r5, r0
 800658e:	f84c 1b04 	str.w	r1, [ip], #4
 8006592:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006596:	dcec      	bgt.n	8006572 <__multadd+0x12>
 8006598:	b30e      	cbz	r6, 80065de <__multadd+0x7e>
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	42ab      	cmp	r3, r5
 800659e:	dc19      	bgt.n	80065d4 <__multadd+0x74>
 80065a0:	6861      	ldr	r1, [r4, #4]
 80065a2:	4638      	mov	r0, r7
 80065a4:	3101      	adds	r1, #1
 80065a6:	f7ff ff79 	bl	800649c <_Balloc>
 80065aa:	4680      	mov	r8, r0
 80065ac:	b928      	cbnz	r0, 80065ba <__multadd+0x5a>
 80065ae:	4602      	mov	r2, r0
 80065b0:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <__multadd+0x84>)
 80065b2:	480d      	ldr	r0, [pc, #52]	; (80065e8 <__multadd+0x88>)
 80065b4:	21b5      	movs	r1, #181	; 0xb5
 80065b6:	f000 fc95 	bl	8006ee4 <__assert_func>
 80065ba:	6922      	ldr	r2, [r4, #16]
 80065bc:	3202      	adds	r2, #2
 80065be:	f104 010c 	add.w	r1, r4, #12
 80065c2:	0092      	lsls	r2, r2, #2
 80065c4:	300c      	adds	r0, #12
 80065c6:	f7fe fb4f 	bl	8004c68 <memcpy>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff ffa5 	bl	800651c <_Bfree>
 80065d2:	4644      	mov	r4, r8
 80065d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065d8:	3501      	adds	r5, #1
 80065da:	615e      	str	r6, [r3, #20]
 80065dc:	6125      	str	r5, [r4, #16]
 80065de:	4620      	mov	r0, r4
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	08007f3b 	.word	0x08007f3b
 80065e8:	08007f4c 	.word	0x08007f4c

080065ec <__hi0bits>:
 80065ec:	0c03      	lsrs	r3, r0, #16
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	b9d3      	cbnz	r3, 8006628 <__hi0bits+0x3c>
 80065f2:	0400      	lsls	r0, r0, #16
 80065f4:	2310      	movs	r3, #16
 80065f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065fa:	bf04      	itt	eq
 80065fc:	0200      	lsleq	r0, r0, #8
 80065fe:	3308      	addeq	r3, #8
 8006600:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006604:	bf04      	itt	eq
 8006606:	0100      	lsleq	r0, r0, #4
 8006608:	3304      	addeq	r3, #4
 800660a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800660e:	bf04      	itt	eq
 8006610:	0080      	lsleq	r0, r0, #2
 8006612:	3302      	addeq	r3, #2
 8006614:	2800      	cmp	r0, #0
 8006616:	db05      	blt.n	8006624 <__hi0bits+0x38>
 8006618:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800661c:	f103 0301 	add.w	r3, r3, #1
 8006620:	bf08      	it	eq
 8006622:	2320      	moveq	r3, #32
 8006624:	4618      	mov	r0, r3
 8006626:	4770      	bx	lr
 8006628:	2300      	movs	r3, #0
 800662a:	e7e4      	b.n	80065f6 <__hi0bits+0xa>

0800662c <__lo0bits>:
 800662c:	6803      	ldr	r3, [r0, #0]
 800662e:	f013 0207 	ands.w	r2, r3, #7
 8006632:	4601      	mov	r1, r0
 8006634:	d00b      	beq.n	800664e <__lo0bits+0x22>
 8006636:	07da      	lsls	r2, r3, #31
 8006638:	d423      	bmi.n	8006682 <__lo0bits+0x56>
 800663a:	0798      	lsls	r0, r3, #30
 800663c:	bf49      	itett	mi
 800663e:	085b      	lsrmi	r3, r3, #1
 8006640:	089b      	lsrpl	r3, r3, #2
 8006642:	2001      	movmi	r0, #1
 8006644:	600b      	strmi	r3, [r1, #0]
 8006646:	bf5c      	itt	pl
 8006648:	600b      	strpl	r3, [r1, #0]
 800664a:	2002      	movpl	r0, #2
 800664c:	4770      	bx	lr
 800664e:	b298      	uxth	r0, r3
 8006650:	b9a8      	cbnz	r0, 800667e <__lo0bits+0x52>
 8006652:	0c1b      	lsrs	r3, r3, #16
 8006654:	2010      	movs	r0, #16
 8006656:	b2da      	uxtb	r2, r3
 8006658:	b90a      	cbnz	r2, 800665e <__lo0bits+0x32>
 800665a:	3008      	adds	r0, #8
 800665c:	0a1b      	lsrs	r3, r3, #8
 800665e:	071a      	lsls	r2, r3, #28
 8006660:	bf04      	itt	eq
 8006662:	091b      	lsreq	r3, r3, #4
 8006664:	3004      	addeq	r0, #4
 8006666:	079a      	lsls	r2, r3, #30
 8006668:	bf04      	itt	eq
 800666a:	089b      	lsreq	r3, r3, #2
 800666c:	3002      	addeq	r0, #2
 800666e:	07da      	lsls	r2, r3, #31
 8006670:	d403      	bmi.n	800667a <__lo0bits+0x4e>
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	f100 0001 	add.w	r0, r0, #1
 8006678:	d005      	beq.n	8006686 <__lo0bits+0x5a>
 800667a:	600b      	str	r3, [r1, #0]
 800667c:	4770      	bx	lr
 800667e:	4610      	mov	r0, r2
 8006680:	e7e9      	b.n	8006656 <__lo0bits+0x2a>
 8006682:	2000      	movs	r0, #0
 8006684:	4770      	bx	lr
 8006686:	2020      	movs	r0, #32
 8006688:	4770      	bx	lr
	...

0800668c <__i2b>:
 800668c:	b510      	push	{r4, lr}
 800668e:	460c      	mov	r4, r1
 8006690:	2101      	movs	r1, #1
 8006692:	f7ff ff03 	bl	800649c <_Balloc>
 8006696:	4602      	mov	r2, r0
 8006698:	b928      	cbnz	r0, 80066a6 <__i2b+0x1a>
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <__i2b+0x24>)
 800669c:	4805      	ldr	r0, [pc, #20]	; (80066b4 <__i2b+0x28>)
 800669e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066a2:	f000 fc1f 	bl	8006ee4 <__assert_func>
 80066a6:	2301      	movs	r3, #1
 80066a8:	6144      	str	r4, [r0, #20]
 80066aa:	6103      	str	r3, [r0, #16]
 80066ac:	bd10      	pop	{r4, pc}
 80066ae:	bf00      	nop
 80066b0:	08007f3b 	.word	0x08007f3b
 80066b4:	08007f4c 	.word	0x08007f4c

080066b8 <__multiply>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	4691      	mov	r9, r2
 80066be:	690a      	ldr	r2, [r1, #16]
 80066c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	bfb8      	it	lt
 80066c8:	460b      	movlt	r3, r1
 80066ca:	460c      	mov	r4, r1
 80066cc:	bfbc      	itt	lt
 80066ce:	464c      	movlt	r4, r9
 80066d0:	4699      	movlt	r9, r3
 80066d2:	6927      	ldr	r7, [r4, #16]
 80066d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	6861      	ldr	r1, [r4, #4]
 80066dc:	eb07 060a 	add.w	r6, r7, sl
 80066e0:	42b3      	cmp	r3, r6
 80066e2:	b085      	sub	sp, #20
 80066e4:	bfb8      	it	lt
 80066e6:	3101      	addlt	r1, #1
 80066e8:	f7ff fed8 	bl	800649c <_Balloc>
 80066ec:	b930      	cbnz	r0, 80066fc <__multiply+0x44>
 80066ee:	4602      	mov	r2, r0
 80066f0:	4b44      	ldr	r3, [pc, #272]	; (8006804 <__multiply+0x14c>)
 80066f2:	4845      	ldr	r0, [pc, #276]	; (8006808 <__multiply+0x150>)
 80066f4:	f240 115d 	movw	r1, #349	; 0x15d
 80066f8:	f000 fbf4 	bl	8006ee4 <__assert_func>
 80066fc:	f100 0514 	add.w	r5, r0, #20
 8006700:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006704:	462b      	mov	r3, r5
 8006706:	2200      	movs	r2, #0
 8006708:	4543      	cmp	r3, r8
 800670a:	d321      	bcc.n	8006750 <__multiply+0x98>
 800670c:	f104 0314 	add.w	r3, r4, #20
 8006710:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006714:	f109 0314 	add.w	r3, r9, #20
 8006718:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800671c:	9202      	str	r2, [sp, #8]
 800671e:	1b3a      	subs	r2, r7, r4
 8006720:	3a15      	subs	r2, #21
 8006722:	f022 0203 	bic.w	r2, r2, #3
 8006726:	3204      	adds	r2, #4
 8006728:	f104 0115 	add.w	r1, r4, #21
 800672c:	428f      	cmp	r7, r1
 800672e:	bf38      	it	cc
 8006730:	2204      	movcc	r2, #4
 8006732:	9201      	str	r2, [sp, #4]
 8006734:	9a02      	ldr	r2, [sp, #8]
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	429a      	cmp	r2, r3
 800673a:	d80c      	bhi.n	8006756 <__multiply+0x9e>
 800673c:	2e00      	cmp	r6, #0
 800673e:	dd03      	ble.n	8006748 <__multiply+0x90>
 8006740:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006744:	2b00      	cmp	r3, #0
 8006746:	d05a      	beq.n	80067fe <__multiply+0x146>
 8006748:	6106      	str	r6, [r0, #16]
 800674a:	b005      	add	sp, #20
 800674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006750:	f843 2b04 	str.w	r2, [r3], #4
 8006754:	e7d8      	b.n	8006708 <__multiply+0x50>
 8006756:	f8b3 a000 	ldrh.w	sl, [r3]
 800675a:	f1ba 0f00 	cmp.w	sl, #0
 800675e:	d024      	beq.n	80067aa <__multiply+0xf2>
 8006760:	f104 0e14 	add.w	lr, r4, #20
 8006764:	46a9      	mov	r9, r5
 8006766:	f04f 0c00 	mov.w	ip, #0
 800676a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800676e:	f8d9 1000 	ldr.w	r1, [r9]
 8006772:	fa1f fb82 	uxth.w	fp, r2
 8006776:	b289      	uxth	r1, r1
 8006778:	fb0a 110b 	mla	r1, sl, fp, r1
 800677c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006780:	f8d9 2000 	ldr.w	r2, [r9]
 8006784:	4461      	add	r1, ip
 8006786:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800678a:	fb0a c20b 	mla	r2, sl, fp, ip
 800678e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006792:	b289      	uxth	r1, r1
 8006794:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006798:	4577      	cmp	r7, lr
 800679a:	f849 1b04 	str.w	r1, [r9], #4
 800679e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067a2:	d8e2      	bhi.n	800676a <__multiply+0xb2>
 80067a4:	9a01      	ldr	r2, [sp, #4]
 80067a6:	f845 c002 	str.w	ip, [r5, r2]
 80067aa:	9a03      	ldr	r2, [sp, #12]
 80067ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067b0:	3304      	adds	r3, #4
 80067b2:	f1b9 0f00 	cmp.w	r9, #0
 80067b6:	d020      	beq.n	80067fa <__multiply+0x142>
 80067b8:	6829      	ldr	r1, [r5, #0]
 80067ba:	f104 0c14 	add.w	ip, r4, #20
 80067be:	46ae      	mov	lr, r5
 80067c0:	f04f 0a00 	mov.w	sl, #0
 80067c4:	f8bc b000 	ldrh.w	fp, [ip]
 80067c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067cc:	fb09 220b 	mla	r2, r9, fp, r2
 80067d0:	4492      	add	sl, r2
 80067d2:	b289      	uxth	r1, r1
 80067d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80067d8:	f84e 1b04 	str.w	r1, [lr], #4
 80067dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067e0:	f8be 1000 	ldrh.w	r1, [lr]
 80067e4:	0c12      	lsrs	r2, r2, #16
 80067e6:	fb09 1102 	mla	r1, r9, r2, r1
 80067ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80067ee:	4567      	cmp	r7, ip
 80067f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067f4:	d8e6      	bhi.n	80067c4 <__multiply+0x10c>
 80067f6:	9a01      	ldr	r2, [sp, #4]
 80067f8:	50a9      	str	r1, [r5, r2]
 80067fa:	3504      	adds	r5, #4
 80067fc:	e79a      	b.n	8006734 <__multiply+0x7c>
 80067fe:	3e01      	subs	r6, #1
 8006800:	e79c      	b.n	800673c <__multiply+0x84>
 8006802:	bf00      	nop
 8006804:	08007f3b 	.word	0x08007f3b
 8006808:	08007f4c 	.word	0x08007f4c

0800680c <__pow5mult>:
 800680c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006810:	4615      	mov	r5, r2
 8006812:	f012 0203 	ands.w	r2, r2, #3
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	d007      	beq.n	800682c <__pow5mult+0x20>
 800681c:	4c25      	ldr	r4, [pc, #148]	; (80068b4 <__pow5mult+0xa8>)
 800681e:	3a01      	subs	r2, #1
 8006820:	2300      	movs	r3, #0
 8006822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006826:	f7ff fe9b 	bl	8006560 <__multadd>
 800682a:	4607      	mov	r7, r0
 800682c:	10ad      	asrs	r5, r5, #2
 800682e:	d03d      	beq.n	80068ac <__pow5mult+0xa0>
 8006830:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006832:	b97c      	cbnz	r4, 8006854 <__pow5mult+0x48>
 8006834:	2010      	movs	r0, #16
 8006836:	f7fe fa0f 	bl	8004c58 <malloc>
 800683a:	4602      	mov	r2, r0
 800683c:	6270      	str	r0, [r6, #36]	; 0x24
 800683e:	b928      	cbnz	r0, 800684c <__pow5mult+0x40>
 8006840:	4b1d      	ldr	r3, [pc, #116]	; (80068b8 <__pow5mult+0xac>)
 8006842:	481e      	ldr	r0, [pc, #120]	; (80068bc <__pow5mult+0xb0>)
 8006844:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006848:	f000 fb4c 	bl	8006ee4 <__assert_func>
 800684c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006850:	6004      	str	r4, [r0, #0]
 8006852:	60c4      	str	r4, [r0, #12]
 8006854:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800685c:	b94c      	cbnz	r4, 8006872 <__pow5mult+0x66>
 800685e:	f240 2171 	movw	r1, #625	; 0x271
 8006862:	4630      	mov	r0, r6
 8006864:	f7ff ff12 	bl	800668c <__i2b>
 8006868:	2300      	movs	r3, #0
 800686a:	f8c8 0008 	str.w	r0, [r8, #8]
 800686e:	4604      	mov	r4, r0
 8006870:	6003      	str	r3, [r0, #0]
 8006872:	f04f 0900 	mov.w	r9, #0
 8006876:	07eb      	lsls	r3, r5, #31
 8006878:	d50a      	bpl.n	8006890 <__pow5mult+0x84>
 800687a:	4639      	mov	r1, r7
 800687c:	4622      	mov	r2, r4
 800687e:	4630      	mov	r0, r6
 8006880:	f7ff ff1a 	bl	80066b8 <__multiply>
 8006884:	4639      	mov	r1, r7
 8006886:	4680      	mov	r8, r0
 8006888:	4630      	mov	r0, r6
 800688a:	f7ff fe47 	bl	800651c <_Bfree>
 800688e:	4647      	mov	r7, r8
 8006890:	106d      	asrs	r5, r5, #1
 8006892:	d00b      	beq.n	80068ac <__pow5mult+0xa0>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	b938      	cbnz	r0, 80068a8 <__pow5mult+0x9c>
 8006898:	4622      	mov	r2, r4
 800689a:	4621      	mov	r1, r4
 800689c:	4630      	mov	r0, r6
 800689e:	f7ff ff0b 	bl	80066b8 <__multiply>
 80068a2:	6020      	str	r0, [r4, #0]
 80068a4:	f8c0 9000 	str.w	r9, [r0]
 80068a8:	4604      	mov	r4, r0
 80068aa:	e7e4      	b.n	8006876 <__pow5mult+0x6a>
 80068ac:	4638      	mov	r0, r7
 80068ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b2:	bf00      	nop
 80068b4:	08008098 	.word	0x08008098
 80068b8:	08007ec9 	.word	0x08007ec9
 80068bc:	08007f4c 	.word	0x08007f4c

080068c0 <__lshift>:
 80068c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c4:	460c      	mov	r4, r1
 80068c6:	6849      	ldr	r1, [r1, #4]
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068ce:	68a3      	ldr	r3, [r4, #8]
 80068d0:	4607      	mov	r7, r0
 80068d2:	4691      	mov	r9, r2
 80068d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068d8:	f108 0601 	add.w	r6, r8, #1
 80068dc:	42b3      	cmp	r3, r6
 80068de:	db0b      	blt.n	80068f8 <__lshift+0x38>
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7ff fddb 	bl	800649c <_Balloc>
 80068e6:	4605      	mov	r5, r0
 80068e8:	b948      	cbnz	r0, 80068fe <__lshift+0x3e>
 80068ea:	4602      	mov	r2, r0
 80068ec:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <__lshift+0xd8>)
 80068ee:	482b      	ldr	r0, [pc, #172]	; (800699c <__lshift+0xdc>)
 80068f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068f4:	f000 faf6 	bl	8006ee4 <__assert_func>
 80068f8:	3101      	adds	r1, #1
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	e7ee      	b.n	80068dc <__lshift+0x1c>
 80068fe:	2300      	movs	r3, #0
 8006900:	f100 0114 	add.w	r1, r0, #20
 8006904:	f100 0210 	add.w	r2, r0, #16
 8006908:	4618      	mov	r0, r3
 800690a:	4553      	cmp	r3, sl
 800690c:	db37      	blt.n	800697e <__lshift+0xbe>
 800690e:	6920      	ldr	r0, [r4, #16]
 8006910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006914:	f104 0314 	add.w	r3, r4, #20
 8006918:	f019 091f 	ands.w	r9, r9, #31
 800691c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006924:	d02f      	beq.n	8006986 <__lshift+0xc6>
 8006926:	f1c9 0e20 	rsb	lr, r9, #32
 800692a:	468a      	mov	sl, r1
 800692c:	f04f 0c00 	mov.w	ip, #0
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	fa02 f209 	lsl.w	r2, r2, r9
 8006936:	ea42 020c 	orr.w	r2, r2, ip
 800693a:	f84a 2b04 	str.w	r2, [sl], #4
 800693e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006942:	4298      	cmp	r0, r3
 8006944:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006948:	d8f2      	bhi.n	8006930 <__lshift+0x70>
 800694a:	1b03      	subs	r3, r0, r4
 800694c:	3b15      	subs	r3, #21
 800694e:	f023 0303 	bic.w	r3, r3, #3
 8006952:	3304      	adds	r3, #4
 8006954:	f104 0215 	add.w	r2, r4, #21
 8006958:	4290      	cmp	r0, r2
 800695a:	bf38      	it	cc
 800695c:	2304      	movcc	r3, #4
 800695e:	f841 c003 	str.w	ip, [r1, r3]
 8006962:	f1bc 0f00 	cmp.w	ip, #0
 8006966:	d001      	beq.n	800696c <__lshift+0xac>
 8006968:	f108 0602 	add.w	r6, r8, #2
 800696c:	3e01      	subs	r6, #1
 800696e:	4638      	mov	r0, r7
 8006970:	612e      	str	r6, [r5, #16]
 8006972:	4621      	mov	r1, r4
 8006974:	f7ff fdd2 	bl	800651c <_Bfree>
 8006978:	4628      	mov	r0, r5
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006982:	3301      	adds	r3, #1
 8006984:	e7c1      	b.n	800690a <__lshift+0x4a>
 8006986:	3904      	subs	r1, #4
 8006988:	f853 2b04 	ldr.w	r2, [r3], #4
 800698c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006990:	4298      	cmp	r0, r3
 8006992:	d8f9      	bhi.n	8006988 <__lshift+0xc8>
 8006994:	e7ea      	b.n	800696c <__lshift+0xac>
 8006996:	bf00      	nop
 8006998:	08007f3b 	.word	0x08007f3b
 800699c:	08007f4c 	.word	0x08007f4c

080069a0 <__mcmp>:
 80069a0:	b530      	push	{r4, r5, lr}
 80069a2:	6902      	ldr	r2, [r0, #16]
 80069a4:	690c      	ldr	r4, [r1, #16]
 80069a6:	1b12      	subs	r2, r2, r4
 80069a8:	d10e      	bne.n	80069c8 <__mcmp+0x28>
 80069aa:	f100 0314 	add.w	r3, r0, #20
 80069ae:	3114      	adds	r1, #20
 80069b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069c0:	42a5      	cmp	r5, r4
 80069c2:	d003      	beq.n	80069cc <__mcmp+0x2c>
 80069c4:	d305      	bcc.n	80069d2 <__mcmp+0x32>
 80069c6:	2201      	movs	r2, #1
 80069c8:	4610      	mov	r0, r2
 80069ca:	bd30      	pop	{r4, r5, pc}
 80069cc:	4283      	cmp	r3, r0
 80069ce:	d3f3      	bcc.n	80069b8 <__mcmp+0x18>
 80069d0:	e7fa      	b.n	80069c8 <__mcmp+0x28>
 80069d2:	f04f 32ff 	mov.w	r2, #4294967295
 80069d6:	e7f7      	b.n	80069c8 <__mcmp+0x28>

080069d8 <__mdiff>:
 80069d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	460c      	mov	r4, r1
 80069de:	4606      	mov	r6, r0
 80069e0:	4611      	mov	r1, r2
 80069e2:	4620      	mov	r0, r4
 80069e4:	4690      	mov	r8, r2
 80069e6:	f7ff ffdb 	bl	80069a0 <__mcmp>
 80069ea:	1e05      	subs	r5, r0, #0
 80069ec:	d110      	bne.n	8006a10 <__mdiff+0x38>
 80069ee:	4629      	mov	r1, r5
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7ff fd53 	bl	800649c <_Balloc>
 80069f6:	b930      	cbnz	r0, 8006a06 <__mdiff+0x2e>
 80069f8:	4b3a      	ldr	r3, [pc, #232]	; (8006ae4 <__mdiff+0x10c>)
 80069fa:	4602      	mov	r2, r0
 80069fc:	f240 2132 	movw	r1, #562	; 0x232
 8006a00:	4839      	ldr	r0, [pc, #228]	; (8006ae8 <__mdiff+0x110>)
 8006a02:	f000 fa6f 	bl	8006ee4 <__assert_func>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	bfa4      	itt	ge
 8006a12:	4643      	movge	r3, r8
 8006a14:	46a0      	movge	r8, r4
 8006a16:	4630      	mov	r0, r6
 8006a18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a1c:	bfa6      	itte	ge
 8006a1e:	461c      	movge	r4, r3
 8006a20:	2500      	movge	r5, #0
 8006a22:	2501      	movlt	r5, #1
 8006a24:	f7ff fd3a 	bl	800649c <_Balloc>
 8006a28:	b920      	cbnz	r0, 8006a34 <__mdiff+0x5c>
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <__mdiff+0x10c>)
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a32:	e7e5      	b.n	8006a00 <__mdiff+0x28>
 8006a34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a38:	6926      	ldr	r6, [r4, #16]
 8006a3a:	60c5      	str	r5, [r0, #12]
 8006a3c:	f104 0914 	add.w	r9, r4, #20
 8006a40:	f108 0514 	add.w	r5, r8, #20
 8006a44:	f100 0e14 	add.w	lr, r0, #20
 8006a48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a50:	f108 0210 	add.w	r2, r8, #16
 8006a54:	46f2      	mov	sl, lr
 8006a56:	2100      	movs	r1, #0
 8006a58:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a60:	fa1f f883 	uxth.w	r8, r3
 8006a64:	fa11 f18b 	uxtah	r1, r1, fp
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	eba1 0808 	sub.w	r8, r1, r8
 8006a6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a76:	fa1f f888 	uxth.w	r8, r8
 8006a7a:	1419      	asrs	r1, r3, #16
 8006a7c:	454e      	cmp	r6, r9
 8006a7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a82:	f84a 3b04 	str.w	r3, [sl], #4
 8006a86:	d8e7      	bhi.n	8006a58 <__mdiff+0x80>
 8006a88:	1b33      	subs	r3, r6, r4
 8006a8a:	3b15      	subs	r3, #21
 8006a8c:	f023 0303 	bic.w	r3, r3, #3
 8006a90:	3304      	adds	r3, #4
 8006a92:	3415      	adds	r4, #21
 8006a94:	42a6      	cmp	r6, r4
 8006a96:	bf38      	it	cc
 8006a98:	2304      	movcc	r3, #4
 8006a9a:	441d      	add	r5, r3
 8006a9c:	4473      	add	r3, lr
 8006a9e:	469e      	mov	lr, r3
 8006aa0:	462e      	mov	r6, r5
 8006aa2:	4566      	cmp	r6, ip
 8006aa4:	d30e      	bcc.n	8006ac4 <__mdiff+0xec>
 8006aa6:	f10c 0203 	add.w	r2, ip, #3
 8006aaa:	1b52      	subs	r2, r2, r5
 8006aac:	f022 0203 	bic.w	r2, r2, #3
 8006ab0:	3d03      	subs	r5, #3
 8006ab2:	45ac      	cmp	ip, r5
 8006ab4:	bf38      	it	cc
 8006ab6:	2200      	movcc	r2, #0
 8006ab8:	441a      	add	r2, r3
 8006aba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006abe:	b17b      	cbz	r3, 8006ae0 <__mdiff+0x108>
 8006ac0:	6107      	str	r7, [r0, #16]
 8006ac2:	e7a3      	b.n	8006a0c <__mdiff+0x34>
 8006ac4:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ac8:	fa11 f288 	uxtah	r2, r1, r8
 8006acc:	1414      	asrs	r4, r2, #16
 8006ace:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ad8:	f84e 2b04 	str.w	r2, [lr], #4
 8006adc:	1421      	asrs	r1, r4, #16
 8006ade:	e7e0      	b.n	8006aa2 <__mdiff+0xca>
 8006ae0:	3f01      	subs	r7, #1
 8006ae2:	e7ea      	b.n	8006aba <__mdiff+0xe2>
 8006ae4:	08007f3b 	.word	0x08007f3b
 8006ae8:	08007f4c 	.word	0x08007f4c

08006aec <__d2b>:
 8006aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006af0:	4689      	mov	r9, r1
 8006af2:	2101      	movs	r1, #1
 8006af4:	ec57 6b10 	vmov	r6, r7, d0
 8006af8:	4690      	mov	r8, r2
 8006afa:	f7ff fccf 	bl	800649c <_Balloc>
 8006afe:	4604      	mov	r4, r0
 8006b00:	b930      	cbnz	r0, 8006b10 <__d2b+0x24>
 8006b02:	4602      	mov	r2, r0
 8006b04:	4b25      	ldr	r3, [pc, #148]	; (8006b9c <__d2b+0xb0>)
 8006b06:	4826      	ldr	r0, [pc, #152]	; (8006ba0 <__d2b+0xb4>)
 8006b08:	f240 310a 	movw	r1, #778	; 0x30a
 8006b0c:	f000 f9ea 	bl	8006ee4 <__assert_func>
 8006b10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b18:	bb35      	cbnz	r5, 8006b68 <__d2b+0x7c>
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	d028      	beq.n	8006b72 <__d2b+0x86>
 8006b20:	4668      	mov	r0, sp
 8006b22:	9600      	str	r6, [sp, #0]
 8006b24:	f7ff fd82 	bl	800662c <__lo0bits>
 8006b28:	9900      	ldr	r1, [sp, #0]
 8006b2a:	b300      	cbz	r0, 8006b6e <__d2b+0x82>
 8006b2c:	9a01      	ldr	r2, [sp, #4]
 8006b2e:	f1c0 0320 	rsb	r3, r0, #32
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	430b      	orrs	r3, r1
 8006b38:	40c2      	lsrs	r2, r0
 8006b3a:	6163      	str	r3, [r4, #20]
 8006b3c:	9201      	str	r2, [sp, #4]
 8006b3e:	9b01      	ldr	r3, [sp, #4]
 8006b40:	61a3      	str	r3, [r4, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	bf14      	ite	ne
 8006b46:	2202      	movne	r2, #2
 8006b48:	2201      	moveq	r2, #1
 8006b4a:	6122      	str	r2, [r4, #16]
 8006b4c:	b1d5      	cbz	r5, 8006b84 <__d2b+0x98>
 8006b4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b52:	4405      	add	r5, r0
 8006b54:	f8c9 5000 	str.w	r5, [r9]
 8006b58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b5c:	f8c8 0000 	str.w	r0, [r8]
 8006b60:	4620      	mov	r0, r4
 8006b62:	b003      	add	sp, #12
 8006b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b6c:	e7d5      	b.n	8006b1a <__d2b+0x2e>
 8006b6e:	6161      	str	r1, [r4, #20]
 8006b70:	e7e5      	b.n	8006b3e <__d2b+0x52>
 8006b72:	a801      	add	r0, sp, #4
 8006b74:	f7ff fd5a 	bl	800662c <__lo0bits>
 8006b78:	9b01      	ldr	r3, [sp, #4]
 8006b7a:	6163      	str	r3, [r4, #20]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	6122      	str	r2, [r4, #16]
 8006b80:	3020      	adds	r0, #32
 8006b82:	e7e3      	b.n	8006b4c <__d2b+0x60>
 8006b84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b8c:	f8c9 0000 	str.w	r0, [r9]
 8006b90:	6918      	ldr	r0, [r3, #16]
 8006b92:	f7ff fd2b 	bl	80065ec <__hi0bits>
 8006b96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b9a:	e7df      	b.n	8006b5c <__d2b+0x70>
 8006b9c:	08007f3b 	.word	0x08007f3b
 8006ba0:	08007f4c 	.word	0x08007f4c

08006ba4 <_calloc_r>:
 8006ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ba6:	fba1 2402 	umull	r2, r4, r1, r2
 8006baa:	b94c      	cbnz	r4, 8006bc0 <_calloc_r+0x1c>
 8006bac:	4611      	mov	r1, r2
 8006bae:	9201      	str	r2, [sp, #4]
 8006bb0:	f7fe f8dc 	bl	8004d6c <_malloc_r>
 8006bb4:	9a01      	ldr	r2, [sp, #4]
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b930      	cbnz	r0, 8006bc8 <_calloc_r+0x24>
 8006bba:	4628      	mov	r0, r5
 8006bbc:	b003      	add	sp, #12
 8006bbe:	bd30      	pop	{r4, r5, pc}
 8006bc0:	220c      	movs	r2, #12
 8006bc2:	6002      	str	r2, [r0, #0]
 8006bc4:	2500      	movs	r5, #0
 8006bc6:	e7f8      	b.n	8006bba <_calloc_r+0x16>
 8006bc8:	4621      	mov	r1, r4
 8006bca:	f7fe f85b 	bl	8004c84 <memset>
 8006bce:	e7f4      	b.n	8006bba <_calloc_r+0x16>

08006bd0 <_realloc_r>:
 8006bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	460e      	mov	r6, r1
 8006bda:	b921      	cbnz	r1, 8006be6 <_realloc_r+0x16>
 8006bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	4611      	mov	r1, r2
 8006be2:	f7fe b8c3 	b.w	8004d6c <_malloc_r>
 8006be6:	b92a      	cbnz	r2, 8006bf4 <_realloc_r+0x24>
 8006be8:	f7fe f854 	bl	8004c94 <_free_r>
 8006bec:	4625      	mov	r5, r4
 8006bee:	4628      	mov	r0, r5
 8006bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf4:	f000 f9d5 	bl	8006fa2 <_malloc_usable_size_r>
 8006bf8:	4284      	cmp	r4, r0
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	d802      	bhi.n	8006c04 <_realloc_r+0x34>
 8006bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c02:	d812      	bhi.n	8006c2a <_realloc_r+0x5a>
 8006c04:	4621      	mov	r1, r4
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7fe f8b0 	bl	8004d6c <_malloc_r>
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d0ed      	beq.n	8006bee <_realloc_r+0x1e>
 8006c12:	42bc      	cmp	r4, r7
 8006c14:	4622      	mov	r2, r4
 8006c16:	4631      	mov	r1, r6
 8006c18:	bf28      	it	cs
 8006c1a:	463a      	movcs	r2, r7
 8006c1c:	f7fe f824 	bl	8004c68 <memcpy>
 8006c20:	4631      	mov	r1, r6
 8006c22:	4640      	mov	r0, r8
 8006c24:	f7fe f836 	bl	8004c94 <_free_r>
 8006c28:	e7e1      	b.n	8006bee <_realloc_r+0x1e>
 8006c2a:	4635      	mov	r5, r6
 8006c2c:	e7df      	b.n	8006bee <_realloc_r+0x1e>

08006c2e <__ssputs_r>:
 8006c2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c32:	688e      	ldr	r6, [r1, #8]
 8006c34:	429e      	cmp	r6, r3
 8006c36:	4682      	mov	sl, r0
 8006c38:	460c      	mov	r4, r1
 8006c3a:	4690      	mov	r8, r2
 8006c3c:	461f      	mov	r7, r3
 8006c3e:	d838      	bhi.n	8006cb2 <__ssputs_r+0x84>
 8006c40:	898a      	ldrh	r2, [r1, #12]
 8006c42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c46:	d032      	beq.n	8006cae <__ssputs_r+0x80>
 8006c48:	6825      	ldr	r5, [r4, #0]
 8006c4a:	6909      	ldr	r1, [r1, #16]
 8006c4c:	eba5 0901 	sub.w	r9, r5, r1
 8006c50:	6965      	ldr	r5, [r4, #20]
 8006c52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	444b      	add	r3, r9
 8006c5e:	106d      	asrs	r5, r5, #1
 8006c60:	429d      	cmp	r5, r3
 8006c62:	bf38      	it	cc
 8006c64:	461d      	movcc	r5, r3
 8006c66:	0553      	lsls	r3, r2, #21
 8006c68:	d531      	bpl.n	8006cce <__ssputs_r+0xa0>
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7fe f87e 	bl	8004d6c <_malloc_r>
 8006c70:	4606      	mov	r6, r0
 8006c72:	b950      	cbnz	r0, 8006c8a <__ssputs_r+0x5c>
 8006c74:	230c      	movs	r3, #12
 8006c76:	f8ca 3000 	str.w	r3, [sl]
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c80:	81a3      	strh	r3, [r4, #12]
 8006c82:	f04f 30ff 	mov.w	r0, #4294967295
 8006c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8a:	6921      	ldr	r1, [r4, #16]
 8006c8c:	464a      	mov	r2, r9
 8006c8e:	f7fd ffeb 	bl	8004c68 <memcpy>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9c:	81a3      	strh	r3, [r4, #12]
 8006c9e:	6126      	str	r6, [r4, #16]
 8006ca0:	6165      	str	r5, [r4, #20]
 8006ca2:	444e      	add	r6, r9
 8006ca4:	eba5 0509 	sub.w	r5, r5, r9
 8006ca8:	6026      	str	r6, [r4, #0]
 8006caa:	60a5      	str	r5, [r4, #8]
 8006cac:	463e      	mov	r6, r7
 8006cae:	42be      	cmp	r6, r7
 8006cb0:	d900      	bls.n	8006cb4 <__ssputs_r+0x86>
 8006cb2:	463e      	mov	r6, r7
 8006cb4:	6820      	ldr	r0, [r4, #0]
 8006cb6:	4632      	mov	r2, r6
 8006cb8:	4641      	mov	r1, r8
 8006cba:	f000 f958 	bl	8006f6e <memmove>
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	1b9b      	subs	r3, r3, r6
 8006cc2:	60a3      	str	r3, [r4, #8]
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	4433      	add	r3, r6
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	2000      	movs	r0, #0
 8006ccc:	e7db      	b.n	8006c86 <__ssputs_r+0x58>
 8006cce:	462a      	mov	r2, r5
 8006cd0:	f7ff ff7e 	bl	8006bd0 <_realloc_r>
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d1e1      	bne.n	8006c9e <__ssputs_r+0x70>
 8006cda:	6921      	ldr	r1, [r4, #16]
 8006cdc:	4650      	mov	r0, sl
 8006cde:	f7fd ffd9 	bl	8004c94 <_free_r>
 8006ce2:	e7c7      	b.n	8006c74 <__ssputs_r+0x46>

08006ce4 <_svfiprintf_r>:
 8006ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce8:	4698      	mov	r8, r3
 8006cea:	898b      	ldrh	r3, [r1, #12]
 8006cec:	061b      	lsls	r3, r3, #24
 8006cee:	b09d      	sub	sp, #116	; 0x74
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	d50e      	bpl.n	8006d16 <_svfiprintf_r+0x32>
 8006cf8:	690b      	ldr	r3, [r1, #16]
 8006cfa:	b963      	cbnz	r3, 8006d16 <_svfiprintf_r+0x32>
 8006cfc:	2140      	movs	r1, #64	; 0x40
 8006cfe:	f7fe f835 	bl	8004d6c <_malloc_r>
 8006d02:	6028      	str	r0, [r5, #0]
 8006d04:	6128      	str	r0, [r5, #16]
 8006d06:	b920      	cbnz	r0, 8006d12 <_svfiprintf_r+0x2e>
 8006d08:	230c      	movs	r3, #12
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	e0d1      	b.n	8006eb6 <_svfiprintf_r+0x1d2>
 8006d12:	2340      	movs	r3, #64	; 0x40
 8006d14:	616b      	str	r3, [r5, #20]
 8006d16:	2300      	movs	r3, #0
 8006d18:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1a:	2320      	movs	r3, #32
 8006d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d24:	2330      	movs	r3, #48	; 0x30
 8006d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ed0 <_svfiprintf_r+0x1ec>
 8006d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d2e:	f04f 0901 	mov.w	r9, #1
 8006d32:	4623      	mov	r3, r4
 8006d34:	469a      	mov	sl, r3
 8006d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d3a:	b10a      	cbz	r2, 8006d40 <_svfiprintf_r+0x5c>
 8006d3c:	2a25      	cmp	r2, #37	; 0x25
 8006d3e:	d1f9      	bne.n	8006d34 <_svfiprintf_r+0x50>
 8006d40:	ebba 0b04 	subs.w	fp, sl, r4
 8006d44:	d00b      	beq.n	8006d5e <_svfiprintf_r+0x7a>
 8006d46:	465b      	mov	r3, fp
 8006d48:	4622      	mov	r2, r4
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	f7ff ff6e 	bl	8006c2e <__ssputs_r>
 8006d52:	3001      	adds	r0, #1
 8006d54:	f000 80aa 	beq.w	8006eac <_svfiprintf_r+0x1c8>
 8006d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d5a:	445a      	add	r2, fp
 8006d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80a2 	beq.w	8006eac <_svfiprintf_r+0x1c8>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d72:	f10a 0a01 	add.w	sl, sl, #1
 8006d76:	9304      	str	r3, [sp, #16]
 8006d78:	9307      	str	r3, [sp, #28]
 8006d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d80:	4654      	mov	r4, sl
 8006d82:	2205      	movs	r2, #5
 8006d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d88:	4851      	ldr	r0, [pc, #324]	; (8006ed0 <_svfiprintf_r+0x1ec>)
 8006d8a:	f7f9 fa49 	bl	8000220 <memchr>
 8006d8e:	9a04      	ldr	r2, [sp, #16]
 8006d90:	b9d8      	cbnz	r0, 8006dca <_svfiprintf_r+0xe6>
 8006d92:	06d0      	lsls	r0, r2, #27
 8006d94:	bf44      	itt	mi
 8006d96:	2320      	movmi	r3, #32
 8006d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d9c:	0711      	lsls	r1, r2, #28
 8006d9e:	bf44      	itt	mi
 8006da0:	232b      	movmi	r3, #43	; 0x2b
 8006da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006da6:	f89a 3000 	ldrb.w	r3, [sl]
 8006daa:	2b2a      	cmp	r3, #42	; 0x2a
 8006dac:	d015      	beq.n	8006dda <_svfiprintf_r+0xf6>
 8006dae:	9a07      	ldr	r2, [sp, #28]
 8006db0:	4654      	mov	r4, sl
 8006db2:	2000      	movs	r0, #0
 8006db4:	f04f 0c0a 	mov.w	ip, #10
 8006db8:	4621      	mov	r1, r4
 8006dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dbe:	3b30      	subs	r3, #48	; 0x30
 8006dc0:	2b09      	cmp	r3, #9
 8006dc2:	d94e      	bls.n	8006e62 <_svfiprintf_r+0x17e>
 8006dc4:	b1b0      	cbz	r0, 8006df4 <_svfiprintf_r+0x110>
 8006dc6:	9207      	str	r2, [sp, #28]
 8006dc8:	e014      	b.n	8006df4 <_svfiprintf_r+0x110>
 8006dca:	eba0 0308 	sub.w	r3, r0, r8
 8006dce:	fa09 f303 	lsl.w	r3, r9, r3
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	9304      	str	r3, [sp, #16]
 8006dd6:	46a2      	mov	sl, r4
 8006dd8:	e7d2      	b.n	8006d80 <_svfiprintf_r+0x9c>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	1d19      	adds	r1, r3, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	9103      	str	r1, [sp, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bfbb      	ittet	lt
 8006de6:	425b      	neglt	r3, r3
 8006de8:	f042 0202 	orrlt.w	r2, r2, #2
 8006dec:	9307      	strge	r3, [sp, #28]
 8006dee:	9307      	strlt	r3, [sp, #28]
 8006df0:	bfb8      	it	lt
 8006df2:	9204      	strlt	r2, [sp, #16]
 8006df4:	7823      	ldrb	r3, [r4, #0]
 8006df6:	2b2e      	cmp	r3, #46	; 0x2e
 8006df8:	d10c      	bne.n	8006e14 <_svfiprintf_r+0x130>
 8006dfa:	7863      	ldrb	r3, [r4, #1]
 8006dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8006dfe:	d135      	bne.n	8006e6c <_svfiprintf_r+0x188>
 8006e00:	9b03      	ldr	r3, [sp, #12]
 8006e02:	1d1a      	adds	r2, r3, #4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	9203      	str	r2, [sp, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bfb8      	it	lt
 8006e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e10:	3402      	adds	r4, #2
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ee0 <_svfiprintf_r+0x1fc>
 8006e18:	7821      	ldrb	r1, [r4, #0]
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	4650      	mov	r0, sl
 8006e1e:	f7f9 f9ff 	bl	8000220 <memchr>
 8006e22:	b140      	cbz	r0, 8006e36 <_svfiprintf_r+0x152>
 8006e24:	2340      	movs	r3, #64	; 0x40
 8006e26:	eba0 000a 	sub.w	r0, r0, sl
 8006e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	4303      	orrs	r3, r0
 8006e32:	3401      	adds	r4, #1
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e3a:	4826      	ldr	r0, [pc, #152]	; (8006ed4 <_svfiprintf_r+0x1f0>)
 8006e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e40:	2206      	movs	r2, #6
 8006e42:	f7f9 f9ed 	bl	8000220 <memchr>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d038      	beq.n	8006ebc <_svfiprintf_r+0x1d8>
 8006e4a:	4b23      	ldr	r3, [pc, #140]	; (8006ed8 <_svfiprintf_r+0x1f4>)
 8006e4c:	bb1b      	cbnz	r3, 8006e96 <_svfiprintf_r+0x1b2>
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	3307      	adds	r3, #7
 8006e52:	f023 0307 	bic.w	r3, r3, #7
 8006e56:	3308      	adds	r3, #8
 8006e58:	9303      	str	r3, [sp, #12]
 8006e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5c:	4433      	add	r3, r6
 8006e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e60:	e767      	b.n	8006d32 <_svfiprintf_r+0x4e>
 8006e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e66:	460c      	mov	r4, r1
 8006e68:	2001      	movs	r0, #1
 8006e6a:	e7a5      	b.n	8006db8 <_svfiprintf_r+0xd4>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	3401      	adds	r4, #1
 8006e70:	9305      	str	r3, [sp, #20]
 8006e72:	4619      	mov	r1, r3
 8006e74:	f04f 0c0a 	mov.w	ip, #10
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e7e:	3a30      	subs	r2, #48	; 0x30
 8006e80:	2a09      	cmp	r2, #9
 8006e82:	d903      	bls.n	8006e8c <_svfiprintf_r+0x1a8>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0c5      	beq.n	8006e14 <_svfiprintf_r+0x130>
 8006e88:	9105      	str	r1, [sp, #20]
 8006e8a:	e7c3      	b.n	8006e14 <_svfiprintf_r+0x130>
 8006e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e90:	4604      	mov	r4, r0
 8006e92:	2301      	movs	r3, #1
 8006e94:	e7f0      	b.n	8006e78 <_svfiprintf_r+0x194>
 8006e96:	ab03      	add	r3, sp, #12
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	462a      	mov	r2, r5
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <_svfiprintf_r+0x1f8>)
 8006e9e:	a904      	add	r1, sp, #16
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f7fe f877 	bl	8004f94 <_printf_float>
 8006ea6:	1c42      	adds	r2, r0, #1
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	d1d6      	bne.n	8006e5a <_svfiprintf_r+0x176>
 8006eac:	89ab      	ldrh	r3, [r5, #12]
 8006eae:	065b      	lsls	r3, r3, #25
 8006eb0:	f53f af2c 	bmi.w	8006d0c <_svfiprintf_r+0x28>
 8006eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eb6:	b01d      	add	sp, #116	; 0x74
 8006eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ebc:	ab03      	add	r3, sp, #12
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	462a      	mov	r2, r5
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <_svfiprintf_r+0x1f8>)
 8006ec4:	a904      	add	r1, sp, #16
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f7fe fb08 	bl	80054dc <_printf_i>
 8006ecc:	e7eb      	b.n	8006ea6 <_svfiprintf_r+0x1c2>
 8006ece:	bf00      	nop
 8006ed0:	080080a4 	.word	0x080080a4
 8006ed4:	080080ae 	.word	0x080080ae
 8006ed8:	08004f95 	.word	0x08004f95
 8006edc:	08006c2f 	.word	0x08006c2f
 8006ee0:	080080aa 	.word	0x080080aa

08006ee4 <__assert_func>:
 8006ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ee6:	4614      	mov	r4, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <__assert_func+0x2c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4605      	mov	r5, r0
 8006ef0:	68d8      	ldr	r0, [r3, #12]
 8006ef2:	b14c      	cbz	r4, 8006f08 <__assert_func+0x24>
 8006ef4:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <__assert_func+0x30>)
 8006ef6:	9100      	str	r1, [sp, #0]
 8006ef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006efc:	4906      	ldr	r1, [pc, #24]	; (8006f18 <__assert_func+0x34>)
 8006efe:	462b      	mov	r3, r5
 8006f00:	f000 f80e 	bl	8006f20 <fiprintf>
 8006f04:	f000 fa7c 	bl	8007400 <abort>
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <__assert_func+0x38>)
 8006f0a:	461c      	mov	r4, r3
 8006f0c:	e7f3      	b.n	8006ef6 <__assert_func+0x12>
 8006f0e:	bf00      	nop
 8006f10:	200004b8 	.word	0x200004b8
 8006f14:	080080b5 	.word	0x080080b5
 8006f18:	080080c2 	.word	0x080080c2
 8006f1c:	080080f0 	.word	0x080080f0

08006f20 <fiprintf>:
 8006f20:	b40e      	push	{r1, r2, r3}
 8006f22:	b503      	push	{r0, r1, lr}
 8006f24:	4601      	mov	r1, r0
 8006f26:	ab03      	add	r3, sp, #12
 8006f28:	4805      	ldr	r0, [pc, #20]	; (8006f40 <fiprintf+0x20>)
 8006f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f2e:	6800      	ldr	r0, [r0, #0]
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	f000 f867 	bl	8007004 <_vfiprintf_r>
 8006f36:	b002      	add	sp, #8
 8006f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f3c:	b003      	add	sp, #12
 8006f3e:	4770      	bx	lr
 8006f40:	200004b8 	.word	0x200004b8

08006f44 <__retarget_lock_init_recursive>:
 8006f44:	4770      	bx	lr

08006f46 <__retarget_lock_acquire_recursive>:
 8006f46:	4770      	bx	lr

08006f48 <__retarget_lock_release_recursive>:
 8006f48:	4770      	bx	lr

08006f4a <__ascii_mbtowc>:
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	b901      	cbnz	r1, 8006f50 <__ascii_mbtowc+0x6>
 8006f4e:	a901      	add	r1, sp, #4
 8006f50:	b142      	cbz	r2, 8006f64 <__ascii_mbtowc+0x1a>
 8006f52:	b14b      	cbz	r3, 8006f68 <__ascii_mbtowc+0x1e>
 8006f54:	7813      	ldrb	r3, [r2, #0]
 8006f56:	600b      	str	r3, [r1, #0]
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	1e10      	subs	r0, r2, #0
 8006f5c:	bf18      	it	ne
 8006f5e:	2001      	movne	r0, #1
 8006f60:	b002      	add	sp, #8
 8006f62:	4770      	bx	lr
 8006f64:	4610      	mov	r0, r2
 8006f66:	e7fb      	b.n	8006f60 <__ascii_mbtowc+0x16>
 8006f68:	f06f 0001 	mvn.w	r0, #1
 8006f6c:	e7f8      	b.n	8006f60 <__ascii_mbtowc+0x16>

08006f6e <memmove>:
 8006f6e:	4288      	cmp	r0, r1
 8006f70:	b510      	push	{r4, lr}
 8006f72:	eb01 0402 	add.w	r4, r1, r2
 8006f76:	d902      	bls.n	8006f7e <memmove+0x10>
 8006f78:	4284      	cmp	r4, r0
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	d807      	bhi.n	8006f8e <memmove+0x20>
 8006f7e:	1e43      	subs	r3, r0, #1
 8006f80:	42a1      	cmp	r1, r4
 8006f82:	d008      	beq.n	8006f96 <memmove+0x28>
 8006f84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f8c:	e7f8      	b.n	8006f80 <memmove+0x12>
 8006f8e:	4402      	add	r2, r0
 8006f90:	4601      	mov	r1, r0
 8006f92:	428a      	cmp	r2, r1
 8006f94:	d100      	bne.n	8006f98 <memmove+0x2a>
 8006f96:	bd10      	pop	{r4, pc}
 8006f98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fa0:	e7f7      	b.n	8006f92 <memmove+0x24>

08006fa2 <_malloc_usable_size_r>:
 8006fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa6:	1f18      	subs	r0, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bfbc      	itt	lt
 8006fac:	580b      	ldrlt	r3, [r1, r0]
 8006fae:	18c0      	addlt	r0, r0, r3
 8006fb0:	4770      	bx	lr

08006fb2 <__sfputc_r>:
 8006fb2:	6893      	ldr	r3, [r2, #8]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	b410      	push	{r4}
 8006fba:	6093      	str	r3, [r2, #8]
 8006fbc:	da08      	bge.n	8006fd0 <__sfputc_r+0x1e>
 8006fbe:	6994      	ldr	r4, [r2, #24]
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	db01      	blt.n	8006fc8 <__sfputc_r+0x16>
 8006fc4:	290a      	cmp	r1, #10
 8006fc6:	d103      	bne.n	8006fd0 <__sfputc_r+0x1e>
 8006fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fcc:	f000 b94a 	b.w	8007264 <__swbuf_r>
 8006fd0:	6813      	ldr	r3, [r2, #0]
 8006fd2:	1c58      	adds	r0, r3, #1
 8006fd4:	6010      	str	r0, [r2, #0]
 8006fd6:	7019      	strb	r1, [r3, #0]
 8006fd8:	4608      	mov	r0, r1
 8006fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <__sfputs_r>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460f      	mov	r7, r1
 8006fe6:	4614      	mov	r4, r2
 8006fe8:	18d5      	adds	r5, r2, r3
 8006fea:	42ac      	cmp	r4, r5
 8006fec:	d101      	bne.n	8006ff2 <__sfputs_r+0x12>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	e007      	b.n	8007002 <__sfputs_r+0x22>
 8006ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff6:	463a      	mov	r2, r7
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f7ff ffda 	bl	8006fb2 <__sfputc_r>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d1f3      	bne.n	8006fea <__sfputs_r+0xa>
 8007002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007004 <_vfiprintf_r>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	460d      	mov	r5, r1
 800700a:	b09d      	sub	sp, #116	; 0x74
 800700c:	4614      	mov	r4, r2
 800700e:	4698      	mov	r8, r3
 8007010:	4606      	mov	r6, r0
 8007012:	b118      	cbz	r0, 800701c <_vfiprintf_r+0x18>
 8007014:	6983      	ldr	r3, [r0, #24]
 8007016:	b90b      	cbnz	r3, 800701c <_vfiprintf_r+0x18>
 8007018:	f000 fb14 	bl	8007644 <__sinit>
 800701c:	4b89      	ldr	r3, [pc, #548]	; (8007244 <_vfiprintf_r+0x240>)
 800701e:	429d      	cmp	r5, r3
 8007020:	d11b      	bne.n	800705a <_vfiprintf_r+0x56>
 8007022:	6875      	ldr	r5, [r6, #4]
 8007024:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007026:	07d9      	lsls	r1, r3, #31
 8007028:	d405      	bmi.n	8007036 <_vfiprintf_r+0x32>
 800702a:	89ab      	ldrh	r3, [r5, #12]
 800702c:	059a      	lsls	r2, r3, #22
 800702e:	d402      	bmi.n	8007036 <_vfiprintf_r+0x32>
 8007030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007032:	f7ff ff88 	bl	8006f46 <__retarget_lock_acquire_recursive>
 8007036:	89ab      	ldrh	r3, [r5, #12]
 8007038:	071b      	lsls	r3, r3, #28
 800703a:	d501      	bpl.n	8007040 <_vfiprintf_r+0x3c>
 800703c:	692b      	ldr	r3, [r5, #16]
 800703e:	b9eb      	cbnz	r3, 800707c <_vfiprintf_r+0x78>
 8007040:	4629      	mov	r1, r5
 8007042:	4630      	mov	r0, r6
 8007044:	f000 f96e 	bl	8007324 <__swsetup_r>
 8007048:	b1c0      	cbz	r0, 800707c <_vfiprintf_r+0x78>
 800704a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800704c:	07dc      	lsls	r4, r3, #31
 800704e:	d50e      	bpl.n	800706e <_vfiprintf_r+0x6a>
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	b01d      	add	sp, #116	; 0x74
 8007056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705a:	4b7b      	ldr	r3, [pc, #492]	; (8007248 <_vfiprintf_r+0x244>)
 800705c:	429d      	cmp	r5, r3
 800705e:	d101      	bne.n	8007064 <_vfiprintf_r+0x60>
 8007060:	68b5      	ldr	r5, [r6, #8]
 8007062:	e7df      	b.n	8007024 <_vfiprintf_r+0x20>
 8007064:	4b79      	ldr	r3, [pc, #484]	; (800724c <_vfiprintf_r+0x248>)
 8007066:	429d      	cmp	r5, r3
 8007068:	bf08      	it	eq
 800706a:	68f5      	ldreq	r5, [r6, #12]
 800706c:	e7da      	b.n	8007024 <_vfiprintf_r+0x20>
 800706e:	89ab      	ldrh	r3, [r5, #12]
 8007070:	0598      	lsls	r0, r3, #22
 8007072:	d4ed      	bmi.n	8007050 <_vfiprintf_r+0x4c>
 8007074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007076:	f7ff ff67 	bl	8006f48 <__retarget_lock_release_recursive>
 800707a:	e7e9      	b.n	8007050 <_vfiprintf_r+0x4c>
 800707c:	2300      	movs	r3, #0
 800707e:	9309      	str	r3, [sp, #36]	; 0x24
 8007080:	2320      	movs	r3, #32
 8007082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007086:	f8cd 800c 	str.w	r8, [sp, #12]
 800708a:	2330      	movs	r3, #48	; 0x30
 800708c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007250 <_vfiprintf_r+0x24c>
 8007090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007094:	f04f 0901 	mov.w	r9, #1
 8007098:	4623      	mov	r3, r4
 800709a:	469a      	mov	sl, r3
 800709c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a0:	b10a      	cbz	r2, 80070a6 <_vfiprintf_r+0xa2>
 80070a2:	2a25      	cmp	r2, #37	; 0x25
 80070a4:	d1f9      	bne.n	800709a <_vfiprintf_r+0x96>
 80070a6:	ebba 0b04 	subs.w	fp, sl, r4
 80070aa:	d00b      	beq.n	80070c4 <_vfiprintf_r+0xc0>
 80070ac:	465b      	mov	r3, fp
 80070ae:	4622      	mov	r2, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7ff ff94 	bl	8006fe0 <__sfputs_r>
 80070b8:	3001      	adds	r0, #1
 80070ba:	f000 80aa 	beq.w	8007212 <_vfiprintf_r+0x20e>
 80070be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070c0:	445a      	add	r2, fp
 80070c2:	9209      	str	r2, [sp, #36]	; 0x24
 80070c4:	f89a 3000 	ldrb.w	r3, [sl]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80a2 	beq.w	8007212 <_vfiprintf_r+0x20e>
 80070ce:	2300      	movs	r3, #0
 80070d0:	f04f 32ff 	mov.w	r2, #4294967295
 80070d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d8:	f10a 0a01 	add.w	sl, sl, #1
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	9307      	str	r3, [sp, #28]
 80070e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070e4:	931a      	str	r3, [sp, #104]	; 0x68
 80070e6:	4654      	mov	r4, sl
 80070e8:	2205      	movs	r2, #5
 80070ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ee:	4858      	ldr	r0, [pc, #352]	; (8007250 <_vfiprintf_r+0x24c>)
 80070f0:	f7f9 f896 	bl	8000220 <memchr>
 80070f4:	9a04      	ldr	r2, [sp, #16]
 80070f6:	b9d8      	cbnz	r0, 8007130 <_vfiprintf_r+0x12c>
 80070f8:	06d1      	lsls	r1, r2, #27
 80070fa:	bf44      	itt	mi
 80070fc:	2320      	movmi	r3, #32
 80070fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007102:	0713      	lsls	r3, r2, #28
 8007104:	bf44      	itt	mi
 8007106:	232b      	movmi	r3, #43	; 0x2b
 8007108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800710c:	f89a 3000 	ldrb.w	r3, [sl]
 8007110:	2b2a      	cmp	r3, #42	; 0x2a
 8007112:	d015      	beq.n	8007140 <_vfiprintf_r+0x13c>
 8007114:	9a07      	ldr	r2, [sp, #28]
 8007116:	4654      	mov	r4, sl
 8007118:	2000      	movs	r0, #0
 800711a:	f04f 0c0a 	mov.w	ip, #10
 800711e:	4621      	mov	r1, r4
 8007120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007124:	3b30      	subs	r3, #48	; 0x30
 8007126:	2b09      	cmp	r3, #9
 8007128:	d94e      	bls.n	80071c8 <_vfiprintf_r+0x1c4>
 800712a:	b1b0      	cbz	r0, 800715a <_vfiprintf_r+0x156>
 800712c:	9207      	str	r2, [sp, #28]
 800712e:	e014      	b.n	800715a <_vfiprintf_r+0x156>
 8007130:	eba0 0308 	sub.w	r3, r0, r8
 8007134:	fa09 f303 	lsl.w	r3, r9, r3
 8007138:	4313      	orrs	r3, r2
 800713a:	9304      	str	r3, [sp, #16]
 800713c:	46a2      	mov	sl, r4
 800713e:	e7d2      	b.n	80070e6 <_vfiprintf_r+0xe2>
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	1d19      	adds	r1, r3, #4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	9103      	str	r1, [sp, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	bfbb      	ittet	lt
 800714c:	425b      	neglt	r3, r3
 800714e:	f042 0202 	orrlt.w	r2, r2, #2
 8007152:	9307      	strge	r3, [sp, #28]
 8007154:	9307      	strlt	r3, [sp, #28]
 8007156:	bfb8      	it	lt
 8007158:	9204      	strlt	r2, [sp, #16]
 800715a:	7823      	ldrb	r3, [r4, #0]
 800715c:	2b2e      	cmp	r3, #46	; 0x2e
 800715e:	d10c      	bne.n	800717a <_vfiprintf_r+0x176>
 8007160:	7863      	ldrb	r3, [r4, #1]
 8007162:	2b2a      	cmp	r3, #42	; 0x2a
 8007164:	d135      	bne.n	80071d2 <_vfiprintf_r+0x1ce>
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	1d1a      	adds	r2, r3, #4
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	9203      	str	r2, [sp, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	bfb8      	it	lt
 8007172:	f04f 33ff 	movlt.w	r3, #4294967295
 8007176:	3402      	adds	r4, #2
 8007178:	9305      	str	r3, [sp, #20]
 800717a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007260 <_vfiprintf_r+0x25c>
 800717e:	7821      	ldrb	r1, [r4, #0]
 8007180:	2203      	movs	r2, #3
 8007182:	4650      	mov	r0, sl
 8007184:	f7f9 f84c 	bl	8000220 <memchr>
 8007188:	b140      	cbz	r0, 800719c <_vfiprintf_r+0x198>
 800718a:	2340      	movs	r3, #64	; 0x40
 800718c:	eba0 000a 	sub.w	r0, r0, sl
 8007190:	fa03 f000 	lsl.w	r0, r3, r0
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	4303      	orrs	r3, r0
 8007198:	3401      	adds	r4, #1
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a0:	482c      	ldr	r0, [pc, #176]	; (8007254 <_vfiprintf_r+0x250>)
 80071a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071a6:	2206      	movs	r2, #6
 80071a8:	f7f9 f83a 	bl	8000220 <memchr>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d03f      	beq.n	8007230 <_vfiprintf_r+0x22c>
 80071b0:	4b29      	ldr	r3, [pc, #164]	; (8007258 <_vfiprintf_r+0x254>)
 80071b2:	bb1b      	cbnz	r3, 80071fc <_vfiprintf_r+0x1f8>
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	3307      	adds	r3, #7
 80071b8:	f023 0307 	bic.w	r3, r3, #7
 80071bc:	3308      	adds	r3, #8
 80071be:	9303      	str	r3, [sp, #12]
 80071c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c2:	443b      	add	r3, r7
 80071c4:	9309      	str	r3, [sp, #36]	; 0x24
 80071c6:	e767      	b.n	8007098 <_vfiprintf_r+0x94>
 80071c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071cc:	460c      	mov	r4, r1
 80071ce:	2001      	movs	r0, #1
 80071d0:	e7a5      	b.n	800711e <_vfiprintf_r+0x11a>
 80071d2:	2300      	movs	r3, #0
 80071d4:	3401      	adds	r4, #1
 80071d6:	9305      	str	r3, [sp, #20]
 80071d8:	4619      	mov	r1, r3
 80071da:	f04f 0c0a 	mov.w	ip, #10
 80071de:	4620      	mov	r0, r4
 80071e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071e4:	3a30      	subs	r2, #48	; 0x30
 80071e6:	2a09      	cmp	r2, #9
 80071e8:	d903      	bls.n	80071f2 <_vfiprintf_r+0x1ee>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0c5      	beq.n	800717a <_vfiprintf_r+0x176>
 80071ee:	9105      	str	r1, [sp, #20]
 80071f0:	e7c3      	b.n	800717a <_vfiprintf_r+0x176>
 80071f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80071f6:	4604      	mov	r4, r0
 80071f8:	2301      	movs	r3, #1
 80071fa:	e7f0      	b.n	80071de <_vfiprintf_r+0x1da>
 80071fc:	ab03      	add	r3, sp, #12
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	462a      	mov	r2, r5
 8007202:	4b16      	ldr	r3, [pc, #88]	; (800725c <_vfiprintf_r+0x258>)
 8007204:	a904      	add	r1, sp, #16
 8007206:	4630      	mov	r0, r6
 8007208:	f7fd fec4 	bl	8004f94 <_printf_float>
 800720c:	4607      	mov	r7, r0
 800720e:	1c78      	adds	r0, r7, #1
 8007210:	d1d6      	bne.n	80071c0 <_vfiprintf_r+0x1bc>
 8007212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007214:	07d9      	lsls	r1, r3, #31
 8007216:	d405      	bmi.n	8007224 <_vfiprintf_r+0x220>
 8007218:	89ab      	ldrh	r3, [r5, #12]
 800721a:	059a      	lsls	r2, r3, #22
 800721c:	d402      	bmi.n	8007224 <_vfiprintf_r+0x220>
 800721e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007220:	f7ff fe92 	bl	8006f48 <__retarget_lock_release_recursive>
 8007224:	89ab      	ldrh	r3, [r5, #12]
 8007226:	065b      	lsls	r3, r3, #25
 8007228:	f53f af12 	bmi.w	8007050 <_vfiprintf_r+0x4c>
 800722c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800722e:	e711      	b.n	8007054 <_vfiprintf_r+0x50>
 8007230:	ab03      	add	r3, sp, #12
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	462a      	mov	r2, r5
 8007236:	4b09      	ldr	r3, [pc, #36]	; (800725c <_vfiprintf_r+0x258>)
 8007238:	a904      	add	r1, sp, #16
 800723a:	4630      	mov	r0, r6
 800723c:	f7fe f94e 	bl	80054dc <_printf_i>
 8007240:	e7e4      	b.n	800720c <_vfiprintf_r+0x208>
 8007242:	bf00      	nop
 8007244:	0800821c 	.word	0x0800821c
 8007248:	0800823c 	.word	0x0800823c
 800724c:	080081fc 	.word	0x080081fc
 8007250:	080080a4 	.word	0x080080a4
 8007254:	080080ae 	.word	0x080080ae
 8007258:	08004f95 	.word	0x08004f95
 800725c:	08006fe1 	.word	0x08006fe1
 8007260:	080080aa 	.word	0x080080aa

08007264 <__swbuf_r>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	460e      	mov	r6, r1
 8007268:	4614      	mov	r4, r2
 800726a:	4605      	mov	r5, r0
 800726c:	b118      	cbz	r0, 8007276 <__swbuf_r+0x12>
 800726e:	6983      	ldr	r3, [r0, #24]
 8007270:	b90b      	cbnz	r3, 8007276 <__swbuf_r+0x12>
 8007272:	f000 f9e7 	bl	8007644 <__sinit>
 8007276:	4b21      	ldr	r3, [pc, #132]	; (80072fc <__swbuf_r+0x98>)
 8007278:	429c      	cmp	r4, r3
 800727a:	d12b      	bne.n	80072d4 <__swbuf_r+0x70>
 800727c:	686c      	ldr	r4, [r5, #4]
 800727e:	69a3      	ldr	r3, [r4, #24]
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	071a      	lsls	r2, r3, #28
 8007286:	d52f      	bpl.n	80072e8 <__swbuf_r+0x84>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	b36b      	cbz	r3, 80072e8 <__swbuf_r+0x84>
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	6820      	ldr	r0, [r4, #0]
 8007290:	1ac0      	subs	r0, r0, r3
 8007292:	6963      	ldr	r3, [r4, #20]
 8007294:	b2f6      	uxtb	r6, r6
 8007296:	4283      	cmp	r3, r0
 8007298:	4637      	mov	r7, r6
 800729a:	dc04      	bgt.n	80072a6 <__swbuf_r+0x42>
 800729c:	4621      	mov	r1, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 f93c 	bl	800751c <_fflush_r>
 80072a4:	bb30      	cbnz	r0, 80072f4 <__swbuf_r+0x90>
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	60a3      	str	r3, [r4, #8]
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	6022      	str	r2, [r4, #0]
 80072b2:	701e      	strb	r6, [r3, #0]
 80072b4:	6963      	ldr	r3, [r4, #20]
 80072b6:	3001      	adds	r0, #1
 80072b8:	4283      	cmp	r3, r0
 80072ba:	d004      	beq.n	80072c6 <__swbuf_r+0x62>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	07db      	lsls	r3, r3, #31
 80072c0:	d506      	bpl.n	80072d0 <__swbuf_r+0x6c>
 80072c2:	2e0a      	cmp	r6, #10
 80072c4:	d104      	bne.n	80072d0 <__swbuf_r+0x6c>
 80072c6:	4621      	mov	r1, r4
 80072c8:	4628      	mov	r0, r5
 80072ca:	f000 f927 	bl	800751c <_fflush_r>
 80072ce:	b988      	cbnz	r0, 80072f4 <__swbuf_r+0x90>
 80072d0:	4638      	mov	r0, r7
 80072d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d4:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <__swbuf_r+0x9c>)
 80072d6:	429c      	cmp	r4, r3
 80072d8:	d101      	bne.n	80072de <__swbuf_r+0x7a>
 80072da:	68ac      	ldr	r4, [r5, #8]
 80072dc:	e7cf      	b.n	800727e <__swbuf_r+0x1a>
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <__swbuf_r+0xa0>)
 80072e0:	429c      	cmp	r4, r3
 80072e2:	bf08      	it	eq
 80072e4:	68ec      	ldreq	r4, [r5, #12]
 80072e6:	e7ca      	b.n	800727e <__swbuf_r+0x1a>
 80072e8:	4621      	mov	r1, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 f81a 	bl	8007324 <__swsetup_r>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d0cb      	beq.n	800728c <__swbuf_r+0x28>
 80072f4:	f04f 37ff 	mov.w	r7, #4294967295
 80072f8:	e7ea      	b.n	80072d0 <__swbuf_r+0x6c>
 80072fa:	bf00      	nop
 80072fc:	0800821c 	.word	0x0800821c
 8007300:	0800823c 	.word	0x0800823c
 8007304:	080081fc 	.word	0x080081fc

08007308 <__ascii_wctomb>:
 8007308:	b149      	cbz	r1, 800731e <__ascii_wctomb+0x16>
 800730a:	2aff      	cmp	r2, #255	; 0xff
 800730c:	bf85      	ittet	hi
 800730e:	238a      	movhi	r3, #138	; 0x8a
 8007310:	6003      	strhi	r3, [r0, #0]
 8007312:	700a      	strbls	r2, [r1, #0]
 8007314:	f04f 30ff 	movhi.w	r0, #4294967295
 8007318:	bf98      	it	ls
 800731a:	2001      	movls	r0, #1
 800731c:	4770      	bx	lr
 800731e:	4608      	mov	r0, r1
 8007320:	4770      	bx	lr
	...

08007324 <__swsetup_r>:
 8007324:	4b32      	ldr	r3, [pc, #200]	; (80073f0 <__swsetup_r+0xcc>)
 8007326:	b570      	push	{r4, r5, r6, lr}
 8007328:	681d      	ldr	r5, [r3, #0]
 800732a:	4606      	mov	r6, r0
 800732c:	460c      	mov	r4, r1
 800732e:	b125      	cbz	r5, 800733a <__swsetup_r+0x16>
 8007330:	69ab      	ldr	r3, [r5, #24]
 8007332:	b913      	cbnz	r3, 800733a <__swsetup_r+0x16>
 8007334:	4628      	mov	r0, r5
 8007336:	f000 f985 	bl	8007644 <__sinit>
 800733a:	4b2e      	ldr	r3, [pc, #184]	; (80073f4 <__swsetup_r+0xd0>)
 800733c:	429c      	cmp	r4, r3
 800733e:	d10f      	bne.n	8007360 <__swsetup_r+0x3c>
 8007340:	686c      	ldr	r4, [r5, #4]
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007348:	0719      	lsls	r1, r3, #28
 800734a:	d42c      	bmi.n	80073a6 <__swsetup_r+0x82>
 800734c:	06dd      	lsls	r5, r3, #27
 800734e:	d411      	bmi.n	8007374 <__swsetup_r+0x50>
 8007350:	2309      	movs	r3, #9
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007358:	81a3      	strh	r3, [r4, #12]
 800735a:	f04f 30ff 	mov.w	r0, #4294967295
 800735e:	e03e      	b.n	80073de <__swsetup_r+0xba>
 8007360:	4b25      	ldr	r3, [pc, #148]	; (80073f8 <__swsetup_r+0xd4>)
 8007362:	429c      	cmp	r4, r3
 8007364:	d101      	bne.n	800736a <__swsetup_r+0x46>
 8007366:	68ac      	ldr	r4, [r5, #8]
 8007368:	e7eb      	b.n	8007342 <__swsetup_r+0x1e>
 800736a:	4b24      	ldr	r3, [pc, #144]	; (80073fc <__swsetup_r+0xd8>)
 800736c:	429c      	cmp	r4, r3
 800736e:	bf08      	it	eq
 8007370:	68ec      	ldreq	r4, [r5, #12]
 8007372:	e7e6      	b.n	8007342 <__swsetup_r+0x1e>
 8007374:	0758      	lsls	r0, r3, #29
 8007376:	d512      	bpl.n	800739e <__swsetup_r+0x7a>
 8007378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800737a:	b141      	cbz	r1, 800738e <__swsetup_r+0x6a>
 800737c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007380:	4299      	cmp	r1, r3
 8007382:	d002      	beq.n	800738a <__swsetup_r+0x66>
 8007384:	4630      	mov	r0, r6
 8007386:	f7fd fc85 	bl	8004c94 <_free_r>
 800738a:	2300      	movs	r3, #0
 800738c:	6363      	str	r3, [r4, #52]	; 0x34
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	2300      	movs	r3, #0
 8007398:	6063      	str	r3, [r4, #4]
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	f043 0308 	orr.w	r3, r3, #8
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	b94b      	cbnz	r3, 80073be <__swsetup_r+0x9a>
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b4:	d003      	beq.n	80073be <__swsetup_r+0x9a>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4630      	mov	r0, r6
 80073ba:	f000 fa05 	bl	80077c8 <__smakebuf_r>
 80073be:	89a0      	ldrh	r0, [r4, #12]
 80073c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073c4:	f010 0301 	ands.w	r3, r0, #1
 80073c8:	d00a      	beq.n	80073e0 <__swsetup_r+0xbc>
 80073ca:	2300      	movs	r3, #0
 80073cc:	60a3      	str	r3, [r4, #8]
 80073ce:	6963      	ldr	r3, [r4, #20]
 80073d0:	425b      	negs	r3, r3
 80073d2:	61a3      	str	r3, [r4, #24]
 80073d4:	6923      	ldr	r3, [r4, #16]
 80073d6:	b943      	cbnz	r3, 80073ea <__swsetup_r+0xc6>
 80073d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073dc:	d1ba      	bne.n	8007354 <__swsetup_r+0x30>
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	0781      	lsls	r1, r0, #30
 80073e2:	bf58      	it	pl
 80073e4:	6963      	ldrpl	r3, [r4, #20]
 80073e6:	60a3      	str	r3, [r4, #8]
 80073e8:	e7f4      	b.n	80073d4 <__swsetup_r+0xb0>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e7f7      	b.n	80073de <__swsetup_r+0xba>
 80073ee:	bf00      	nop
 80073f0:	200004b8 	.word	0x200004b8
 80073f4:	0800821c 	.word	0x0800821c
 80073f8:	0800823c 	.word	0x0800823c
 80073fc:	080081fc 	.word	0x080081fc

08007400 <abort>:
 8007400:	b508      	push	{r3, lr}
 8007402:	2006      	movs	r0, #6
 8007404:	f000 fa48 	bl	8007898 <raise>
 8007408:	2001      	movs	r0, #1
 800740a:	f000 fb4d 	bl	8007aa8 <_exit>
	...

08007410 <__sflush_r>:
 8007410:	898a      	ldrh	r2, [r1, #12]
 8007412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	4605      	mov	r5, r0
 8007418:	0710      	lsls	r0, r2, #28
 800741a:	460c      	mov	r4, r1
 800741c:	d458      	bmi.n	80074d0 <__sflush_r+0xc0>
 800741e:	684b      	ldr	r3, [r1, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	dc05      	bgt.n	8007430 <__sflush_r+0x20>
 8007424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	dc02      	bgt.n	8007430 <__sflush_r+0x20>
 800742a:	2000      	movs	r0, #0
 800742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007432:	2e00      	cmp	r6, #0
 8007434:	d0f9      	beq.n	800742a <__sflush_r+0x1a>
 8007436:	2300      	movs	r3, #0
 8007438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800743c:	682f      	ldr	r7, [r5, #0]
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	d032      	beq.n	80074a8 <__sflush_r+0x98>
 8007442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	075a      	lsls	r2, r3, #29
 8007448:	d505      	bpl.n	8007456 <__sflush_r+0x46>
 800744a:	6863      	ldr	r3, [r4, #4]
 800744c:	1ac0      	subs	r0, r0, r3
 800744e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007450:	b10b      	cbz	r3, 8007456 <__sflush_r+0x46>
 8007452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007454:	1ac0      	subs	r0, r0, r3
 8007456:	2300      	movs	r3, #0
 8007458:	4602      	mov	r2, r0
 800745a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800745c:	6a21      	ldr	r1, [r4, #32]
 800745e:	4628      	mov	r0, r5
 8007460:	47b0      	blx	r6
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	d106      	bne.n	8007476 <__sflush_r+0x66>
 8007468:	6829      	ldr	r1, [r5, #0]
 800746a:	291d      	cmp	r1, #29
 800746c:	d82c      	bhi.n	80074c8 <__sflush_r+0xb8>
 800746e:	4a2a      	ldr	r2, [pc, #168]	; (8007518 <__sflush_r+0x108>)
 8007470:	40ca      	lsrs	r2, r1
 8007472:	07d6      	lsls	r6, r2, #31
 8007474:	d528      	bpl.n	80074c8 <__sflush_r+0xb8>
 8007476:	2200      	movs	r2, #0
 8007478:	6062      	str	r2, [r4, #4]
 800747a:	04d9      	lsls	r1, r3, #19
 800747c:	6922      	ldr	r2, [r4, #16]
 800747e:	6022      	str	r2, [r4, #0]
 8007480:	d504      	bpl.n	800748c <__sflush_r+0x7c>
 8007482:	1c42      	adds	r2, r0, #1
 8007484:	d101      	bne.n	800748a <__sflush_r+0x7a>
 8007486:	682b      	ldr	r3, [r5, #0]
 8007488:	b903      	cbnz	r3, 800748c <__sflush_r+0x7c>
 800748a:	6560      	str	r0, [r4, #84]	; 0x54
 800748c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800748e:	602f      	str	r7, [r5, #0]
 8007490:	2900      	cmp	r1, #0
 8007492:	d0ca      	beq.n	800742a <__sflush_r+0x1a>
 8007494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007498:	4299      	cmp	r1, r3
 800749a:	d002      	beq.n	80074a2 <__sflush_r+0x92>
 800749c:	4628      	mov	r0, r5
 800749e:	f7fd fbf9 	bl	8004c94 <_free_r>
 80074a2:	2000      	movs	r0, #0
 80074a4:	6360      	str	r0, [r4, #52]	; 0x34
 80074a6:	e7c1      	b.n	800742c <__sflush_r+0x1c>
 80074a8:	6a21      	ldr	r1, [r4, #32]
 80074aa:	2301      	movs	r3, #1
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b0      	blx	r6
 80074b0:	1c41      	adds	r1, r0, #1
 80074b2:	d1c7      	bne.n	8007444 <__sflush_r+0x34>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0c4      	beq.n	8007444 <__sflush_r+0x34>
 80074ba:	2b1d      	cmp	r3, #29
 80074bc:	d001      	beq.n	80074c2 <__sflush_r+0xb2>
 80074be:	2b16      	cmp	r3, #22
 80074c0:	d101      	bne.n	80074c6 <__sflush_r+0xb6>
 80074c2:	602f      	str	r7, [r5, #0]
 80074c4:	e7b1      	b.n	800742a <__sflush_r+0x1a>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	e7ad      	b.n	800742c <__sflush_r+0x1c>
 80074d0:	690f      	ldr	r7, [r1, #16]
 80074d2:	2f00      	cmp	r7, #0
 80074d4:	d0a9      	beq.n	800742a <__sflush_r+0x1a>
 80074d6:	0793      	lsls	r3, r2, #30
 80074d8:	680e      	ldr	r6, [r1, #0]
 80074da:	bf08      	it	eq
 80074dc:	694b      	ldreq	r3, [r1, #20]
 80074de:	600f      	str	r7, [r1, #0]
 80074e0:	bf18      	it	ne
 80074e2:	2300      	movne	r3, #0
 80074e4:	eba6 0807 	sub.w	r8, r6, r7
 80074e8:	608b      	str	r3, [r1, #8]
 80074ea:	f1b8 0f00 	cmp.w	r8, #0
 80074ee:	dd9c      	ble.n	800742a <__sflush_r+0x1a>
 80074f0:	6a21      	ldr	r1, [r4, #32]
 80074f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074f4:	4643      	mov	r3, r8
 80074f6:	463a      	mov	r2, r7
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b0      	blx	r6
 80074fc:	2800      	cmp	r0, #0
 80074fe:	dc06      	bgt.n	800750e <__sflush_r+0xfe>
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007506:	81a3      	strh	r3, [r4, #12]
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	e78e      	b.n	800742c <__sflush_r+0x1c>
 800750e:	4407      	add	r7, r0
 8007510:	eba8 0800 	sub.w	r8, r8, r0
 8007514:	e7e9      	b.n	80074ea <__sflush_r+0xda>
 8007516:	bf00      	nop
 8007518:	20400001 	.word	0x20400001

0800751c <_fflush_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	690b      	ldr	r3, [r1, #16]
 8007520:	4605      	mov	r5, r0
 8007522:	460c      	mov	r4, r1
 8007524:	b913      	cbnz	r3, 800752c <_fflush_r+0x10>
 8007526:	2500      	movs	r5, #0
 8007528:	4628      	mov	r0, r5
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	b118      	cbz	r0, 8007536 <_fflush_r+0x1a>
 800752e:	6983      	ldr	r3, [r0, #24]
 8007530:	b90b      	cbnz	r3, 8007536 <_fflush_r+0x1a>
 8007532:	f000 f887 	bl	8007644 <__sinit>
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <_fflush_r+0x6c>)
 8007538:	429c      	cmp	r4, r3
 800753a:	d11b      	bne.n	8007574 <_fflush_r+0x58>
 800753c:	686c      	ldr	r4, [r5, #4]
 800753e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0ef      	beq.n	8007526 <_fflush_r+0xa>
 8007546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007548:	07d0      	lsls	r0, r2, #31
 800754a:	d404      	bmi.n	8007556 <_fflush_r+0x3a>
 800754c:	0599      	lsls	r1, r3, #22
 800754e:	d402      	bmi.n	8007556 <_fflush_r+0x3a>
 8007550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007552:	f7ff fcf8 	bl	8006f46 <__retarget_lock_acquire_recursive>
 8007556:	4628      	mov	r0, r5
 8007558:	4621      	mov	r1, r4
 800755a:	f7ff ff59 	bl	8007410 <__sflush_r>
 800755e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007560:	07da      	lsls	r2, r3, #31
 8007562:	4605      	mov	r5, r0
 8007564:	d4e0      	bmi.n	8007528 <_fflush_r+0xc>
 8007566:	89a3      	ldrh	r3, [r4, #12]
 8007568:	059b      	lsls	r3, r3, #22
 800756a:	d4dd      	bmi.n	8007528 <_fflush_r+0xc>
 800756c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756e:	f7ff fceb 	bl	8006f48 <__retarget_lock_release_recursive>
 8007572:	e7d9      	b.n	8007528 <_fflush_r+0xc>
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <_fflush_r+0x70>)
 8007576:	429c      	cmp	r4, r3
 8007578:	d101      	bne.n	800757e <_fflush_r+0x62>
 800757a:	68ac      	ldr	r4, [r5, #8]
 800757c:	e7df      	b.n	800753e <_fflush_r+0x22>
 800757e:	4b04      	ldr	r3, [pc, #16]	; (8007590 <_fflush_r+0x74>)
 8007580:	429c      	cmp	r4, r3
 8007582:	bf08      	it	eq
 8007584:	68ec      	ldreq	r4, [r5, #12]
 8007586:	e7da      	b.n	800753e <_fflush_r+0x22>
 8007588:	0800821c 	.word	0x0800821c
 800758c:	0800823c 	.word	0x0800823c
 8007590:	080081fc 	.word	0x080081fc

08007594 <std>:
 8007594:	2300      	movs	r3, #0
 8007596:	b510      	push	{r4, lr}
 8007598:	4604      	mov	r4, r0
 800759a:	e9c0 3300 	strd	r3, r3, [r0]
 800759e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075a2:	6083      	str	r3, [r0, #8]
 80075a4:	8181      	strh	r1, [r0, #12]
 80075a6:	6643      	str	r3, [r0, #100]	; 0x64
 80075a8:	81c2      	strh	r2, [r0, #14]
 80075aa:	6183      	str	r3, [r0, #24]
 80075ac:	4619      	mov	r1, r3
 80075ae:	2208      	movs	r2, #8
 80075b0:	305c      	adds	r0, #92	; 0x5c
 80075b2:	f7fd fb67 	bl	8004c84 <memset>
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <std+0x38>)
 80075b8:	6263      	str	r3, [r4, #36]	; 0x24
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <std+0x3c>)
 80075bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80075be:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <std+0x40>)
 80075c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <std+0x44>)
 80075c4:	6224      	str	r4, [r4, #32]
 80075c6:	6323      	str	r3, [r4, #48]	; 0x30
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	bf00      	nop
 80075cc:	080078d1 	.word	0x080078d1
 80075d0:	080078f3 	.word	0x080078f3
 80075d4:	0800792b 	.word	0x0800792b
 80075d8:	0800794f 	.word	0x0800794f

080075dc <_cleanup_r>:
 80075dc:	4901      	ldr	r1, [pc, #4]	; (80075e4 <_cleanup_r+0x8>)
 80075de:	f000 b8af 	b.w	8007740 <_fwalk_reent>
 80075e2:	bf00      	nop
 80075e4:	0800751d 	.word	0x0800751d

080075e8 <__sfmoreglue>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	2268      	movs	r2, #104	; 0x68
 80075ec:	1e4d      	subs	r5, r1, #1
 80075ee:	4355      	muls	r5, r2
 80075f0:	460e      	mov	r6, r1
 80075f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075f6:	f7fd fbb9 	bl	8004d6c <_malloc_r>
 80075fa:	4604      	mov	r4, r0
 80075fc:	b140      	cbz	r0, 8007610 <__sfmoreglue+0x28>
 80075fe:	2100      	movs	r1, #0
 8007600:	e9c0 1600 	strd	r1, r6, [r0]
 8007604:	300c      	adds	r0, #12
 8007606:	60a0      	str	r0, [r4, #8]
 8007608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800760c:	f7fd fb3a 	bl	8004c84 <memset>
 8007610:	4620      	mov	r0, r4
 8007612:	bd70      	pop	{r4, r5, r6, pc}

08007614 <__sfp_lock_acquire>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__sfp_lock_acquire+0x8>)
 8007616:	f7ff bc96 	b.w	8006f46 <__retarget_lock_acquire_recursive>
 800761a:	bf00      	nop
 800761c:	2000081d 	.word	0x2000081d

08007620 <__sfp_lock_release>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__sfp_lock_release+0x8>)
 8007622:	f7ff bc91 	b.w	8006f48 <__retarget_lock_release_recursive>
 8007626:	bf00      	nop
 8007628:	2000081d 	.word	0x2000081d

0800762c <__sinit_lock_acquire>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__sinit_lock_acquire+0x8>)
 800762e:	f7ff bc8a 	b.w	8006f46 <__retarget_lock_acquire_recursive>
 8007632:	bf00      	nop
 8007634:	2000081e 	.word	0x2000081e

08007638 <__sinit_lock_release>:
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <__sinit_lock_release+0x8>)
 800763a:	f7ff bc85 	b.w	8006f48 <__retarget_lock_release_recursive>
 800763e:	bf00      	nop
 8007640:	2000081e 	.word	0x2000081e

08007644 <__sinit>:
 8007644:	b510      	push	{r4, lr}
 8007646:	4604      	mov	r4, r0
 8007648:	f7ff fff0 	bl	800762c <__sinit_lock_acquire>
 800764c:	69a3      	ldr	r3, [r4, #24]
 800764e:	b11b      	cbz	r3, 8007658 <__sinit+0x14>
 8007650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007654:	f7ff bff0 	b.w	8007638 <__sinit_lock_release>
 8007658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800765c:	6523      	str	r3, [r4, #80]	; 0x50
 800765e:	4b13      	ldr	r3, [pc, #76]	; (80076ac <__sinit+0x68>)
 8007660:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <__sinit+0x6c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	62a2      	str	r2, [r4, #40]	; 0x28
 8007666:	42a3      	cmp	r3, r4
 8007668:	bf04      	itt	eq
 800766a:	2301      	moveq	r3, #1
 800766c:	61a3      	streq	r3, [r4, #24]
 800766e:	4620      	mov	r0, r4
 8007670:	f000 f820 	bl	80076b4 <__sfp>
 8007674:	6060      	str	r0, [r4, #4]
 8007676:	4620      	mov	r0, r4
 8007678:	f000 f81c 	bl	80076b4 <__sfp>
 800767c:	60a0      	str	r0, [r4, #8]
 800767e:	4620      	mov	r0, r4
 8007680:	f000 f818 	bl	80076b4 <__sfp>
 8007684:	2200      	movs	r2, #0
 8007686:	60e0      	str	r0, [r4, #12]
 8007688:	2104      	movs	r1, #4
 800768a:	6860      	ldr	r0, [r4, #4]
 800768c:	f7ff ff82 	bl	8007594 <std>
 8007690:	68a0      	ldr	r0, [r4, #8]
 8007692:	2201      	movs	r2, #1
 8007694:	2109      	movs	r1, #9
 8007696:	f7ff ff7d 	bl	8007594 <std>
 800769a:	68e0      	ldr	r0, [r4, #12]
 800769c:	2202      	movs	r2, #2
 800769e:	2112      	movs	r1, #18
 80076a0:	f7ff ff78 	bl	8007594 <std>
 80076a4:	2301      	movs	r3, #1
 80076a6:	61a3      	str	r3, [r4, #24]
 80076a8:	e7d2      	b.n	8007650 <__sinit+0xc>
 80076aa:	bf00      	nop
 80076ac:	08007e84 	.word	0x08007e84
 80076b0:	080075dd 	.word	0x080075dd

080076b4 <__sfp>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	4607      	mov	r7, r0
 80076b8:	f7ff ffac 	bl	8007614 <__sfp_lock_acquire>
 80076bc:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <__sfp+0x84>)
 80076be:	681e      	ldr	r6, [r3, #0]
 80076c0:	69b3      	ldr	r3, [r6, #24]
 80076c2:	b913      	cbnz	r3, 80076ca <__sfp+0x16>
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7ff ffbd 	bl	8007644 <__sinit>
 80076ca:	3648      	adds	r6, #72	; 0x48
 80076cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	d503      	bpl.n	80076dc <__sfp+0x28>
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	b30b      	cbz	r3, 800771c <__sfp+0x68>
 80076d8:	6836      	ldr	r6, [r6, #0]
 80076da:	e7f7      	b.n	80076cc <__sfp+0x18>
 80076dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076e0:	b9d5      	cbnz	r5, 8007718 <__sfp+0x64>
 80076e2:	4b16      	ldr	r3, [pc, #88]	; (800773c <__sfp+0x88>)
 80076e4:	60e3      	str	r3, [r4, #12]
 80076e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076ea:	6665      	str	r5, [r4, #100]	; 0x64
 80076ec:	f7ff fc2a 	bl	8006f44 <__retarget_lock_init_recursive>
 80076f0:	f7ff ff96 	bl	8007620 <__sfp_lock_release>
 80076f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076fc:	6025      	str	r5, [r4, #0]
 80076fe:	61a5      	str	r5, [r4, #24]
 8007700:	2208      	movs	r2, #8
 8007702:	4629      	mov	r1, r5
 8007704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007708:	f7fd fabc 	bl	8004c84 <memset>
 800770c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007714:	4620      	mov	r0, r4
 8007716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007718:	3468      	adds	r4, #104	; 0x68
 800771a:	e7d9      	b.n	80076d0 <__sfp+0x1c>
 800771c:	2104      	movs	r1, #4
 800771e:	4638      	mov	r0, r7
 8007720:	f7ff ff62 	bl	80075e8 <__sfmoreglue>
 8007724:	4604      	mov	r4, r0
 8007726:	6030      	str	r0, [r6, #0]
 8007728:	2800      	cmp	r0, #0
 800772a:	d1d5      	bne.n	80076d8 <__sfp+0x24>
 800772c:	f7ff ff78 	bl	8007620 <__sfp_lock_release>
 8007730:	230c      	movs	r3, #12
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	e7ee      	b.n	8007714 <__sfp+0x60>
 8007736:	bf00      	nop
 8007738:	08007e84 	.word	0x08007e84
 800773c:	ffff0001 	.word	0xffff0001

08007740 <_fwalk_reent>:
 8007740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007744:	4606      	mov	r6, r0
 8007746:	4688      	mov	r8, r1
 8007748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800774c:	2700      	movs	r7, #0
 800774e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007752:	f1b9 0901 	subs.w	r9, r9, #1
 8007756:	d505      	bpl.n	8007764 <_fwalk_reent+0x24>
 8007758:	6824      	ldr	r4, [r4, #0]
 800775a:	2c00      	cmp	r4, #0
 800775c:	d1f7      	bne.n	800774e <_fwalk_reent+0xe>
 800775e:	4638      	mov	r0, r7
 8007760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007764:	89ab      	ldrh	r3, [r5, #12]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d907      	bls.n	800777a <_fwalk_reent+0x3a>
 800776a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800776e:	3301      	adds	r3, #1
 8007770:	d003      	beq.n	800777a <_fwalk_reent+0x3a>
 8007772:	4629      	mov	r1, r5
 8007774:	4630      	mov	r0, r6
 8007776:	47c0      	blx	r8
 8007778:	4307      	orrs	r7, r0
 800777a:	3568      	adds	r5, #104	; 0x68
 800777c:	e7e9      	b.n	8007752 <_fwalk_reent+0x12>

0800777e <__swhatbuf_r>:
 800777e:	b570      	push	{r4, r5, r6, lr}
 8007780:	460e      	mov	r6, r1
 8007782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007786:	2900      	cmp	r1, #0
 8007788:	b096      	sub	sp, #88	; 0x58
 800778a:	4614      	mov	r4, r2
 800778c:	461d      	mov	r5, r3
 800778e:	da08      	bge.n	80077a2 <__swhatbuf_r+0x24>
 8007790:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	602a      	str	r2, [r5, #0]
 8007798:	061a      	lsls	r2, r3, #24
 800779a:	d410      	bmi.n	80077be <__swhatbuf_r+0x40>
 800779c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a0:	e00e      	b.n	80077c0 <__swhatbuf_r+0x42>
 80077a2:	466a      	mov	r2, sp
 80077a4:	f000 f8fa 	bl	800799c <_fstat_r>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	dbf1      	blt.n	8007790 <__swhatbuf_r+0x12>
 80077ac:	9a01      	ldr	r2, [sp, #4]
 80077ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077b6:	425a      	negs	r2, r3
 80077b8:	415a      	adcs	r2, r3
 80077ba:	602a      	str	r2, [r5, #0]
 80077bc:	e7ee      	b.n	800779c <__swhatbuf_r+0x1e>
 80077be:	2340      	movs	r3, #64	; 0x40
 80077c0:	2000      	movs	r0, #0
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	b016      	add	sp, #88	; 0x58
 80077c6:	bd70      	pop	{r4, r5, r6, pc}

080077c8 <__smakebuf_r>:
 80077c8:	898b      	ldrh	r3, [r1, #12]
 80077ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077cc:	079d      	lsls	r5, r3, #30
 80077ce:	4606      	mov	r6, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	d507      	bpl.n	80077e4 <__smakebuf_r+0x1c>
 80077d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	2301      	movs	r3, #1
 80077de:	6163      	str	r3, [r4, #20]
 80077e0:	b002      	add	sp, #8
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	ab01      	add	r3, sp, #4
 80077e6:	466a      	mov	r2, sp
 80077e8:	f7ff ffc9 	bl	800777e <__swhatbuf_r>
 80077ec:	9900      	ldr	r1, [sp, #0]
 80077ee:	4605      	mov	r5, r0
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7fd fabb 	bl	8004d6c <_malloc_r>
 80077f6:	b948      	cbnz	r0, 800780c <__smakebuf_r+0x44>
 80077f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fc:	059a      	lsls	r2, r3, #22
 80077fe:	d4ef      	bmi.n	80077e0 <__smakebuf_r+0x18>
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	f043 0302 	orr.w	r3, r3, #2
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	e7e3      	b.n	80077d4 <__smakebuf_r+0xc>
 800780c:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <__smakebuf_r+0x7c>)
 800780e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	6020      	str	r0, [r4, #0]
 8007814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007818:	81a3      	strh	r3, [r4, #12]
 800781a:	9b00      	ldr	r3, [sp, #0]
 800781c:	6163      	str	r3, [r4, #20]
 800781e:	9b01      	ldr	r3, [sp, #4]
 8007820:	6120      	str	r0, [r4, #16]
 8007822:	b15b      	cbz	r3, 800783c <__smakebuf_r+0x74>
 8007824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007828:	4630      	mov	r0, r6
 800782a:	f000 f8c9 	bl	80079c0 <_isatty_r>
 800782e:	b128      	cbz	r0, 800783c <__smakebuf_r+0x74>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f023 0303 	bic.w	r3, r3, #3
 8007836:	f043 0301 	orr.w	r3, r3, #1
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	89a0      	ldrh	r0, [r4, #12]
 800783e:	4305      	orrs	r5, r0
 8007840:	81a5      	strh	r5, [r4, #12]
 8007842:	e7cd      	b.n	80077e0 <__smakebuf_r+0x18>
 8007844:	080075dd 	.word	0x080075dd

08007848 <_raise_r>:
 8007848:	291f      	cmp	r1, #31
 800784a:	b538      	push	{r3, r4, r5, lr}
 800784c:	4604      	mov	r4, r0
 800784e:	460d      	mov	r5, r1
 8007850:	d904      	bls.n	800785c <_raise_r+0x14>
 8007852:	2316      	movs	r3, #22
 8007854:	6003      	str	r3, [r0, #0]
 8007856:	f04f 30ff 	mov.w	r0, #4294967295
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800785e:	b112      	cbz	r2, 8007866 <_raise_r+0x1e>
 8007860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007864:	b94b      	cbnz	r3, 800787a <_raise_r+0x32>
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f830 	bl	80078cc <_getpid_r>
 800786c:	462a      	mov	r2, r5
 800786e:	4601      	mov	r1, r0
 8007870:	4620      	mov	r0, r4
 8007872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007876:	f000 b817 	b.w	80078a8 <_kill_r>
 800787a:	2b01      	cmp	r3, #1
 800787c:	d00a      	beq.n	8007894 <_raise_r+0x4c>
 800787e:	1c59      	adds	r1, r3, #1
 8007880:	d103      	bne.n	800788a <_raise_r+0x42>
 8007882:	2316      	movs	r3, #22
 8007884:	6003      	str	r3, [r0, #0]
 8007886:	2001      	movs	r0, #1
 8007888:	e7e7      	b.n	800785a <_raise_r+0x12>
 800788a:	2400      	movs	r4, #0
 800788c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007890:	4628      	mov	r0, r5
 8007892:	4798      	blx	r3
 8007894:	2000      	movs	r0, #0
 8007896:	e7e0      	b.n	800785a <_raise_r+0x12>

08007898 <raise>:
 8007898:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <raise+0xc>)
 800789a:	4601      	mov	r1, r0
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	f7ff bfd3 	b.w	8007848 <_raise_r>
 80078a2:	bf00      	nop
 80078a4:	200004b8 	.word	0x200004b8

080078a8 <_kill_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d07      	ldr	r5, [pc, #28]	; (80078c8 <_kill_r+0x20>)
 80078ac:	2300      	movs	r3, #0
 80078ae:	4604      	mov	r4, r0
 80078b0:	4608      	mov	r0, r1
 80078b2:	4611      	mov	r1, r2
 80078b4:	602b      	str	r3, [r5, #0]
 80078b6:	f000 f8d7 	bl	8007a68 <_kill>
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	d102      	bne.n	80078c4 <_kill_r+0x1c>
 80078be:	682b      	ldr	r3, [r5, #0]
 80078c0:	b103      	cbz	r3, 80078c4 <_kill_r+0x1c>
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
 80078c6:	bf00      	nop
 80078c8:	20000818 	.word	0x20000818

080078cc <_getpid_r>:
 80078cc:	f000 b8bc 	b.w	8007a48 <_getpid>

080078d0 <__sread>:
 80078d0:	b510      	push	{r4, lr}
 80078d2:	460c      	mov	r4, r1
 80078d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d8:	f000 f894 	bl	8007a04 <_read_r>
 80078dc:	2800      	cmp	r0, #0
 80078de:	bfab      	itete	ge
 80078e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078e2:	89a3      	ldrhlt	r3, [r4, #12]
 80078e4:	181b      	addge	r3, r3, r0
 80078e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078ea:	bfac      	ite	ge
 80078ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80078ee:	81a3      	strhlt	r3, [r4, #12]
 80078f0:	bd10      	pop	{r4, pc}

080078f2 <__swrite>:
 80078f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f6:	461f      	mov	r7, r3
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	05db      	lsls	r3, r3, #23
 80078fc:	4605      	mov	r5, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	4616      	mov	r6, r2
 8007902:	d505      	bpl.n	8007910 <__swrite+0x1e>
 8007904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007908:	2302      	movs	r3, #2
 800790a:	2200      	movs	r2, #0
 800790c:	f000 f868 	bl	80079e0 <_lseek_r>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	4632      	mov	r2, r6
 800791e:	463b      	mov	r3, r7
 8007920:	4628      	mov	r0, r5
 8007922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	f000 b817 	b.w	8007958 <_write_r>

0800792a <__sseek>:
 800792a:	b510      	push	{r4, lr}
 800792c:	460c      	mov	r4, r1
 800792e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007932:	f000 f855 	bl	80079e0 <_lseek_r>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	bf15      	itete	ne
 800793c:	6560      	strne	r0, [r4, #84]	; 0x54
 800793e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007946:	81a3      	strheq	r3, [r4, #12]
 8007948:	bf18      	it	ne
 800794a:	81a3      	strhne	r3, [r4, #12]
 800794c:	bd10      	pop	{r4, pc}

0800794e <__sclose>:
 800794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007952:	f000 b813 	b.w	800797c <_close_r>
	...

08007958 <_write_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	; (8007978 <_write_r+0x20>)
 800795c:	4604      	mov	r4, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	2200      	movs	r2, #0
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f000 f896 	bl	8007a98 <_write>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_write_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_write_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	20000818 	.word	0x20000818

0800797c <_close_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d06      	ldr	r5, [pc, #24]	; (8007998 <_close_r+0x1c>)
 8007980:	2300      	movs	r3, #0
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f000 f84e 	bl	8007a28 <_close>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_close_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_close_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	20000818 	.word	0x20000818

0800799c <_fstat_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4d07      	ldr	r5, [pc, #28]	; (80079bc <_fstat_r+0x20>)
 80079a0:	2300      	movs	r3, #0
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	4611      	mov	r1, r2
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	f000 f845 	bl	8007a38 <_fstat>
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	d102      	bne.n	80079b8 <_fstat_r+0x1c>
 80079b2:	682b      	ldr	r3, [r5, #0]
 80079b4:	b103      	cbz	r3, 80079b8 <_fstat_r+0x1c>
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	bd38      	pop	{r3, r4, r5, pc}
 80079ba:	bf00      	nop
 80079bc:	20000818 	.word	0x20000818

080079c0 <_isatty_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d06      	ldr	r5, [pc, #24]	; (80079dc <_isatty_r+0x1c>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	602b      	str	r3, [r5, #0]
 80079cc:	f000 f844 	bl	8007a58 <_isatty>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_isatty_r+0x1a>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_isatty_r+0x1a>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	20000818 	.word	0x20000818

080079e0 <_lseek_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d07      	ldr	r5, [pc, #28]	; (8007a00 <_lseek_r+0x20>)
 80079e4:	4604      	mov	r4, r0
 80079e6:	4608      	mov	r0, r1
 80079e8:	4611      	mov	r1, r2
 80079ea:	2200      	movs	r2, #0
 80079ec:	602a      	str	r2, [r5, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f000 f842 	bl	8007a78 <_lseek>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_lseek_r+0x1e>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_lseek_r+0x1e>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	20000818 	.word	0x20000818

08007a04 <_read_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d07      	ldr	r5, [pc, #28]	; (8007a24 <_read_r+0x20>)
 8007a08:	4604      	mov	r4, r0
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	602a      	str	r2, [r5, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f000 f838 	bl	8007a88 <_read>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_read_r+0x1e>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_read_r+0x1e>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20000818 	.word	0x20000818

08007a28 <_close>:
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <_close+0xc>)
 8007a2a:	2258      	movs	r2, #88	; 0x58
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a32:	4770      	bx	lr
 8007a34:	20000818 	.word	0x20000818

08007a38 <_fstat>:
 8007a38:	4b02      	ldr	r3, [pc, #8]	; (8007a44 <_fstat+0xc>)
 8007a3a:	2258      	movs	r2, #88	; 0x58
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a42:	4770      	bx	lr
 8007a44:	20000818 	.word	0x20000818

08007a48 <_getpid>:
 8007a48:	4b02      	ldr	r3, [pc, #8]	; (8007a54 <_getpid+0xc>)
 8007a4a:	2258      	movs	r2, #88	; 0x58
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a52:	4770      	bx	lr
 8007a54:	20000818 	.word	0x20000818

08007a58 <_isatty>:
 8007a58:	4b02      	ldr	r3, [pc, #8]	; (8007a64 <_isatty+0xc>)
 8007a5a:	2258      	movs	r2, #88	; 0x58
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	2000      	movs	r0, #0
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20000818 	.word	0x20000818

08007a68 <_kill>:
 8007a68:	4b02      	ldr	r3, [pc, #8]	; (8007a74 <_kill+0xc>)
 8007a6a:	2258      	movs	r2, #88	; 0x58
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a72:	4770      	bx	lr
 8007a74:	20000818 	.word	0x20000818

08007a78 <_lseek>:
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <_lseek+0xc>)
 8007a7a:	2258      	movs	r2, #88	; 0x58
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a82:	4770      	bx	lr
 8007a84:	20000818 	.word	0x20000818

08007a88 <_read>:
 8007a88:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <_read+0xc>)
 8007a8a:	2258      	movs	r2, #88	; 0x58
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a92:	4770      	bx	lr
 8007a94:	20000818 	.word	0x20000818

08007a98 <_write>:
 8007a98:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <_write+0xc>)
 8007a9a:	2258      	movs	r2, #88	; 0x58
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa2:	4770      	bx	lr
 8007aa4:	20000818 	.word	0x20000818

08007aa8 <_exit>:
 8007aa8:	e7fe      	b.n	8007aa8 <_exit>
	...

08007aac <_init>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	bf00      	nop
 8007ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab2:	bc08      	pop	{r3}
 8007ab4:	469e      	mov	lr, r3
 8007ab6:	4770      	bx	lr

08007ab8 <_fini>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	bf00      	nop
 8007abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007abe:	bc08      	pop	{r3}
 8007ac0:	469e      	mov	lr, r3
 8007ac2:	4770      	bx	lr
